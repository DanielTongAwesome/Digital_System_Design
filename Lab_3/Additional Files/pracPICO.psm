                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
                    CONSTANT led0, 40
                 
                   
                   
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
    
                    CONSTANT ACCUMULATE_LOW, 04
                    CONSTANT ACCUMULATE_HIGH, 06
                    CONSTANT COUNTER, 07
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 05
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    STORE s0, COUNTER
					STORE s0, ACCUMULATE_LOW
					STORE s0, ACCUMULATE_HIGH			  ;set the vlue for these three registers to be 00
                    OUTPUT s0, LED_port
					OUTPUT s0, led0	
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;

      main_program: LOAD s1, 01											;light up LED[0]
					OUTPUT s1, led0
                    CALL delay_1s
                    LOAD s1, 00											;turn off LED[0]
					OUTPUT s1, led0
					CALL delay_1s
					JUMP main_program
                 
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
                    ;
                    ; The following code flash the led and shift each second
                    ;

               ISR: STORE s0, ISR_preserve_s0           ;preserve register
                    STORE s1, ISR_preserve_s1           ;preserve register
                    STORE s2, ISR_preserve_s2           ;preserve register
                    STORE s3, ISR_preserve_s3           ;preserve register
                    
                    ; read input value
                    INPUT s0, DATA_IN_PORT

                    ; read varaiables value
                    FETCH s1, ACCUMULATE_LOW
                    FETCH s2, ACCUMULATE_HIGH
                    FETCH s3, COUNTER

                    COMPARE s0, 80               ; test s0 is negative or not
                    JUMP NC, TAKE_ABS_DATA     ; if it is negative 

 ADD_SIGNAL_VALUE:  ADD s1, s0
                    ADDCY s2, 00 
                    ADD s3, 01

                    ; if overflow go to output
                    COMPARE s3, 00
                    JUMP Z, LED_OUTPUT

                    ; else store 
                    STORE s1, ACCUMULATE_LOW            ;store variable
                    STORE s2, ACCUMULATE_HIGH           ;store varibale
                    STORE s3, COUNTER                   ;store variable

                    FETCH s0, ISR_preserve_s0           ;back to register
                    FETCH s1, ISR_preserve_s1           ;back to register
                    FETCH s2, ISR_preserve_s2           ;back to register
                    FETCH s3, ISR_preserve_s3           ;back to register
                    RETURNI ENABLE
   
        LED_OUTPUT: COMPARE s1, 80                      ;sum >= 1000_0000
                    JUMP NC, LED9_2

                    COMPARE s1, 40                      ;sum >= 0100_0000
                    JUMP NC, LED9_3

                    COMPARE s1, 20                      ;sum >= 0010_0000
                    JUMP NC, LED9_4

                    COMPARE s1, 10                      ;sum >= 0001_0000
                    JUMP NC, LED9_5

                    COMPARE s1, 08                      ;sum >= 0000_1000
                    JUMP NC, LED9_6

                    COMPARE s1, 04                      ;sum >= 0000_0100
                    JUMP NC, LED9_7

                    COMPARE s1, 02                      ;sum >= 0000_0010
                    JUMP NC, LED9_8
                    JUMP LED9_9

          LED_END:  OUTPUT s1, LED_port                    
                    LOAD s1, 00
                    LOAD s2, 00
                    LOAD s3, 00

                    STORE s1, ACCUMULATE_LOW            ;store variable
                    STORE s2, ACCUMULATE_HIGH           ;store varibale
                    STORE s3, COUNTER                   ;store variable

                    FETCH s0, ISR_preserve_s0           ;preserve register
                    FETCH s1, ISR_preserve_s1           ;preserve register
                    FETCH s2, ISR_preserve_s2           ;preserve register
                    FETCH s3, ISR_preserve_s3           ;preserve register
                    RETURNI ENABLE
          
          ;assign led pattern in the following code
          LED9_2:   LOAD s1, ff
                    JUMP LED_END

          LED9_3:   LOAD s1, fe
                    JUMP LED_END
        
          LED9_4:   LOAD s1, fc
                    JUMP LED_END

          LED9_5:   LOAD s1, f8
                    JUMP LED_END

          LED9_6:   LOAD s1, f0
                    JUMP LED_END

          LED9_7:   LOAD s1, e0
                    JUMP LED_END
          
          LED9_8:   LOAD s1, c0
                    JUMP LED_END
        
          LED9_9:   LOAD s1, 80
                    JUMP LED_END
                    
    ; take absolute value
    TAKE_ABS_DATA:  SUB s0, 01
                    XOR s0, FF				;take complement
                    JUMP ADD_SIGNAL_VALUE
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
