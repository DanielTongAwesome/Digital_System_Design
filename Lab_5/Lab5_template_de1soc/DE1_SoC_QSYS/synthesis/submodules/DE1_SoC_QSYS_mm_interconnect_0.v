// DE1_SoC_QSYS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2019.03.25.10:34:55

`timescale 1 ps / 1 ps
module DE1_SoC_QSYS_mm_interconnect_0 (
		input  wire        clk_50_clk_clk,                                  //                                clk_50_clk.clk
		input  wire        pll_outclk0_clk,                                 //                               pll_outclk0.clk
		input  wire        pll_outclk2_clk,                                 //                               pll_outclk2.clk
		input  wire        vga_clk_bridge_out_out_clk_1_clk,                //              vga_clk_bridge_out_out_clk_1.clk
		input  wire        audio_reset_reset_bridge_in_reset_reset,         //         audio_reset_reset_bridge_in_reset.reset
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,         //         cpu_reset_n_reset_bridge_in_reset.reset
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,     //     jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        keyboard_keys_reset_reset_bridge_in_reset_reset, // keyboard_keys_reset_reset_bridge_in_reset.reset
		input  wire        mouse_pos_reset_reset_bridge_in_reset_reset,     //     mouse_pos_reset_reset_bridge_in_reset.reset
		input  wire        vga_nios_clk_reset_reset_bridge_in_reset_reset,  //  vga_nios_clk_reset_reset_bridge_in_reset.reset
		input  wire [27:0] cpu_data_master_address,                         //                           cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                     //                                          .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                      //                                          .byteenable
		input  wire        cpu_data_master_read,                            //                                          .read
		output wire [31:0] cpu_data_master_readdata,                        //                                          .readdata
		output wire        cpu_data_master_readdatavalid,                   //                                          .readdatavalid
		input  wire        cpu_data_master_write,                           //                                          .write
		input  wire [31:0] cpu_data_master_writedata,                       //                                          .writedata
		input  wire        cpu_data_master_debugaccess,                     //                                          .debugaccess
		input  wire [27:0] cpu_instruction_master_address,                  //                    cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,              //                                          .waitrequest
		input  wire        cpu_instruction_master_read,                     //                                          .read
		output wire [31:0] cpu_instruction_master_readdata,                 //                                          .readdata
		output wire        cpu_instruction_master_readdatavalid,            //                                          .readdatavalid
		input  wire [31:0] vga_to_sdram_address,                            //                              vga_to_sdram.address
		output wire        vga_to_sdram_waitrequest,                        //                                          .waitrequest
		input  wire [5:0]  vga_to_sdram_burstcount,                         //                                          .burstcount
		input  wire        vga_to_sdram_read,                               //                                          .read
		output wire [31:0] vga_to_sdram_readdata,                           //                                          .readdata
		output wire        vga_to_sdram_readdatavalid,                      //                                          .readdatavalid
		output wire [1:0]  audio_data_fregen_s1_address,                    //                      audio_data_fregen_s1.address
		output wire        audio_data_fregen_s1_write,                      //                                          .write
		input  wire [31:0] audio_data_fregen_s1_readdata,                   //                                          .readdata
		output wire [31:0] audio_data_fregen_s1_writedata,                  //                                          .writedata
		output wire        audio_data_fregen_s1_chipselect,                 //                                          .chipselect
		output wire [1:0]  audio_empty_s1_address,                          //                            audio_empty_s1.address
		input  wire [31:0] audio_empty_s1_readdata,                         //                                          .readdata
		output wire [1:0]  audio_fifo_full_s1_address,                      //                        audio_fifo_full_s1.address
		input  wire [31:0] audio_fifo_full_s1_readdata,                     //                                          .readdata
		output wire [1:0]  audio_fifo_used_s1_address,                      //                        audio_fifo_used_s1.address
		input  wire [31:0] audio_fifo_used_s1_readdata,                     //                                          .readdata
		output wire [1:0]  audio_out_data_audio_s1_address,                 //                   audio_out_data_audio_s1.address
		output wire        audio_out_data_audio_s1_write,                   //                                          .write
		input  wire [31:0] audio_out_data_audio_s1_readdata,                //                                          .readdata
		output wire [31:0] audio_out_data_audio_s1_writedata,               //                                          .writedata
		output wire        audio_out_data_audio_s1_chipselect,              //                                          .chipselect
		output wire [1:0]  audio_out_pause_s1_address,                      //                        audio_out_pause_s1.address
		output wire        audio_out_pause_s1_write,                        //                                          .write
		input  wire [31:0] audio_out_pause_s1_readdata,                     //                                          .readdata
		output wire [31:0] audio_out_pause_s1_writedata,                    //                                          .writedata
		output wire        audio_out_pause_s1_chipselect,                   //                                          .chipselect
		output wire [1:0]  audio_out_stop_s1_address,                       //                         audio_out_stop_s1.address
		output wire        audio_out_stop_s1_write,                         //                                          .write
		input  wire [31:0] audio_out_stop_s1_readdata,                      //                                          .readdata
		output wire [31:0] audio_out_stop_s1_writedata,                     //                                          .writedata
		output wire        audio_out_stop_s1_chipselect,                    //                                          .chipselect
		output wire [1:0]  audio_wrclk_s1_address,                          //                            audio_wrclk_s1.address
		output wire        audio_wrclk_s1_write,                            //                                          .write
		input  wire [31:0] audio_wrclk_s1_readdata,                         //                                          .readdata
		output wire [31:0] audio_wrclk_s1_writedata,                        //                                          .writedata
		output wire        audio_wrclk_s1_chipselect,                       //                                          .chipselect
		output wire [1:0]  audio_wrreq_s1_address,                          //                            audio_wrreq_s1.address
		output wire        audio_wrreq_s1_write,                            //                                          .write
		input  wire [31:0] audio_wrreq_s1_readdata,                         //                                          .readdata
		output wire [31:0] audio_wrreq_s1_writedata,                        //                                          .writedata
		output wire        audio_wrreq_s1_chipselect,                       //                                          .chipselect
		output wire [1:0]  audio_sel_s1_address,                            //                              audio_sel_s1.address
		output wire        audio_sel_s1_write,                              //                                          .write
		input  wire [31:0] audio_sel_s1_readdata,                           //                                          .readdata
		output wire [31:0] audio_sel_s1_writedata,                          //                                          .writedata
		output wire        audio_sel_s1_chipselect,                         //                                          .chipselect
		output wire [8:0]  cpu_jtag_debug_module_address,                   //                     cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                     //                                          .write
		output wire        cpu_jtag_debug_module_read,                      //                                          .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                  //                                          .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,                 //                                          .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,                //                                          .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,               //                                          .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,               //                                          .debugaccess
		output wire [1:0]  dds_increment_s1_address,                        //                          dds_increment_s1.address
		output wire        dds_increment_s1_write,                          //                                          .write
		input  wire [31:0] dds_increment_s1_readdata,                       //                                          .readdata
		output wire [31:0] dds_increment_s1_writedata,                      //                                          .writedata
		output wire        dds_increment_s1_chipselect,                     //                                          .chipselect
		output wire [1:0]  div_freq_s1_address,                             //                               div_freq_s1.address
		output wire        div_freq_s1_write,                               //                                          .write
		input  wire [31:0] div_freq_s1_readdata,                            //                                          .readdata
		output wire [31:0] div_freq_s1_writedata,                           //                                          .writedata
		output wire        div_freq_s1_chipselect,                          //                                          .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,             //               jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,               //                                          .write
		output wire        jtag_uart_avalon_jtag_slave_read,                //                                          .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,            //                                          .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,           //                                          .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,         //                                          .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,          //                                          .chipselect
		output wire [1:0]  key_s1_address,                                  //                                    key_s1.address
		output wire        key_s1_write,                                    //                                          .write
		input  wire [31:0] key_s1_readdata,                                 //                                          .readdata
		output wire [31:0] key_s1_writedata,                                //                                          .writedata
		output wire        key_s1_chipselect,                               //                                          .chipselect
		output wire [1:0]  keyboard_keys_s1_address,                        //                          keyboard_keys_s1.address
		input  wire [31:0] keyboard_keys_s1_readdata,                       //                                          .readdata
		output wire [1:0]  lfsr_clk_interrupt_gen_s1_address,               //                 lfsr_clk_interrupt_gen_s1.address
		output wire        lfsr_clk_interrupt_gen_s1_write,                 //                                          .write
		input  wire [31:0] lfsr_clk_interrupt_gen_s1_readdata,              //                                          .readdata
		output wire [31:0] lfsr_clk_interrupt_gen_s1_writedata,             //                                          .writedata
		output wire        lfsr_clk_interrupt_gen_s1_chipselect,            //                                          .chipselect
		output wire [1:0]  lfsr_val_s1_address,                             //                               lfsr_val_s1.address
		input  wire [31:0] lfsr_val_s1_readdata,                            //                                          .readdata
		output wire [1:0]  modulation_selector_s1_address,                  //                    modulation_selector_s1.address
		output wire        modulation_selector_s1_write,                    //                                          .write
		input  wire [31:0] modulation_selector_s1_readdata,                 //                                          .readdata
		output wire [31:0] modulation_selector_s1_writedata,                //                                          .writedata
		output wire        modulation_selector_s1_chipselect,               //                                          .chipselect
		output wire [1:0]  mouse_pos_s1_address,                            //                              mouse_pos_s1.address
		input  wire [31:0] mouse_pos_s1_readdata,                           //                                          .readdata
		output wire [24:0] sdram_s1_address,                                //                                  sdram_s1.address
		output wire        sdram_s1_write,                                  //                                          .write
		output wire        sdram_s1_read,                                   //                                          .read
		input  wire [15:0] sdram_s1_readdata,                               //                                          .readdata
		output wire [15:0] sdram_s1_writedata,                              //                                          .writedata
		output wire [1:0]  sdram_s1_byteenable,                             //                                          .byteenable
		input  wire        sdram_s1_readdatavalid,                          //                                          .readdatavalid
		input  wire        sdram_s1_waitrequest,                            //                                          .waitrequest
		output wire        sdram_s1_chipselect,                             //                                          .chipselect
		output wire [1:0]  signal_selector_s1_address,                      //                        signal_selector_s1.address
		output wire        signal_selector_s1_write,                        //                                          .write
		input  wire [31:0] signal_selector_s1_readdata,                     //                                          .readdata
		output wire [31:0] signal_selector_s1_writedata,                    //                                          .writedata
		output wire        signal_selector_s1_chipselect,                   //                                          .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                //                  sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,               //                                          .readdata
		output wire [2:0]  timer_s1_address,                                //                                  timer_s1.address
		output wire        timer_s1_write,                                  //                                          .write
		input  wire [15:0] timer_s1_readdata,                               //                                          .readdata
		output wire [15:0] timer_s1_writedata,                              //                                          .writedata
		output wire        timer_s1_chipselect,                             //                                          .chipselect
		output wire [4:0]  vga_to_nios_2_datamaster_address,                //                  vga_to_nios_2_datamaster.address
		output wire        vga_to_nios_2_datamaster_write,                  //                                          .write
		output wire        vga_to_nios_2_datamaster_read,                   //                                          .read
		input  wire [31:0] vga_to_nios_2_datamaster_readdata,               //                                          .readdata
		output wire [31:0] vga_to_nios_2_datamaster_writedata               //                                          .writedata
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          vga_to_sdram_translator_avalon_universal_master_0_waitrequest;             // vga_to_sdram_agent:av_waitrequest -> vga_to_sdram_translator:uav_waitrequest
	wire   [31:0] vga_to_sdram_translator_avalon_universal_master_0_readdata;                // vga_to_sdram_agent:av_readdata -> vga_to_sdram_translator:uav_readdata
	wire          vga_to_sdram_translator_avalon_universal_master_0_debugaccess;             // vga_to_sdram_translator:uav_debugaccess -> vga_to_sdram_agent:av_debugaccess
	wire   [31:0] vga_to_sdram_translator_avalon_universal_master_0_address;                 // vga_to_sdram_translator:uav_address -> vga_to_sdram_agent:av_address
	wire          vga_to_sdram_translator_avalon_universal_master_0_read;                    // vga_to_sdram_translator:uav_read -> vga_to_sdram_agent:av_read
	wire    [3:0] vga_to_sdram_translator_avalon_universal_master_0_byteenable;              // vga_to_sdram_translator:uav_byteenable -> vga_to_sdram_agent:av_byteenable
	wire          vga_to_sdram_translator_avalon_universal_master_0_readdatavalid;           // vga_to_sdram_agent:av_readdatavalid -> vga_to_sdram_translator:uav_readdatavalid
	wire          vga_to_sdram_translator_avalon_universal_master_0_lock;                    // vga_to_sdram_translator:uav_lock -> vga_to_sdram_agent:av_lock
	wire          vga_to_sdram_translator_avalon_universal_master_0_write;                   // vga_to_sdram_translator:uav_write -> vga_to_sdram_agent:av_write
	wire   [31:0] vga_to_sdram_translator_avalon_universal_master_0_writedata;               // vga_to_sdram_translator:uav_writedata -> vga_to_sdram_agent:av_writedata
	wire    [7:0] vga_to_sdram_translator_avalon_universal_master_0_burstcount;              // vga_to_sdram_translator:uav_burstcount -> vga_to_sdram_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> vga_to_sdram_agent:rp_valid
	wire  [116:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> vga_to_sdram_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                     // vga_to_sdram_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [24:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> vga_to_sdram_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> vga_to_sdram_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> vga_to_sdram_agent:rp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [117:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                     // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [116:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                         // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [24:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                             // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                             // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                 // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                              // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                    // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                           // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                    // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                               // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                   // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                              // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                            // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [117:0] sysid_qsys_control_slave_agent_rf_source_data;                             // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                            // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                    // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                      // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                         // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [117:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                         // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                 // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                   // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                       // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                        // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                       // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                       // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                        // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                       // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [116:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                     // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [24:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire   [31:0] audio_data_fregen_s1_agent_m0_readdata;                                    // audio_data_fregen_s1_translator:uav_readdata -> audio_data_fregen_s1_agent:m0_readdata
	wire          audio_data_fregen_s1_agent_m0_waitrequest;                                 // audio_data_fregen_s1_translator:uav_waitrequest -> audio_data_fregen_s1_agent:m0_waitrequest
	wire          audio_data_fregen_s1_agent_m0_debugaccess;                                 // audio_data_fregen_s1_agent:m0_debugaccess -> audio_data_fregen_s1_translator:uav_debugaccess
	wire   [31:0] audio_data_fregen_s1_agent_m0_address;                                     // audio_data_fregen_s1_agent:m0_address -> audio_data_fregen_s1_translator:uav_address
	wire    [3:0] audio_data_fregen_s1_agent_m0_byteenable;                                  // audio_data_fregen_s1_agent:m0_byteenable -> audio_data_fregen_s1_translator:uav_byteenable
	wire          audio_data_fregen_s1_agent_m0_read;                                        // audio_data_fregen_s1_agent:m0_read -> audio_data_fregen_s1_translator:uav_read
	wire          audio_data_fregen_s1_agent_m0_readdatavalid;                               // audio_data_fregen_s1_translator:uav_readdatavalid -> audio_data_fregen_s1_agent:m0_readdatavalid
	wire          audio_data_fregen_s1_agent_m0_lock;                                        // audio_data_fregen_s1_agent:m0_lock -> audio_data_fregen_s1_translator:uav_lock
	wire   [31:0] audio_data_fregen_s1_agent_m0_writedata;                                   // audio_data_fregen_s1_agent:m0_writedata -> audio_data_fregen_s1_translator:uav_writedata
	wire          audio_data_fregen_s1_agent_m0_write;                                       // audio_data_fregen_s1_agent:m0_write -> audio_data_fregen_s1_translator:uav_write
	wire    [2:0] audio_data_fregen_s1_agent_m0_burstcount;                                  // audio_data_fregen_s1_agent:m0_burstcount -> audio_data_fregen_s1_translator:uav_burstcount
	wire          audio_data_fregen_s1_agent_rf_source_valid;                                // audio_data_fregen_s1_agent:rf_source_valid -> audio_data_fregen_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_data_fregen_s1_agent_rf_source_data;                                 // audio_data_fregen_s1_agent:rf_source_data -> audio_data_fregen_s1_agent_rsp_fifo:in_data
	wire          audio_data_fregen_s1_agent_rf_source_ready;                                // audio_data_fregen_s1_agent_rsp_fifo:in_ready -> audio_data_fregen_s1_agent:rf_source_ready
	wire          audio_data_fregen_s1_agent_rf_source_startofpacket;                        // audio_data_fregen_s1_agent:rf_source_startofpacket -> audio_data_fregen_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_data_fregen_s1_agent_rf_source_endofpacket;                          // audio_data_fregen_s1_agent:rf_source_endofpacket -> audio_data_fregen_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_data_fregen_s1_agent_rsp_fifo_out_valid;                             // audio_data_fregen_s1_agent_rsp_fifo:out_valid -> audio_data_fregen_s1_agent:rf_sink_valid
	wire  [117:0] audio_data_fregen_s1_agent_rsp_fifo_out_data;                              // audio_data_fregen_s1_agent_rsp_fifo:out_data -> audio_data_fregen_s1_agent:rf_sink_data
	wire          audio_data_fregen_s1_agent_rsp_fifo_out_ready;                             // audio_data_fregen_s1_agent:rf_sink_ready -> audio_data_fregen_s1_agent_rsp_fifo:out_ready
	wire          audio_data_fregen_s1_agent_rsp_fifo_out_startofpacket;                     // audio_data_fregen_s1_agent_rsp_fifo:out_startofpacket -> audio_data_fregen_s1_agent:rf_sink_startofpacket
	wire          audio_data_fregen_s1_agent_rsp_fifo_out_endofpacket;                       // audio_data_fregen_s1_agent_rsp_fifo:out_endofpacket -> audio_data_fregen_s1_agent:rf_sink_endofpacket
	wire          audio_data_fregen_s1_agent_rdata_fifo_src_valid;                           // audio_data_fregen_s1_agent:rdata_fifo_src_valid -> audio_data_fregen_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_data_fregen_s1_agent_rdata_fifo_src_data;                            // audio_data_fregen_s1_agent:rdata_fifo_src_data -> audio_data_fregen_s1_agent_rdata_fifo:in_data
	wire          audio_data_fregen_s1_agent_rdata_fifo_src_ready;                           // audio_data_fregen_s1_agent_rdata_fifo:in_ready -> audio_data_fregen_s1_agent:rdata_fifo_src_ready
	wire          audio_data_fregen_s1_agent_rdata_fifo_out_valid;                           // audio_data_fregen_s1_agent_rdata_fifo:out_valid -> audio_data_fregen_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_data_fregen_s1_agent_rdata_fifo_out_data;                            // audio_data_fregen_s1_agent_rdata_fifo:out_data -> audio_data_fregen_s1_agent:rdata_fifo_sink_data
	wire          audio_data_fregen_s1_agent_rdata_fifo_out_ready;                           // audio_data_fregen_s1_agent:rdata_fifo_sink_ready -> audio_data_fregen_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> audio_data_fregen_s1_agent:cp_valid
	wire  [116:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> audio_data_fregen_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                     // audio_data_fregen_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [24:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> audio_data_fregen_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> audio_data_fregen_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> audio_data_fregen_s1_agent:cp_endofpacket
	wire   [31:0] audio_empty_s1_agent_m0_readdata;                                          // audio_empty_s1_translator:uav_readdata -> audio_empty_s1_agent:m0_readdata
	wire          audio_empty_s1_agent_m0_waitrequest;                                       // audio_empty_s1_translator:uav_waitrequest -> audio_empty_s1_agent:m0_waitrequest
	wire          audio_empty_s1_agent_m0_debugaccess;                                       // audio_empty_s1_agent:m0_debugaccess -> audio_empty_s1_translator:uav_debugaccess
	wire   [31:0] audio_empty_s1_agent_m0_address;                                           // audio_empty_s1_agent:m0_address -> audio_empty_s1_translator:uav_address
	wire    [3:0] audio_empty_s1_agent_m0_byteenable;                                        // audio_empty_s1_agent:m0_byteenable -> audio_empty_s1_translator:uav_byteenable
	wire          audio_empty_s1_agent_m0_read;                                              // audio_empty_s1_agent:m0_read -> audio_empty_s1_translator:uav_read
	wire          audio_empty_s1_agent_m0_readdatavalid;                                     // audio_empty_s1_translator:uav_readdatavalid -> audio_empty_s1_agent:m0_readdatavalid
	wire          audio_empty_s1_agent_m0_lock;                                              // audio_empty_s1_agent:m0_lock -> audio_empty_s1_translator:uav_lock
	wire   [31:0] audio_empty_s1_agent_m0_writedata;                                         // audio_empty_s1_agent:m0_writedata -> audio_empty_s1_translator:uav_writedata
	wire          audio_empty_s1_agent_m0_write;                                             // audio_empty_s1_agent:m0_write -> audio_empty_s1_translator:uav_write
	wire    [2:0] audio_empty_s1_agent_m0_burstcount;                                        // audio_empty_s1_agent:m0_burstcount -> audio_empty_s1_translator:uav_burstcount
	wire          audio_empty_s1_agent_rf_source_valid;                                      // audio_empty_s1_agent:rf_source_valid -> audio_empty_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_empty_s1_agent_rf_source_data;                                       // audio_empty_s1_agent:rf_source_data -> audio_empty_s1_agent_rsp_fifo:in_data
	wire          audio_empty_s1_agent_rf_source_ready;                                      // audio_empty_s1_agent_rsp_fifo:in_ready -> audio_empty_s1_agent:rf_source_ready
	wire          audio_empty_s1_agent_rf_source_startofpacket;                              // audio_empty_s1_agent:rf_source_startofpacket -> audio_empty_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_empty_s1_agent_rf_source_endofpacket;                                // audio_empty_s1_agent:rf_source_endofpacket -> audio_empty_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_empty_s1_agent_rsp_fifo_out_valid;                                   // audio_empty_s1_agent_rsp_fifo:out_valid -> audio_empty_s1_agent:rf_sink_valid
	wire  [117:0] audio_empty_s1_agent_rsp_fifo_out_data;                                    // audio_empty_s1_agent_rsp_fifo:out_data -> audio_empty_s1_agent:rf_sink_data
	wire          audio_empty_s1_agent_rsp_fifo_out_ready;                                   // audio_empty_s1_agent:rf_sink_ready -> audio_empty_s1_agent_rsp_fifo:out_ready
	wire          audio_empty_s1_agent_rsp_fifo_out_startofpacket;                           // audio_empty_s1_agent_rsp_fifo:out_startofpacket -> audio_empty_s1_agent:rf_sink_startofpacket
	wire          audio_empty_s1_agent_rsp_fifo_out_endofpacket;                             // audio_empty_s1_agent_rsp_fifo:out_endofpacket -> audio_empty_s1_agent:rf_sink_endofpacket
	wire          audio_empty_s1_agent_rdata_fifo_src_valid;                                 // audio_empty_s1_agent:rdata_fifo_src_valid -> audio_empty_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_empty_s1_agent_rdata_fifo_src_data;                                  // audio_empty_s1_agent:rdata_fifo_src_data -> audio_empty_s1_agent_rdata_fifo:in_data
	wire          audio_empty_s1_agent_rdata_fifo_src_ready;                                 // audio_empty_s1_agent_rdata_fifo:in_ready -> audio_empty_s1_agent:rdata_fifo_src_ready
	wire          audio_empty_s1_agent_rdata_fifo_out_valid;                                 // audio_empty_s1_agent_rdata_fifo:out_valid -> audio_empty_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_empty_s1_agent_rdata_fifo_out_data;                                  // audio_empty_s1_agent_rdata_fifo:out_data -> audio_empty_s1_agent:rdata_fifo_sink_data
	wire          audio_empty_s1_agent_rdata_fifo_out_ready;                                 // audio_empty_s1_agent:rdata_fifo_sink_ready -> audio_empty_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> audio_empty_s1_agent:cp_valid
	wire  [116:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> audio_empty_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                     // audio_empty_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [24:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> audio_empty_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> audio_empty_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> audio_empty_s1_agent:cp_endofpacket
	wire   [31:0] audio_fifo_full_s1_agent_m0_readdata;                                      // audio_fifo_full_s1_translator:uav_readdata -> audio_fifo_full_s1_agent:m0_readdata
	wire          audio_fifo_full_s1_agent_m0_waitrequest;                                   // audio_fifo_full_s1_translator:uav_waitrequest -> audio_fifo_full_s1_agent:m0_waitrequest
	wire          audio_fifo_full_s1_agent_m0_debugaccess;                                   // audio_fifo_full_s1_agent:m0_debugaccess -> audio_fifo_full_s1_translator:uav_debugaccess
	wire   [31:0] audio_fifo_full_s1_agent_m0_address;                                       // audio_fifo_full_s1_agent:m0_address -> audio_fifo_full_s1_translator:uav_address
	wire    [3:0] audio_fifo_full_s1_agent_m0_byteenable;                                    // audio_fifo_full_s1_agent:m0_byteenable -> audio_fifo_full_s1_translator:uav_byteenable
	wire          audio_fifo_full_s1_agent_m0_read;                                          // audio_fifo_full_s1_agent:m0_read -> audio_fifo_full_s1_translator:uav_read
	wire          audio_fifo_full_s1_agent_m0_readdatavalid;                                 // audio_fifo_full_s1_translator:uav_readdatavalid -> audio_fifo_full_s1_agent:m0_readdatavalid
	wire          audio_fifo_full_s1_agent_m0_lock;                                          // audio_fifo_full_s1_agent:m0_lock -> audio_fifo_full_s1_translator:uav_lock
	wire   [31:0] audio_fifo_full_s1_agent_m0_writedata;                                     // audio_fifo_full_s1_agent:m0_writedata -> audio_fifo_full_s1_translator:uav_writedata
	wire          audio_fifo_full_s1_agent_m0_write;                                         // audio_fifo_full_s1_agent:m0_write -> audio_fifo_full_s1_translator:uav_write
	wire    [2:0] audio_fifo_full_s1_agent_m0_burstcount;                                    // audio_fifo_full_s1_agent:m0_burstcount -> audio_fifo_full_s1_translator:uav_burstcount
	wire          audio_fifo_full_s1_agent_rf_source_valid;                                  // audio_fifo_full_s1_agent:rf_source_valid -> audio_fifo_full_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_fifo_full_s1_agent_rf_source_data;                                   // audio_fifo_full_s1_agent:rf_source_data -> audio_fifo_full_s1_agent_rsp_fifo:in_data
	wire          audio_fifo_full_s1_agent_rf_source_ready;                                  // audio_fifo_full_s1_agent_rsp_fifo:in_ready -> audio_fifo_full_s1_agent:rf_source_ready
	wire          audio_fifo_full_s1_agent_rf_source_startofpacket;                          // audio_fifo_full_s1_agent:rf_source_startofpacket -> audio_fifo_full_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_fifo_full_s1_agent_rf_source_endofpacket;                            // audio_fifo_full_s1_agent:rf_source_endofpacket -> audio_fifo_full_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_fifo_full_s1_agent_rsp_fifo_out_valid;                               // audio_fifo_full_s1_agent_rsp_fifo:out_valid -> audio_fifo_full_s1_agent:rf_sink_valid
	wire  [117:0] audio_fifo_full_s1_agent_rsp_fifo_out_data;                                // audio_fifo_full_s1_agent_rsp_fifo:out_data -> audio_fifo_full_s1_agent:rf_sink_data
	wire          audio_fifo_full_s1_agent_rsp_fifo_out_ready;                               // audio_fifo_full_s1_agent:rf_sink_ready -> audio_fifo_full_s1_agent_rsp_fifo:out_ready
	wire          audio_fifo_full_s1_agent_rsp_fifo_out_startofpacket;                       // audio_fifo_full_s1_agent_rsp_fifo:out_startofpacket -> audio_fifo_full_s1_agent:rf_sink_startofpacket
	wire          audio_fifo_full_s1_agent_rsp_fifo_out_endofpacket;                         // audio_fifo_full_s1_agent_rsp_fifo:out_endofpacket -> audio_fifo_full_s1_agent:rf_sink_endofpacket
	wire          audio_fifo_full_s1_agent_rdata_fifo_src_valid;                             // audio_fifo_full_s1_agent:rdata_fifo_src_valid -> audio_fifo_full_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_fifo_full_s1_agent_rdata_fifo_src_data;                              // audio_fifo_full_s1_agent:rdata_fifo_src_data -> audio_fifo_full_s1_agent_rdata_fifo:in_data
	wire          audio_fifo_full_s1_agent_rdata_fifo_src_ready;                             // audio_fifo_full_s1_agent_rdata_fifo:in_ready -> audio_fifo_full_s1_agent:rdata_fifo_src_ready
	wire          audio_fifo_full_s1_agent_rdata_fifo_out_valid;                             // audio_fifo_full_s1_agent_rdata_fifo:out_valid -> audio_fifo_full_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_fifo_full_s1_agent_rdata_fifo_out_data;                              // audio_fifo_full_s1_agent_rdata_fifo:out_data -> audio_fifo_full_s1_agent:rdata_fifo_sink_data
	wire          audio_fifo_full_s1_agent_rdata_fifo_out_ready;                             // audio_fifo_full_s1_agent:rdata_fifo_sink_ready -> audio_fifo_full_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> audio_fifo_full_s1_agent:cp_valid
	wire  [116:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> audio_fifo_full_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                     // audio_fifo_full_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [24:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> audio_fifo_full_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> audio_fifo_full_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> audio_fifo_full_s1_agent:cp_endofpacket
	wire   [31:0] audio_fifo_used_s1_agent_m0_readdata;                                      // audio_fifo_used_s1_translator:uav_readdata -> audio_fifo_used_s1_agent:m0_readdata
	wire          audio_fifo_used_s1_agent_m0_waitrequest;                                   // audio_fifo_used_s1_translator:uav_waitrequest -> audio_fifo_used_s1_agent:m0_waitrequest
	wire          audio_fifo_used_s1_agent_m0_debugaccess;                                   // audio_fifo_used_s1_agent:m0_debugaccess -> audio_fifo_used_s1_translator:uav_debugaccess
	wire   [31:0] audio_fifo_used_s1_agent_m0_address;                                       // audio_fifo_used_s1_agent:m0_address -> audio_fifo_used_s1_translator:uav_address
	wire    [3:0] audio_fifo_used_s1_agent_m0_byteenable;                                    // audio_fifo_used_s1_agent:m0_byteenable -> audio_fifo_used_s1_translator:uav_byteenable
	wire          audio_fifo_used_s1_agent_m0_read;                                          // audio_fifo_used_s1_agent:m0_read -> audio_fifo_used_s1_translator:uav_read
	wire          audio_fifo_used_s1_agent_m0_readdatavalid;                                 // audio_fifo_used_s1_translator:uav_readdatavalid -> audio_fifo_used_s1_agent:m0_readdatavalid
	wire          audio_fifo_used_s1_agent_m0_lock;                                          // audio_fifo_used_s1_agent:m0_lock -> audio_fifo_used_s1_translator:uav_lock
	wire   [31:0] audio_fifo_used_s1_agent_m0_writedata;                                     // audio_fifo_used_s1_agent:m0_writedata -> audio_fifo_used_s1_translator:uav_writedata
	wire          audio_fifo_used_s1_agent_m0_write;                                         // audio_fifo_used_s1_agent:m0_write -> audio_fifo_used_s1_translator:uav_write
	wire    [2:0] audio_fifo_used_s1_agent_m0_burstcount;                                    // audio_fifo_used_s1_agent:m0_burstcount -> audio_fifo_used_s1_translator:uav_burstcount
	wire          audio_fifo_used_s1_agent_rf_source_valid;                                  // audio_fifo_used_s1_agent:rf_source_valid -> audio_fifo_used_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_fifo_used_s1_agent_rf_source_data;                                   // audio_fifo_used_s1_agent:rf_source_data -> audio_fifo_used_s1_agent_rsp_fifo:in_data
	wire          audio_fifo_used_s1_agent_rf_source_ready;                                  // audio_fifo_used_s1_agent_rsp_fifo:in_ready -> audio_fifo_used_s1_agent:rf_source_ready
	wire          audio_fifo_used_s1_agent_rf_source_startofpacket;                          // audio_fifo_used_s1_agent:rf_source_startofpacket -> audio_fifo_used_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_fifo_used_s1_agent_rf_source_endofpacket;                            // audio_fifo_used_s1_agent:rf_source_endofpacket -> audio_fifo_used_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_fifo_used_s1_agent_rsp_fifo_out_valid;                               // audio_fifo_used_s1_agent_rsp_fifo:out_valid -> audio_fifo_used_s1_agent:rf_sink_valid
	wire  [117:0] audio_fifo_used_s1_agent_rsp_fifo_out_data;                                // audio_fifo_used_s1_agent_rsp_fifo:out_data -> audio_fifo_used_s1_agent:rf_sink_data
	wire          audio_fifo_used_s1_agent_rsp_fifo_out_ready;                               // audio_fifo_used_s1_agent:rf_sink_ready -> audio_fifo_used_s1_agent_rsp_fifo:out_ready
	wire          audio_fifo_used_s1_agent_rsp_fifo_out_startofpacket;                       // audio_fifo_used_s1_agent_rsp_fifo:out_startofpacket -> audio_fifo_used_s1_agent:rf_sink_startofpacket
	wire          audio_fifo_used_s1_agent_rsp_fifo_out_endofpacket;                         // audio_fifo_used_s1_agent_rsp_fifo:out_endofpacket -> audio_fifo_used_s1_agent:rf_sink_endofpacket
	wire          audio_fifo_used_s1_agent_rdata_fifo_src_valid;                             // audio_fifo_used_s1_agent:rdata_fifo_src_valid -> audio_fifo_used_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_fifo_used_s1_agent_rdata_fifo_src_data;                              // audio_fifo_used_s1_agent:rdata_fifo_src_data -> audio_fifo_used_s1_agent_rdata_fifo:in_data
	wire          audio_fifo_used_s1_agent_rdata_fifo_src_ready;                             // audio_fifo_used_s1_agent_rdata_fifo:in_ready -> audio_fifo_used_s1_agent:rdata_fifo_src_ready
	wire          audio_fifo_used_s1_agent_rdata_fifo_out_valid;                             // audio_fifo_used_s1_agent_rdata_fifo:out_valid -> audio_fifo_used_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_fifo_used_s1_agent_rdata_fifo_out_data;                              // audio_fifo_used_s1_agent_rdata_fifo:out_data -> audio_fifo_used_s1_agent:rdata_fifo_sink_data
	wire          audio_fifo_used_s1_agent_rdata_fifo_out_ready;                             // audio_fifo_used_s1_agent:rdata_fifo_sink_ready -> audio_fifo_used_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> audio_fifo_used_s1_agent:cp_valid
	wire  [116:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> audio_fifo_used_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                     // audio_fifo_used_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [24:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> audio_fifo_used_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> audio_fifo_used_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> audio_fifo_used_s1_agent:cp_endofpacket
	wire   [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire          cpu_jtag_debug_module_agent_m0_waitrequest;                                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire          cpu_jtag_debug_module_agent_m0_debugaccess;                                // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] cpu_jtag_debug_module_agent_m0_address;                                    // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire    [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_agent_m0_read;                                       // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire          cpu_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_lock;                                       // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire   [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire          cpu_jtag_debug_module_agent_m0_write;                                      // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire    [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire          cpu_jtag_debug_module_agent_rf_source_valid;                               // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_jtag_debug_module_agent_rf_source_data;                                // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rf_source_ready;                               // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire          cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire  [117:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_agent_rdata_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_jtag_debug_module_agent_rdata_fifo:in_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cpu_jtag_debug_module_agent_rdata_fifo_out_valid;                          // cpu_jtag_debug_module_agent_rdata_fifo:out_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_out_data;                           // cpu_jtag_debug_module_agent_rdata_fifo:out_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_out_ready;                          // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> cpu_jtag_debug_module_agent_rdata_fifo:out_ready
	wire          cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire  [116:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> cpu_jtag_debug_module_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                     // cpu_jtag_debug_module_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [24:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire   [31:0] audio_out_data_audio_s1_agent_m0_readdata;                                 // audio_out_data_audio_s1_translator:uav_readdata -> audio_out_data_audio_s1_agent:m0_readdata
	wire          audio_out_data_audio_s1_agent_m0_waitrequest;                              // audio_out_data_audio_s1_translator:uav_waitrequest -> audio_out_data_audio_s1_agent:m0_waitrequest
	wire          audio_out_data_audio_s1_agent_m0_debugaccess;                              // audio_out_data_audio_s1_agent:m0_debugaccess -> audio_out_data_audio_s1_translator:uav_debugaccess
	wire   [31:0] audio_out_data_audio_s1_agent_m0_address;                                  // audio_out_data_audio_s1_agent:m0_address -> audio_out_data_audio_s1_translator:uav_address
	wire    [3:0] audio_out_data_audio_s1_agent_m0_byteenable;                               // audio_out_data_audio_s1_agent:m0_byteenable -> audio_out_data_audio_s1_translator:uav_byteenable
	wire          audio_out_data_audio_s1_agent_m0_read;                                     // audio_out_data_audio_s1_agent:m0_read -> audio_out_data_audio_s1_translator:uav_read
	wire          audio_out_data_audio_s1_agent_m0_readdatavalid;                            // audio_out_data_audio_s1_translator:uav_readdatavalid -> audio_out_data_audio_s1_agent:m0_readdatavalid
	wire          audio_out_data_audio_s1_agent_m0_lock;                                     // audio_out_data_audio_s1_agent:m0_lock -> audio_out_data_audio_s1_translator:uav_lock
	wire   [31:0] audio_out_data_audio_s1_agent_m0_writedata;                                // audio_out_data_audio_s1_agent:m0_writedata -> audio_out_data_audio_s1_translator:uav_writedata
	wire          audio_out_data_audio_s1_agent_m0_write;                                    // audio_out_data_audio_s1_agent:m0_write -> audio_out_data_audio_s1_translator:uav_write
	wire    [2:0] audio_out_data_audio_s1_agent_m0_burstcount;                               // audio_out_data_audio_s1_agent:m0_burstcount -> audio_out_data_audio_s1_translator:uav_burstcount
	wire          audio_out_data_audio_s1_agent_rf_source_valid;                             // audio_out_data_audio_s1_agent:rf_source_valid -> audio_out_data_audio_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_out_data_audio_s1_agent_rf_source_data;                              // audio_out_data_audio_s1_agent:rf_source_data -> audio_out_data_audio_s1_agent_rsp_fifo:in_data
	wire          audio_out_data_audio_s1_agent_rf_source_ready;                             // audio_out_data_audio_s1_agent_rsp_fifo:in_ready -> audio_out_data_audio_s1_agent:rf_source_ready
	wire          audio_out_data_audio_s1_agent_rf_source_startofpacket;                     // audio_out_data_audio_s1_agent:rf_source_startofpacket -> audio_out_data_audio_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_out_data_audio_s1_agent_rf_source_endofpacket;                       // audio_out_data_audio_s1_agent:rf_source_endofpacket -> audio_out_data_audio_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_out_data_audio_s1_agent_rsp_fifo_out_valid;                          // audio_out_data_audio_s1_agent_rsp_fifo:out_valid -> audio_out_data_audio_s1_agent:rf_sink_valid
	wire  [117:0] audio_out_data_audio_s1_agent_rsp_fifo_out_data;                           // audio_out_data_audio_s1_agent_rsp_fifo:out_data -> audio_out_data_audio_s1_agent:rf_sink_data
	wire          audio_out_data_audio_s1_agent_rsp_fifo_out_ready;                          // audio_out_data_audio_s1_agent:rf_sink_ready -> audio_out_data_audio_s1_agent_rsp_fifo:out_ready
	wire          audio_out_data_audio_s1_agent_rsp_fifo_out_startofpacket;                  // audio_out_data_audio_s1_agent_rsp_fifo:out_startofpacket -> audio_out_data_audio_s1_agent:rf_sink_startofpacket
	wire          audio_out_data_audio_s1_agent_rsp_fifo_out_endofpacket;                    // audio_out_data_audio_s1_agent_rsp_fifo:out_endofpacket -> audio_out_data_audio_s1_agent:rf_sink_endofpacket
	wire          audio_out_data_audio_s1_agent_rdata_fifo_src_valid;                        // audio_out_data_audio_s1_agent:rdata_fifo_src_valid -> audio_out_data_audio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_out_data_audio_s1_agent_rdata_fifo_src_data;                         // audio_out_data_audio_s1_agent:rdata_fifo_src_data -> audio_out_data_audio_s1_agent_rdata_fifo:in_data
	wire          audio_out_data_audio_s1_agent_rdata_fifo_src_ready;                        // audio_out_data_audio_s1_agent_rdata_fifo:in_ready -> audio_out_data_audio_s1_agent:rdata_fifo_src_ready
	wire          audio_out_data_audio_s1_agent_rdata_fifo_out_valid;                        // audio_out_data_audio_s1_agent_rdata_fifo:out_valid -> audio_out_data_audio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_out_data_audio_s1_agent_rdata_fifo_out_data;                         // audio_out_data_audio_s1_agent_rdata_fifo:out_data -> audio_out_data_audio_s1_agent:rdata_fifo_sink_data
	wire          audio_out_data_audio_s1_agent_rdata_fifo_out_ready;                        // audio_out_data_audio_s1_agent:rdata_fifo_sink_ready -> audio_out_data_audio_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> audio_out_data_audio_s1_agent:cp_valid
	wire  [116:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> audio_out_data_audio_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                     // audio_out_data_audio_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [24:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> audio_out_data_audio_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> audio_out_data_audio_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> audio_out_data_audio_s1_agent:cp_endofpacket
	wire   [31:0] audio_out_pause_s1_agent_m0_readdata;                                      // audio_out_pause_s1_translator:uav_readdata -> audio_out_pause_s1_agent:m0_readdata
	wire          audio_out_pause_s1_agent_m0_waitrequest;                                   // audio_out_pause_s1_translator:uav_waitrequest -> audio_out_pause_s1_agent:m0_waitrequest
	wire          audio_out_pause_s1_agent_m0_debugaccess;                                   // audio_out_pause_s1_agent:m0_debugaccess -> audio_out_pause_s1_translator:uav_debugaccess
	wire   [31:0] audio_out_pause_s1_agent_m0_address;                                       // audio_out_pause_s1_agent:m0_address -> audio_out_pause_s1_translator:uav_address
	wire    [3:0] audio_out_pause_s1_agent_m0_byteenable;                                    // audio_out_pause_s1_agent:m0_byteenable -> audio_out_pause_s1_translator:uav_byteenable
	wire          audio_out_pause_s1_agent_m0_read;                                          // audio_out_pause_s1_agent:m0_read -> audio_out_pause_s1_translator:uav_read
	wire          audio_out_pause_s1_agent_m0_readdatavalid;                                 // audio_out_pause_s1_translator:uav_readdatavalid -> audio_out_pause_s1_agent:m0_readdatavalid
	wire          audio_out_pause_s1_agent_m0_lock;                                          // audio_out_pause_s1_agent:m0_lock -> audio_out_pause_s1_translator:uav_lock
	wire   [31:0] audio_out_pause_s1_agent_m0_writedata;                                     // audio_out_pause_s1_agent:m0_writedata -> audio_out_pause_s1_translator:uav_writedata
	wire          audio_out_pause_s1_agent_m0_write;                                         // audio_out_pause_s1_agent:m0_write -> audio_out_pause_s1_translator:uav_write
	wire    [2:0] audio_out_pause_s1_agent_m0_burstcount;                                    // audio_out_pause_s1_agent:m0_burstcount -> audio_out_pause_s1_translator:uav_burstcount
	wire          audio_out_pause_s1_agent_rf_source_valid;                                  // audio_out_pause_s1_agent:rf_source_valid -> audio_out_pause_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_out_pause_s1_agent_rf_source_data;                                   // audio_out_pause_s1_agent:rf_source_data -> audio_out_pause_s1_agent_rsp_fifo:in_data
	wire          audio_out_pause_s1_agent_rf_source_ready;                                  // audio_out_pause_s1_agent_rsp_fifo:in_ready -> audio_out_pause_s1_agent:rf_source_ready
	wire          audio_out_pause_s1_agent_rf_source_startofpacket;                          // audio_out_pause_s1_agent:rf_source_startofpacket -> audio_out_pause_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_out_pause_s1_agent_rf_source_endofpacket;                            // audio_out_pause_s1_agent:rf_source_endofpacket -> audio_out_pause_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_out_pause_s1_agent_rsp_fifo_out_valid;                               // audio_out_pause_s1_agent_rsp_fifo:out_valid -> audio_out_pause_s1_agent:rf_sink_valid
	wire  [117:0] audio_out_pause_s1_agent_rsp_fifo_out_data;                                // audio_out_pause_s1_agent_rsp_fifo:out_data -> audio_out_pause_s1_agent:rf_sink_data
	wire          audio_out_pause_s1_agent_rsp_fifo_out_ready;                               // audio_out_pause_s1_agent:rf_sink_ready -> audio_out_pause_s1_agent_rsp_fifo:out_ready
	wire          audio_out_pause_s1_agent_rsp_fifo_out_startofpacket;                       // audio_out_pause_s1_agent_rsp_fifo:out_startofpacket -> audio_out_pause_s1_agent:rf_sink_startofpacket
	wire          audio_out_pause_s1_agent_rsp_fifo_out_endofpacket;                         // audio_out_pause_s1_agent_rsp_fifo:out_endofpacket -> audio_out_pause_s1_agent:rf_sink_endofpacket
	wire          audio_out_pause_s1_agent_rdata_fifo_src_valid;                             // audio_out_pause_s1_agent:rdata_fifo_src_valid -> audio_out_pause_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_out_pause_s1_agent_rdata_fifo_src_data;                              // audio_out_pause_s1_agent:rdata_fifo_src_data -> audio_out_pause_s1_agent_rdata_fifo:in_data
	wire          audio_out_pause_s1_agent_rdata_fifo_src_ready;                             // audio_out_pause_s1_agent_rdata_fifo:in_ready -> audio_out_pause_s1_agent:rdata_fifo_src_ready
	wire          audio_out_pause_s1_agent_rdata_fifo_out_valid;                             // audio_out_pause_s1_agent_rdata_fifo:out_valid -> audio_out_pause_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_out_pause_s1_agent_rdata_fifo_out_data;                              // audio_out_pause_s1_agent_rdata_fifo:out_data -> audio_out_pause_s1_agent:rdata_fifo_sink_data
	wire          audio_out_pause_s1_agent_rdata_fifo_out_ready;                             // audio_out_pause_s1_agent:rdata_fifo_sink_ready -> audio_out_pause_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> audio_out_pause_s1_agent:cp_valid
	wire  [116:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> audio_out_pause_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                     // audio_out_pause_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [24:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> audio_out_pause_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> audio_out_pause_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> audio_out_pause_s1_agent:cp_endofpacket
	wire   [31:0] audio_out_stop_s1_agent_m0_readdata;                                       // audio_out_stop_s1_translator:uav_readdata -> audio_out_stop_s1_agent:m0_readdata
	wire          audio_out_stop_s1_agent_m0_waitrequest;                                    // audio_out_stop_s1_translator:uav_waitrequest -> audio_out_stop_s1_agent:m0_waitrequest
	wire          audio_out_stop_s1_agent_m0_debugaccess;                                    // audio_out_stop_s1_agent:m0_debugaccess -> audio_out_stop_s1_translator:uav_debugaccess
	wire   [31:0] audio_out_stop_s1_agent_m0_address;                                        // audio_out_stop_s1_agent:m0_address -> audio_out_stop_s1_translator:uav_address
	wire    [3:0] audio_out_stop_s1_agent_m0_byteenable;                                     // audio_out_stop_s1_agent:m0_byteenable -> audio_out_stop_s1_translator:uav_byteenable
	wire          audio_out_stop_s1_agent_m0_read;                                           // audio_out_stop_s1_agent:m0_read -> audio_out_stop_s1_translator:uav_read
	wire          audio_out_stop_s1_agent_m0_readdatavalid;                                  // audio_out_stop_s1_translator:uav_readdatavalid -> audio_out_stop_s1_agent:m0_readdatavalid
	wire          audio_out_stop_s1_agent_m0_lock;                                           // audio_out_stop_s1_agent:m0_lock -> audio_out_stop_s1_translator:uav_lock
	wire   [31:0] audio_out_stop_s1_agent_m0_writedata;                                      // audio_out_stop_s1_agent:m0_writedata -> audio_out_stop_s1_translator:uav_writedata
	wire          audio_out_stop_s1_agent_m0_write;                                          // audio_out_stop_s1_agent:m0_write -> audio_out_stop_s1_translator:uav_write
	wire    [2:0] audio_out_stop_s1_agent_m0_burstcount;                                     // audio_out_stop_s1_agent:m0_burstcount -> audio_out_stop_s1_translator:uav_burstcount
	wire          audio_out_stop_s1_agent_rf_source_valid;                                   // audio_out_stop_s1_agent:rf_source_valid -> audio_out_stop_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_out_stop_s1_agent_rf_source_data;                                    // audio_out_stop_s1_agent:rf_source_data -> audio_out_stop_s1_agent_rsp_fifo:in_data
	wire          audio_out_stop_s1_agent_rf_source_ready;                                   // audio_out_stop_s1_agent_rsp_fifo:in_ready -> audio_out_stop_s1_agent:rf_source_ready
	wire          audio_out_stop_s1_agent_rf_source_startofpacket;                           // audio_out_stop_s1_agent:rf_source_startofpacket -> audio_out_stop_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_out_stop_s1_agent_rf_source_endofpacket;                             // audio_out_stop_s1_agent:rf_source_endofpacket -> audio_out_stop_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_out_stop_s1_agent_rsp_fifo_out_valid;                                // audio_out_stop_s1_agent_rsp_fifo:out_valid -> audio_out_stop_s1_agent:rf_sink_valid
	wire  [117:0] audio_out_stop_s1_agent_rsp_fifo_out_data;                                 // audio_out_stop_s1_agent_rsp_fifo:out_data -> audio_out_stop_s1_agent:rf_sink_data
	wire          audio_out_stop_s1_agent_rsp_fifo_out_ready;                                // audio_out_stop_s1_agent:rf_sink_ready -> audio_out_stop_s1_agent_rsp_fifo:out_ready
	wire          audio_out_stop_s1_agent_rsp_fifo_out_startofpacket;                        // audio_out_stop_s1_agent_rsp_fifo:out_startofpacket -> audio_out_stop_s1_agent:rf_sink_startofpacket
	wire          audio_out_stop_s1_agent_rsp_fifo_out_endofpacket;                          // audio_out_stop_s1_agent_rsp_fifo:out_endofpacket -> audio_out_stop_s1_agent:rf_sink_endofpacket
	wire          audio_out_stop_s1_agent_rdata_fifo_src_valid;                              // audio_out_stop_s1_agent:rdata_fifo_src_valid -> audio_out_stop_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_out_stop_s1_agent_rdata_fifo_src_data;                               // audio_out_stop_s1_agent:rdata_fifo_src_data -> audio_out_stop_s1_agent_rdata_fifo:in_data
	wire          audio_out_stop_s1_agent_rdata_fifo_src_ready;                              // audio_out_stop_s1_agent_rdata_fifo:in_ready -> audio_out_stop_s1_agent:rdata_fifo_src_ready
	wire          audio_out_stop_s1_agent_rdata_fifo_out_valid;                              // audio_out_stop_s1_agent_rdata_fifo:out_valid -> audio_out_stop_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_out_stop_s1_agent_rdata_fifo_out_data;                               // audio_out_stop_s1_agent_rdata_fifo:out_data -> audio_out_stop_s1_agent:rdata_fifo_sink_data
	wire          audio_out_stop_s1_agent_rdata_fifo_out_ready;                              // audio_out_stop_s1_agent:rdata_fifo_sink_ready -> audio_out_stop_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> audio_out_stop_s1_agent:cp_valid
	wire  [116:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> audio_out_stop_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                     // audio_out_stop_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [24:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> audio_out_stop_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> audio_out_stop_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> audio_out_stop_s1_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                             // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                             // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                 // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                              // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                    // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                           // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                    // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                               // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                   // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                              // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                            // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [99:0] sdram_s1_agent_rf_source_data;                                             // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                            // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                    // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                      // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                         // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [99:0] sdram_s1_agent_rsp_fifo_out_data;                                          // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                         // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                 // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                   // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                       // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                        // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                       // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                       // sdram_s1_agent_rdata_fifo:out_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                        // sdram_s1_agent_rdata_fifo:out_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                       // sdram_s1_agent:rdata_fifo_sink_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire   [31:0] timer_s1_agent_m0_readdata;                                                // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                             // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                             // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [31:0] timer_s1_agent_m0_address;                                                 // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                              // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                    // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                           // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                    // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                               // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                   // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                              // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                            // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [117:0] timer_s1_agent_rf_source_data;                                             // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                            // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                    // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                      // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                         // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [117:0] timer_s1_agent_rsp_fifo_out_data;                                          // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                         // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                 // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                   // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          timer_s1_agent_rdata_fifo_src_valid;                                       // timer_s1_agent:rdata_fifo_src_valid -> timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                        // timer_s1_agent:rdata_fifo_src_data -> timer_s1_agent_rdata_fifo:in_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                       // timer_s1_agent_rdata_fifo:in_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire          timer_s1_agent_rdata_fifo_out_valid;                                       // timer_s1_agent_rdata_fifo:out_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_out_data;                                        // timer_s1_agent_rdata_fifo:out_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          timer_s1_agent_rdata_fifo_out_ready;                                       // timer_s1_agent:rdata_fifo_sink_ready -> timer_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> timer_s1_agent:cp_valid
	wire  [116:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> timer_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                     // timer_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [24:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> timer_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire   [31:0] key_s1_agent_m0_readdata;                                                  // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                               // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                               // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [31:0] key_s1_agent_m0_address;                                                   // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                      // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                             // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                      // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                 // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                     // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                              // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [117:0] key_s1_agent_rf_source_data;                                               // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                              // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                      // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                        // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                           // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [117:0] key_s1_agent_rsp_fifo_out_data;                                            // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                           // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                   // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                     // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire          key_s1_agent_rdata_fifo_src_valid;                                         // key_s1_agent:rdata_fifo_src_valid -> key_s1_agent_rdata_fifo:in_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                          // key_s1_agent:rdata_fifo_src_data -> key_s1_agent_rdata_fifo:in_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                         // key_s1_agent_rdata_fifo:in_ready -> key_s1_agent:rdata_fifo_src_ready
	wire          key_s1_agent_rdata_fifo_out_valid;                                         // key_s1_agent_rdata_fifo:out_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] key_s1_agent_rdata_fifo_out_data;                                          // key_s1_agent_rdata_fifo:out_data -> key_s1_agent:rdata_fifo_sink_data
	wire          key_s1_agent_rdata_fifo_out_ready;                                         // key_s1_agent:rdata_fifo_sink_ready -> key_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> key_s1_agent:cp_valid
	wire  [116:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> key_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                     // key_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [24:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> key_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> key_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> key_s1_agent:cp_endofpacket
	wire   [31:0] signal_selector_s1_agent_m0_readdata;                                      // signal_selector_s1_translator:uav_readdata -> signal_selector_s1_agent:m0_readdata
	wire          signal_selector_s1_agent_m0_waitrequest;                                   // signal_selector_s1_translator:uav_waitrequest -> signal_selector_s1_agent:m0_waitrequest
	wire          signal_selector_s1_agent_m0_debugaccess;                                   // signal_selector_s1_agent:m0_debugaccess -> signal_selector_s1_translator:uav_debugaccess
	wire   [31:0] signal_selector_s1_agent_m0_address;                                       // signal_selector_s1_agent:m0_address -> signal_selector_s1_translator:uav_address
	wire    [3:0] signal_selector_s1_agent_m0_byteenable;                                    // signal_selector_s1_agent:m0_byteenable -> signal_selector_s1_translator:uav_byteenable
	wire          signal_selector_s1_agent_m0_read;                                          // signal_selector_s1_agent:m0_read -> signal_selector_s1_translator:uav_read
	wire          signal_selector_s1_agent_m0_readdatavalid;                                 // signal_selector_s1_translator:uav_readdatavalid -> signal_selector_s1_agent:m0_readdatavalid
	wire          signal_selector_s1_agent_m0_lock;                                          // signal_selector_s1_agent:m0_lock -> signal_selector_s1_translator:uav_lock
	wire   [31:0] signal_selector_s1_agent_m0_writedata;                                     // signal_selector_s1_agent:m0_writedata -> signal_selector_s1_translator:uav_writedata
	wire          signal_selector_s1_agent_m0_write;                                         // signal_selector_s1_agent:m0_write -> signal_selector_s1_translator:uav_write
	wire    [2:0] signal_selector_s1_agent_m0_burstcount;                                    // signal_selector_s1_agent:m0_burstcount -> signal_selector_s1_translator:uav_burstcount
	wire          signal_selector_s1_agent_rf_source_valid;                                  // signal_selector_s1_agent:rf_source_valid -> signal_selector_s1_agent_rsp_fifo:in_valid
	wire  [117:0] signal_selector_s1_agent_rf_source_data;                                   // signal_selector_s1_agent:rf_source_data -> signal_selector_s1_agent_rsp_fifo:in_data
	wire          signal_selector_s1_agent_rf_source_ready;                                  // signal_selector_s1_agent_rsp_fifo:in_ready -> signal_selector_s1_agent:rf_source_ready
	wire          signal_selector_s1_agent_rf_source_startofpacket;                          // signal_selector_s1_agent:rf_source_startofpacket -> signal_selector_s1_agent_rsp_fifo:in_startofpacket
	wire          signal_selector_s1_agent_rf_source_endofpacket;                            // signal_selector_s1_agent:rf_source_endofpacket -> signal_selector_s1_agent_rsp_fifo:in_endofpacket
	wire          signal_selector_s1_agent_rsp_fifo_out_valid;                               // signal_selector_s1_agent_rsp_fifo:out_valid -> signal_selector_s1_agent:rf_sink_valid
	wire  [117:0] signal_selector_s1_agent_rsp_fifo_out_data;                                // signal_selector_s1_agent_rsp_fifo:out_data -> signal_selector_s1_agent:rf_sink_data
	wire          signal_selector_s1_agent_rsp_fifo_out_ready;                               // signal_selector_s1_agent:rf_sink_ready -> signal_selector_s1_agent_rsp_fifo:out_ready
	wire          signal_selector_s1_agent_rsp_fifo_out_startofpacket;                       // signal_selector_s1_agent_rsp_fifo:out_startofpacket -> signal_selector_s1_agent:rf_sink_startofpacket
	wire          signal_selector_s1_agent_rsp_fifo_out_endofpacket;                         // signal_selector_s1_agent_rsp_fifo:out_endofpacket -> signal_selector_s1_agent:rf_sink_endofpacket
	wire          signal_selector_s1_agent_rdata_fifo_src_valid;                             // signal_selector_s1_agent:rdata_fifo_src_valid -> signal_selector_s1_agent_rdata_fifo:in_valid
	wire   [33:0] signal_selector_s1_agent_rdata_fifo_src_data;                              // signal_selector_s1_agent:rdata_fifo_src_data -> signal_selector_s1_agent_rdata_fifo:in_data
	wire          signal_selector_s1_agent_rdata_fifo_src_ready;                             // signal_selector_s1_agent_rdata_fifo:in_ready -> signal_selector_s1_agent:rdata_fifo_src_ready
	wire          signal_selector_s1_agent_rdata_fifo_out_valid;                             // signal_selector_s1_agent_rdata_fifo:out_valid -> signal_selector_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] signal_selector_s1_agent_rdata_fifo_out_data;                              // signal_selector_s1_agent_rdata_fifo:out_data -> signal_selector_s1_agent:rdata_fifo_sink_data
	wire          signal_selector_s1_agent_rdata_fifo_out_ready;                             // signal_selector_s1_agent:rdata_fifo_sink_ready -> signal_selector_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> signal_selector_s1_agent:cp_valid
	wire  [116:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> signal_selector_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                     // signal_selector_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [24:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> signal_selector_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> signal_selector_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> signal_selector_s1_agent:cp_endofpacket
	wire   [31:0] modulation_selector_s1_agent_m0_readdata;                                  // modulation_selector_s1_translator:uav_readdata -> modulation_selector_s1_agent:m0_readdata
	wire          modulation_selector_s1_agent_m0_waitrequest;                               // modulation_selector_s1_translator:uav_waitrequest -> modulation_selector_s1_agent:m0_waitrequest
	wire          modulation_selector_s1_agent_m0_debugaccess;                               // modulation_selector_s1_agent:m0_debugaccess -> modulation_selector_s1_translator:uav_debugaccess
	wire   [31:0] modulation_selector_s1_agent_m0_address;                                   // modulation_selector_s1_agent:m0_address -> modulation_selector_s1_translator:uav_address
	wire    [3:0] modulation_selector_s1_agent_m0_byteenable;                                // modulation_selector_s1_agent:m0_byteenable -> modulation_selector_s1_translator:uav_byteenable
	wire          modulation_selector_s1_agent_m0_read;                                      // modulation_selector_s1_agent:m0_read -> modulation_selector_s1_translator:uav_read
	wire          modulation_selector_s1_agent_m0_readdatavalid;                             // modulation_selector_s1_translator:uav_readdatavalid -> modulation_selector_s1_agent:m0_readdatavalid
	wire          modulation_selector_s1_agent_m0_lock;                                      // modulation_selector_s1_agent:m0_lock -> modulation_selector_s1_translator:uav_lock
	wire   [31:0] modulation_selector_s1_agent_m0_writedata;                                 // modulation_selector_s1_agent:m0_writedata -> modulation_selector_s1_translator:uav_writedata
	wire          modulation_selector_s1_agent_m0_write;                                     // modulation_selector_s1_agent:m0_write -> modulation_selector_s1_translator:uav_write
	wire    [2:0] modulation_selector_s1_agent_m0_burstcount;                                // modulation_selector_s1_agent:m0_burstcount -> modulation_selector_s1_translator:uav_burstcount
	wire          modulation_selector_s1_agent_rf_source_valid;                              // modulation_selector_s1_agent:rf_source_valid -> modulation_selector_s1_agent_rsp_fifo:in_valid
	wire  [117:0] modulation_selector_s1_agent_rf_source_data;                               // modulation_selector_s1_agent:rf_source_data -> modulation_selector_s1_agent_rsp_fifo:in_data
	wire          modulation_selector_s1_agent_rf_source_ready;                              // modulation_selector_s1_agent_rsp_fifo:in_ready -> modulation_selector_s1_agent:rf_source_ready
	wire          modulation_selector_s1_agent_rf_source_startofpacket;                      // modulation_selector_s1_agent:rf_source_startofpacket -> modulation_selector_s1_agent_rsp_fifo:in_startofpacket
	wire          modulation_selector_s1_agent_rf_source_endofpacket;                        // modulation_selector_s1_agent:rf_source_endofpacket -> modulation_selector_s1_agent_rsp_fifo:in_endofpacket
	wire          modulation_selector_s1_agent_rsp_fifo_out_valid;                           // modulation_selector_s1_agent_rsp_fifo:out_valid -> modulation_selector_s1_agent:rf_sink_valid
	wire  [117:0] modulation_selector_s1_agent_rsp_fifo_out_data;                            // modulation_selector_s1_agent_rsp_fifo:out_data -> modulation_selector_s1_agent:rf_sink_data
	wire          modulation_selector_s1_agent_rsp_fifo_out_ready;                           // modulation_selector_s1_agent:rf_sink_ready -> modulation_selector_s1_agent_rsp_fifo:out_ready
	wire          modulation_selector_s1_agent_rsp_fifo_out_startofpacket;                   // modulation_selector_s1_agent_rsp_fifo:out_startofpacket -> modulation_selector_s1_agent:rf_sink_startofpacket
	wire          modulation_selector_s1_agent_rsp_fifo_out_endofpacket;                     // modulation_selector_s1_agent_rsp_fifo:out_endofpacket -> modulation_selector_s1_agent:rf_sink_endofpacket
	wire          modulation_selector_s1_agent_rdata_fifo_src_valid;                         // modulation_selector_s1_agent:rdata_fifo_src_valid -> modulation_selector_s1_agent_rdata_fifo:in_valid
	wire   [33:0] modulation_selector_s1_agent_rdata_fifo_src_data;                          // modulation_selector_s1_agent:rdata_fifo_src_data -> modulation_selector_s1_agent_rdata_fifo:in_data
	wire          modulation_selector_s1_agent_rdata_fifo_src_ready;                         // modulation_selector_s1_agent_rdata_fifo:in_ready -> modulation_selector_s1_agent:rdata_fifo_src_ready
	wire          modulation_selector_s1_agent_rdata_fifo_out_valid;                         // modulation_selector_s1_agent_rdata_fifo:out_valid -> modulation_selector_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] modulation_selector_s1_agent_rdata_fifo_out_data;                          // modulation_selector_s1_agent_rdata_fifo:out_data -> modulation_selector_s1_agent:rdata_fifo_sink_data
	wire          modulation_selector_s1_agent_rdata_fifo_out_ready;                         // modulation_selector_s1_agent:rdata_fifo_sink_ready -> modulation_selector_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> modulation_selector_s1_agent:cp_valid
	wire  [116:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> modulation_selector_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                     // modulation_selector_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [24:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> modulation_selector_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> modulation_selector_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> modulation_selector_s1_agent:cp_endofpacket
	wire   [31:0] keyboard_keys_s1_agent_m0_readdata;                                        // keyboard_keys_s1_translator:uav_readdata -> keyboard_keys_s1_agent:m0_readdata
	wire          keyboard_keys_s1_agent_m0_waitrequest;                                     // keyboard_keys_s1_translator:uav_waitrequest -> keyboard_keys_s1_agent:m0_waitrequest
	wire          keyboard_keys_s1_agent_m0_debugaccess;                                     // keyboard_keys_s1_agent:m0_debugaccess -> keyboard_keys_s1_translator:uav_debugaccess
	wire   [31:0] keyboard_keys_s1_agent_m0_address;                                         // keyboard_keys_s1_agent:m0_address -> keyboard_keys_s1_translator:uav_address
	wire    [3:0] keyboard_keys_s1_agent_m0_byteenable;                                      // keyboard_keys_s1_agent:m0_byteenable -> keyboard_keys_s1_translator:uav_byteenable
	wire          keyboard_keys_s1_agent_m0_read;                                            // keyboard_keys_s1_agent:m0_read -> keyboard_keys_s1_translator:uav_read
	wire          keyboard_keys_s1_agent_m0_readdatavalid;                                   // keyboard_keys_s1_translator:uav_readdatavalid -> keyboard_keys_s1_agent:m0_readdatavalid
	wire          keyboard_keys_s1_agent_m0_lock;                                            // keyboard_keys_s1_agent:m0_lock -> keyboard_keys_s1_translator:uav_lock
	wire   [31:0] keyboard_keys_s1_agent_m0_writedata;                                       // keyboard_keys_s1_agent:m0_writedata -> keyboard_keys_s1_translator:uav_writedata
	wire          keyboard_keys_s1_agent_m0_write;                                           // keyboard_keys_s1_agent:m0_write -> keyboard_keys_s1_translator:uav_write
	wire    [2:0] keyboard_keys_s1_agent_m0_burstcount;                                      // keyboard_keys_s1_agent:m0_burstcount -> keyboard_keys_s1_translator:uav_burstcount
	wire          keyboard_keys_s1_agent_rf_source_valid;                                    // keyboard_keys_s1_agent:rf_source_valid -> keyboard_keys_s1_agent_rsp_fifo:in_valid
	wire  [117:0] keyboard_keys_s1_agent_rf_source_data;                                     // keyboard_keys_s1_agent:rf_source_data -> keyboard_keys_s1_agent_rsp_fifo:in_data
	wire          keyboard_keys_s1_agent_rf_source_ready;                                    // keyboard_keys_s1_agent_rsp_fifo:in_ready -> keyboard_keys_s1_agent:rf_source_ready
	wire          keyboard_keys_s1_agent_rf_source_startofpacket;                            // keyboard_keys_s1_agent:rf_source_startofpacket -> keyboard_keys_s1_agent_rsp_fifo:in_startofpacket
	wire          keyboard_keys_s1_agent_rf_source_endofpacket;                              // keyboard_keys_s1_agent:rf_source_endofpacket -> keyboard_keys_s1_agent_rsp_fifo:in_endofpacket
	wire          keyboard_keys_s1_agent_rsp_fifo_out_valid;                                 // keyboard_keys_s1_agent_rsp_fifo:out_valid -> keyboard_keys_s1_agent:rf_sink_valid
	wire  [117:0] keyboard_keys_s1_agent_rsp_fifo_out_data;                                  // keyboard_keys_s1_agent_rsp_fifo:out_data -> keyboard_keys_s1_agent:rf_sink_data
	wire          keyboard_keys_s1_agent_rsp_fifo_out_ready;                                 // keyboard_keys_s1_agent:rf_sink_ready -> keyboard_keys_s1_agent_rsp_fifo:out_ready
	wire          keyboard_keys_s1_agent_rsp_fifo_out_startofpacket;                         // keyboard_keys_s1_agent_rsp_fifo:out_startofpacket -> keyboard_keys_s1_agent:rf_sink_startofpacket
	wire          keyboard_keys_s1_agent_rsp_fifo_out_endofpacket;                           // keyboard_keys_s1_agent_rsp_fifo:out_endofpacket -> keyboard_keys_s1_agent:rf_sink_endofpacket
	wire          keyboard_keys_s1_agent_rdata_fifo_src_valid;                               // keyboard_keys_s1_agent:rdata_fifo_src_valid -> keyboard_keys_s1_agent_rdata_fifo:in_valid
	wire   [33:0] keyboard_keys_s1_agent_rdata_fifo_src_data;                                // keyboard_keys_s1_agent:rdata_fifo_src_data -> keyboard_keys_s1_agent_rdata_fifo:in_data
	wire          keyboard_keys_s1_agent_rdata_fifo_src_ready;                               // keyboard_keys_s1_agent_rdata_fifo:in_ready -> keyboard_keys_s1_agent:rdata_fifo_src_ready
	wire          keyboard_keys_s1_agent_rdata_fifo_out_valid;                               // keyboard_keys_s1_agent_rdata_fifo:out_valid -> keyboard_keys_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] keyboard_keys_s1_agent_rdata_fifo_out_data;                                // keyboard_keys_s1_agent_rdata_fifo:out_data -> keyboard_keys_s1_agent:rdata_fifo_sink_data
	wire          keyboard_keys_s1_agent_rdata_fifo_out_ready;                               // keyboard_keys_s1_agent:rdata_fifo_sink_ready -> keyboard_keys_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> keyboard_keys_s1_agent:cp_valid
	wire  [116:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> keyboard_keys_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                     // keyboard_keys_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [24:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> keyboard_keys_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> keyboard_keys_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> keyboard_keys_s1_agent:cp_endofpacket
	wire   [31:0] mouse_pos_s1_agent_m0_readdata;                                            // mouse_pos_s1_translator:uav_readdata -> mouse_pos_s1_agent:m0_readdata
	wire          mouse_pos_s1_agent_m0_waitrequest;                                         // mouse_pos_s1_translator:uav_waitrequest -> mouse_pos_s1_agent:m0_waitrequest
	wire          mouse_pos_s1_agent_m0_debugaccess;                                         // mouse_pos_s1_agent:m0_debugaccess -> mouse_pos_s1_translator:uav_debugaccess
	wire   [31:0] mouse_pos_s1_agent_m0_address;                                             // mouse_pos_s1_agent:m0_address -> mouse_pos_s1_translator:uav_address
	wire    [3:0] mouse_pos_s1_agent_m0_byteenable;                                          // mouse_pos_s1_agent:m0_byteenable -> mouse_pos_s1_translator:uav_byteenable
	wire          mouse_pos_s1_agent_m0_read;                                                // mouse_pos_s1_agent:m0_read -> mouse_pos_s1_translator:uav_read
	wire          mouse_pos_s1_agent_m0_readdatavalid;                                       // mouse_pos_s1_translator:uav_readdatavalid -> mouse_pos_s1_agent:m0_readdatavalid
	wire          mouse_pos_s1_agent_m0_lock;                                                // mouse_pos_s1_agent:m0_lock -> mouse_pos_s1_translator:uav_lock
	wire   [31:0] mouse_pos_s1_agent_m0_writedata;                                           // mouse_pos_s1_agent:m0_writedata -> mouse_pos_s1_translator:uav_writedata
	wire          mouse_pos_s1_agent_m0_write;                                               // mouse_pos_s1_agent:m0_write -> mouse_pos_s1_translator:uav_write
	wire    [2:0] mouse_pos_s1_agent_m0_burstcount;                                          // mouse_pos_s1_agent:m0_burstcount -> mouse_pos_s1_translator:uav_burstcount
	wire          mouse_pos_s1_agent_rf_source_valid;                                        // mouse_pos_s1_agent:rf_source_valid -> mouse_pos_s1_agent_rsp_fifo:in_valid
	wire  [117:0] mouse_pos_s1_agent_rf_source_data;                                         // mouse_pos_s1_agent:rf_source_data -> mouse_pos_s1_agent_rsp_fifo:in_data
	wire          mouse_pos_s1_agent_rf_source_ready;                                        // mouse_pos_s1_agent_rsp_fifo:in_ready -> mouse_pos_s1_agent:rf_source_ready
	wire          mouse_pos_s1_agent_rf_source_startofpacket;                                // mouse_pos_s1_agent:rf_source_startofpacket -> mouse_pos_s1_agent_rsp_fifo:in_startofpacket
	wire          mouse_pos_s1_agent_rf_source_endofpacket;                                  // mouse_pos_s1_agent:rf_source_endofpacket -> mouse_pos_s1_agent_rsp_fifo:in_endofpacket
	wire          mouse_pos_s1_agent_rsp_fifo_out_valid;                                     // mouse_pos_s1_agent_rsp_fifo:out_valid -> mouse_pos_s1_agent:rf_sink_valid
	wire  [117:0] mouse_pos_s1_agent_rsp_fifo_out_data;                                      // mouse_pos_s1_agent_rsp_fifo:out_data -> mouse_pos_s1_agent:rf_sink_data
	wire          mouse_pos_s1_agent_rsp_fifo_out_ready;                                     // mouse_pos_s1_agent:rf_sink_ready -> mouse_pos_s1_agent_rsp_fifo:out_ready
	wire          mouse_pos_s1_agent_rsp_fifo_out_startofpacket;                             // mouse_pos_s1_agent_rsp_fifo:out_startofpacket -> mouse_pos_s1_agent:rf_sink_startofpacket
	wire          mouse_pos_s1_agent_rsp_fifo_out_endofpacket;                               // mouse_pos_s1_agent_rsp_fifo:out_endofpacket -> mouse_pos_s1_agent:rf_sink_endofpacket
	wire          mouse_pos_s1_agent_rdata_fifo_src_valid;                                   // mouse_pos_s1_agent:rdata_fifo_src_valid -> mouse_pos_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mouse_pos_s1_agent_rdata_fifo_src_data;                                    // mouse_pos_s1_agent:rdata_fifo_src_data -> mouse_pos_s1_agent_rdata_fifo:in_data
	wire          mouse_pos_s1_agent_rdata_fifo_src_ready;                                   // mouse_pos_s1_agent_rdata_fifo:in_ready -> mouse_pos_s1_agent:rdata_fifo_src_ready
	wire          mouse_pos_s1_agent_rdata_fifo_out_valid;                                   // mouse_pos_s1_agent_rdata_fifo:out_valid -> mouse_pos_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] mouse_pos_s1_agent_rdata_fifo_out_data;                                    // mouse_pos_s1_agent_rdata_fifo:out_data -> mouse_pos_s1_agent:rdata_fifo_sink_data
	wire          mouse_pos_s1_agent_rdata_fifo_out_ready;                                   // mouse_pos_s1_agent:rdata_fifo_sink_ready -> mouse_pos_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> mouse_pos_s1_agent:cp_valid
	wire  [116:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> mouse_pos_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                     // mouse_pos_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [24:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> mouse_pos_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> mouse_pos_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> mouse_pos_s1_agent:cp_endofpacket
	wire   [31:0] div_freq_s1_agent_m0_readdata;                                             // div_freq_s1_translator:uav_readdata -> div_freq_s1_agent:m0_readdata
	wire          div_freq_s1_agent_m0_waitrequest;                                          // div_freq_s1_translator:uav_waitrequest -> div_freq_s1_agent:m0_waitrequest
	wire          div_freq_s1_agent_m0_debugaccess;                                          // div_freq_s1_agent:m0_debugaccess -> div_freq_s1_translator:uav_debugaccess
	wire   [31:0] div_freq_s1_agent_m0_address;                                              // div_freq_s1_agent:m0_address -> div_freq_s1_translator:uav_address
	wire    [3:0] div_freq_s1_agent_m0_byteenable;                                           // div_freq_s1_agent:m0_byteenable -> div_freq_s1_translator:uav_byteenable
	wire          div_freq_s1_agent_m0_read;                                                 // div_freq_s1_agent:m0_read -> div_freq_s1_translator:uav_read
	wire          div_freq_s1_agent_m0_readdatavalid;                                        // div_freq_s1_translator:uav_readdatavalid -> div_freq_s1_agent:m0_readdatavalid
	wire          div_freq_s1_agent_m0_lock;                                                 // div_freq_s1_agent:m0_lock -> div_freq_s1_translator:uav_lock
	wire   [31:0] div_freq_s1_agent_m0_writedata;                                            // div_freq_s1_agent:m0_writedata -> div_freq_s1_translator:uav_writedata
	wire          div_freq_s1_agent_m0_write;                                                // div_freq_s1_agent:m0_write -> div_freq_s1_translator:uav_write
	wire    [2:0] div_freq_s1_agent_m0_burstcount;                                           // div_freq_s1_agent:m0_burstcount -> div_freq_s1_translator:uav_burstcount
	wire          div_freq_s1_agent_rf_source_valid;                                         // div_freq_s1_agent:rf_source_valid -> div_freq_s1_agent_rsp_fifo:in_valid
	wire  [117:0] div_freq_s1_agent_rf_source_data;                                          // div_freq_s1_agent:rf_source_data -> div_freq_s1_agent_rsp_fifo:in_data
	wire          div_freq_s1_agent_rf_source_ready;                                         // div_freq_s1_agent_rsp_fifo:in_ready -> div_freq_s1_agent:rf_source_ready
	wire          div_freq_s1_agent_rf_source_startofpacket;                                 // div_freq_s1_agent:rf_source_startofpacket -> div_freq_s1_agent_rsp_fifo:in_startofpacket
	wire          div_freq_s1_agent_rf_source_endofpacket;                                   // div_freq_s1_agent:rf_source_endofpacket -> div_freq_s1_agent_rsp_fifo:in_endofpacket
	wire          div_freq_s1_agent_rsp_fifo_out_valid;                                      // div_freq_s1_agent_rsp_fifo:out_valid -> div_freq_s1_agent:rf_sink_valid
	wire  [117:0] div_freq_s1_agent_rsp_fifo_out_data;                                       // div_freq_s1_agent_rsp_fifo:out_data -> div_freq_s1_agent:rf_sink_data
	wire          div_freq_s1_agent_rsp_fifo_out_ready;                                      // div_freq_s1_agent:rf_sink_ready -> div_freq_s1_agent_rsp_fifo:out_ready
	wire          div_freq_s1_agent_rsp_fifo_out_startofpacket;                              // div_freq_s1_agent_rsp_fifo:out_startofpacket -> div_freq_s1_agent:rf_sink_startofpacket
	wire          div_freq_s1_agent_rsp_fifo_out_endofpacket;                                // div_freq_s1_agent_rsp_fifo:out_endofpacket -> div_freq_s1_agent:rf_sink_endofpacket
	wire          div_freq_s1_agent_rdata_fifo_src_valid;                                    // div_freq_s1_agent:rdata_fifo_src_valid -> div_freq_s1_agent_rdata_fifo:in_valid
	wire   [33:0] div_freq_s1_agent_rdata_fifo_src_data;                                     // div_freq_s1_agent:rdata_fifo_src_data -> div_freq_s1_agent_rdata_fifo:in_data
	wire          div_freq_s1_agent_rdata_fifo_src_ready;                                    // div_freq_s1_agent_rdata_fifo:in_ready -> div_freq_s1_agent:rdata_fifo_src_ready
	wire          div_freq_s1_agent_rdata_fifo_out_valid;                                    // div_freq_s1_agent_rdata_fifo:out_valid -> div_freq_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] div_freq_s1_agent_rdata_fifo_out_data;                                     // div_freq_s1_agent_rdata_fifo:out_data -> div_freq_s1_agent:rdata_fifo_sink_data
	wire          div_freq_s1_agent_rdata_fifo_out_ready;                                    // div_freq_s1_agent:rdata_fifo_sink_ready -> div_freq_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> div_freq_s1_agent:cp_valid
	wire  [116:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> div_freq_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                     // div_freq_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [24:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> div_freq_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> div_freq_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> div_freq_s1_agent:cp_endofpacket
	wire   [31:0] audio_sel_s1_agent_m0_readdata;                                            // audio_sel_s1_translator:uav_readdata -> audio_sel_s1_agent:m0_readdata
	wire          audio_sel_s1_agent_m0_waitrequest;                                         // audio_sel_s1_translator:uav_waitrequest -> audio_sel_s1_agent:m0_waitrequest
	wire          audio_sel_s1_agent_m0_debugaccess;                                         // audio_sel_s1_agent:m0_debugaccess -> audio_sel_s1_translator:uav_debugaccess
	wire   [31:0] audio_sel_s1_agent_m0_address;                                             // audio_sel_s1_agent:m0_address -> audio_sel_s1_translator:uav_address
	wire    [3:0] audio_sel_s1_agent_m0_byteenable;                                          // audio_sel_s1_agent:m0_byteenable -> audio_sel_s1_translator:uav_byteenable
	wire          audio_sel_s1_agent_m0_read;                                                // audio_sel_s1_agent:m0_read -> audio_sel_s1_translator:uav_read
	wire          audio_sel_s1_agent_m0_readdatavalid;                                       // audio_sel_s1_translator:uav_readdatavalid -> audio_sel_s1_agent:m0_readdatavalid
	wire          audio_sel_s1_agent_m0_lock;                                                // audio_sel_s1_agent:m0_lock -> audio_sel_s1_translator:uav_lock
	wire   [31:0] audio_sel_s1_agent_m0_writedata;                                           // audio_sel_s1_agent:m0_writedata -> audio_sel_s1_translator:uav_writedata
	wire          audio_sel_s1_agent_m0_write;                                               // audio_sel_s1_agent:m0_write -> audio_sel_s1_translator:uav_write
	wire    [2:0] audio_sel_s1_agent_m0_burstcount;                                          // audio_sel_s1_agent:m0_burstcount -> audio_sel_s1_translator:uav_burstcount
	wire          audio_sel_s1_agent_rf_source_valid;                                        // audio_sel_s1_agent:rf_source_valid -> audio_sel_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_sel_s1_agent_rf_source_data;                                         // audio_sel_s1_agent:rf_source_data -> audio_sel_s1_agent_rsp_fifo:in_data
	wire          audio_sel_s1_agent_rf_source_ready;                                        // audio_sel_s1_agent_rsp_fifo:in_ready -> audio_sel_s1_agent:rf_source_ready
	wire          audio_sel_s1_agent_rf_source_startofpacket;                                // audio_sel_s1_agent:rf_source_startofpacket -> audio_sel_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_sel_s1_agent_rf_source_endofpacket;                                  // audio_sel_s1_agent:rf_source_endofpacket -> audio_sel_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_sel_s1_agent_rsp_fifo_out_valid;                                     // audio_sel_s1_agent_rsp_fifo:out_valid -> audio_sel_s1_agent:rf_sink_valid
	wire  [117:0] audio_sel_s1_agent_rsp_fifo_out_data;                                      // audio_sel_s1_agent_rsp_fifo:out_data -> audio_sel_s1_agent:rf_sink_data
	wire          audio_sel_s1_agent_rsp_fifo_out_ready;                                     // audio_sel_s1_agent:rf_sink_ready -> audio_sel_s1_agent_rsp_fifo:out_ready
	wire          audio_sel_s1_agent_rsp_fifo_out_startofpacket;                             // audio_sel_s1_agent_rsp_fifo:out_startofpacket -> audio_sel_s1_agent:rf_sink_startofpacket
	wire          audio_sel_s1_agent_rsp_fifo_out_endofpacket;                               // audio_sel_s1_agent_rsp_fifo:out_endofpacket -> audio_sel_s1_agent:rf_sink_endofpacket
	wire          audio_sel_s1_agent_rdata_fifo_src_valid;                                   // audio_sel_s1_agent:rdata_fifo_src_valid -> audio_sel_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_sel_s1_agent_rdata_fifo_src_data;                                    // audio_sel_s1_agent:rdata_fifo_src_data -> audio_sel_s1_agent_rdata_fifo:in_data
	wire          audio_sel_s1_agent_rdata_fifo_src_ready;                                   // audio_sel_s1_agent_rdata_fifo:in_ready -> audio_sel_s1_agent:rdata_fifo_src_ready
	wire          audio_sel_s1_agent_rdata_fifo_out_valid;                                   // audio_sel_s1_agent_rdata_fifo:out_valid -> audio_sel_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_sel_s1_agent_rdata_fifo_out_data;                                    // audio_sel_s1_agent_rdata_fifo:out_data -> audio_sel_s1_agent:rdata_fifo_sink_data
	wire          audio_sel_s1_agent_rdata_fifo_out_ready;                                   // audio_sel_s1_agent:rdata_fifo_sink_ready -> audio_sel_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> audio_sel_s1_agent:cp_valid
	wire  [116:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> audio_sel_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                     // audio_sel_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [24:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> audio_sel_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> audio_sel_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> audio_sel_s1_agent:cp_endofpacket
	wire   [31:0] lfsr_clk_interrupt_gen_s1_agent_m0_readdata;                               // lfsr_clk_interrupt_gen_s1_translator:uav_readdata -> lfsr_clk_interrupt_gen_s1_agent:m0_readdata
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_waitrequest;                            // lfsr_clk_interrupt_gen_s1_translator:uav_waitrequest -> lfsr_clk_interrupt_gen_s1_agent:m0_waitrequest
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_debugaccess;                            // lfsr_clk_interrupt_gen_s1_agent:m0_debugaccess -> lfsr_clk_interrupt_gen_s1_translator:uav_debugaccess
	wire   [31:0] lfsr_clk_interrupt_gen_s1_agent_m0_address;                                // lfsr_clk_interrupt_gen_s1_agent:m0_address -> lfsr_clk_interrupt_gen_s1_translator:uav_address
	wire    [3:0] lfsr_clk_interrupt_gen_s1_agent_m0_byteenable;                             // lfsr_clk_interrupt_gen_s1_agent:m0_byteenable -> lfsr_clk_interrupt_gen_s1_translator:uav_byteenable
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_read;                                   // lfsr_clk_interrupt_gen_s1_agent:m0_read -> lfsr_clk_interrupt_gen_s1_translator:uav_read
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_readdatavalid;                          // lfsr_clk_interrupt_gen_s1_translator:uav_readdatavalid -> lfsr_clk_interrupt_gen_s1_agent:m0_readdatavalid
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_lock;                                   // lfsr_clk_interrupt_gen_s1_agent:m0_lock -> lfsr_clk_interrupt_gen_s1_translator:uav_lock
	wire   [31:0] lfsr_clk_interrupt_gen_s1_agent_m0_writedata;                              // lfsr_clk_interrupt_gen_s1_agent:m0_writedata -> lfsr_clk_interrupt_gen_s1_translator:uav_writedata
	wire          lfsr_clk_interrupt_gen_s1_agent_m0_write;                                  // lfsr_clk_interrupt_gen_s1_agent:m0_write -> lfsr_clk_interrupt_gen_s1_translator:uav_write
	wire    [2:0] lfsr_clk_interrupt_gen_s1_agent_m0_burstcount;                             // lfsr_clk_interrupt_gen_s1_agent:m0_burstcount -> lfsr_clk_interrupt_gen_s1_translator:uav_burstcount
	wire          lfsr_clk_interrupt_gen_s1_agent_rf_source_valid;                           // lfsr_clk_interrupt_gen_s1_agent:rf_source_valid -> lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:in_valid
	wire  [117:0] lfsr_clk_interrupt_gen_s1_agent_rf_source_data;                            // lfsr_clk_interrupt_gen_s1_agent:rf_source_data -> lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:in_data
	wire          lfsr_clk_interrupt_gen_s1_agent_rf_source_ready;                           // lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:in_ready -> lfsr_clk_interrupt_gen_s1_agent:rf_source_ready
	wire          lfsr_clk_interrupt_gen_s1_agent_rf_source_startofpacket;                   // lfsr_clk_interrupt_gen_s1_agent:rf_source_startofpacket -> lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:in_startofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rf_source_endofpacket;                     // lfsr_clk_interrupt_gen_s1_agent:rf_source_endofpacket -> lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:in_endofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_valid;                        // lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:out_valid -> lfsr_clk_interrupt_gen_s1_agent:rf_sink_valid
	wire  [117:0] lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_data;                         // lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:out_data -> lfsr_clk_interrupt_gen_s1_agent:rf_sink_data
	wire          lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_ready;                        // lfsr_clk_interrupt_gen_s1_agent:rf_sink_ready -> lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:out_ready
	wire          lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_startofpacket;                // lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:out_startofpacket -> lfsr_clk_interrupt_gen_s1_agent:rf_sink_startofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_endofpacket;                  // lfsr_clk_interrupt_gen_s1_agent_rsp_fifo:out_endofpacket -> lfsr_clk_interrupt_gen_s1_agent:rf_sink_endofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_valid;                      // lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_src_valid -> lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:in_valid
	wire   [33:0] lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_data;                       // lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_src_data -> lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:in_data
	wire          lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_ready;                      // lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:in_ready -> lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_src_ready
	wire          lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_valid;                      // lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:out_valid -> lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_data;                       // lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:out_data -> lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_sink_data
	wire          lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_ready;                      // lfsr_clk_interrupt_gen_s1_agent:rdata_fifo_sink_ready -> lfsr_clk_interrupt_gen_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_019_src_valid;                                                     // cmd_mux_019:src_valid -> lfsr_clk_interrupt_gen_s1_agent:cp_valid
	wire  [116:0] cmd_mux_019_src_data;                                                      // cmd_mux_019:src_data -> lfsr_clk_interrupt_gen_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                     // lfsr_clk_interrupt_gen_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [24:0] cmd_mux_019_src_channel;                                                   // cmd_mux_019:src_channel -> lfsr_clk_interrupt_gen_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                             // cmd_mux_019:src_startofpacket -> lfsr_clk_interrupt_gen_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                               // cmd_mux_019:src_endofpacket -> lfsr_clk_interrupt_gen_s1_agent:cp_endofpacket
	wire   [31:0] lfsr_val_s1_agent_m0_readdata;                                             // lfsr_val_s1_translator:uav_readdata -> lfsr_val_s1_agent:m0_readdata
	wire          lfsr_val_s1_agent_m0_waitrequest;                                          // lfsr_val_s1_translator:uav_waitrequest -> lfsr_val_s1_agent:m0_waitrequest
	wire          lfsr_val_s1_agent_m0_debugaccess;                                          // lfsr_val_s1_agent:m0_debugaccess -> lfsr_val_s1_translator:uav_debugaccess
	wire   [31:0] lfsr_val_s1_agent_m0_address;                                              // lfsr_val_s1_agent:m0_address -> lfsr_val_s1_translator:uav_address
	wire    [3:0] lfsr_val_s1_agent_m0_byteenable;                                           // lfsr_val_s1_agent:m0_byteenable -> lfsr_val_s1_translator:uav_byteenable
	wire          lfsr_val_s1_agent_m0_read;                                                 // lfsr_val_s1_agent:m0_read -> lfsr_val_s1_translator:uav_read
	wire          lfsr_val_s1_agent_m0_readdatavalid;                                        // lfsr_val_s1_translator:uav_readdatavalid -> lfsr_val_s1_agent:m0_readdatavalid
	wire          lfsr_val_s1_agent_m0_lock;                                                 // lfsr_val_s1_agent:m0_lock -> lfsr_val_s1_translator:uav_lock
	wire   [31:0] lfsr_val_s1_agent_m0_writedata;                                            // lfsr_val_s1_agent:m0_writedata -> lfsr_val_s1_translator:uav_writedata
	wire          lfsr_val_s1_agent_m0_write;                                                // lfsr_val_s1_agent:m0_write -> lfsr_val_s1_translator:uav_write
	wire    [2:0] lfsr_val_s1_agent_m0_burstcount;                                           // lfsr_val_s1_agent:m0_burstcount -> lfsr_val_s1_translator:uav_burstcount
	wire          lfsr_val_s1_agent_rf_source_valid;                                         // lfsr_val_s1_agent:rf_source_valid -> lfsr_val_s1_agent_rsp_fifo:in_valid
	wire  [117:0] lfsr_val_s1_agent_rf_source_data;                                          // lfsr_val_s1_agent:rf_source_data -> lfsr_val_s1_agent_rsp_fifo:in_data
	wire          lfsr_val_s1_agent_rf_source_ready;                                         // lfsr_val_s1_agent_rsp_fifo:in_ready -> lfsr_val_s1_agent:rf_source_ready
	wire          lfsr_val_s1_agent_rf_source_startofpacket;                                 // lfsr_val_s1_agent:rf_source_startofpacket -> lfsr_val_s1_agent_rsp_fifo:in_startofpacket
	wire          lfsr_val_s1_agent_rf_source_endofpacket;                                   // lfsr_val_s1_agent:rf_source_endofpacket -> lfsr_val_s1_agent_rsp_fifo:in_endofpacket
	wire          lfsr_val_s1_agent_rsp_fifo_out_valid;                                      // lfsr_val_s1_agent_rsp_fifo:out_valid -> lfsr_val_s1_agent:rf_sink_valid
	wire  [117:0] lfsr_val_s1_agent_rsp_fifo_out_data;                                       // lfsr_val_s1_agent_rsp_fifo:out_data -> lfsr_val_s1_agent:rf_sink_data
	wire          lfsr_val_s1_agent_rsp_fifo_out_ready;                                      // lfsr_val_s1_agent:rf_sink_ready -> lfsr_val_s1_agent_rsp_fifo:out_ready
	wire          lfsr_val_s1_agent_rsp_fifo_out_startofpacket;                              // lfsr_val_s1_agent_rsp_fifo:out_startofpacket -> lfsr_val_s1_agent:rf_sink_startofpacket
	wire          lfsr_val_s1_agent_rsp_fifo_out_endofpacket;                                // lfsr_val_s1_agent_rsp_fifo:out_endofpacket -> lfsr_val_s1_agent:rf_sink_endofpacket
	wire          lfsr_val_s1_agent_rdata_fifo_src_valid;                                    // lfsr_val_s1_agent:rdata_fifo_src_valid -> lfsr_val_s1_agent_rdata_fifo:in_valid
	wire   [33:0] lfsr_val_s1_agent_rdata_fifo_src_data;                                     // lfsr_val_s1_agent:rdata_fifo_src_data -> lfsr_val_s1_agent_rdata_fifo:in_data
	wire          lfsr_val_s1_agent_rdata_fifo_src_ready;                                    // lfsr_val_s1_agent_rdata_fifo:in_ready -> lfsr_val_s1_agent:rdata_fifo_src_ready
	wire          lfsr_val_s1_agent_rdata_fifo_out_valid;                                    // lfsr_val_s1_agent_rdata_fifo:out_valid -> lfsr_val_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lfsr_val_s1_agent_rdata_fifo_out_data;                                     // lfsr_val_s1_agent_rdata_fifo:out_data -> lfsr_val_s1_agent:rdata_fifo_sink_data
	wire          lfsr_val_s1_agent_rdata_fifo_out_ready;                                    // lfsr_val_s1_agent:rdata_fifo_sink_ready -> lfsr_val_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_020_src_valid;                                                     // cmd_mux_020:src_valid -> lfsr_val_s1_agent:cp_valid
	wire  [116:0] cmd_mux_020_src_data;                                                      // cmd_mux_020:src_data -> lfsr_val_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                     // lfsr_val_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [24:0] cmd_mux_020_src_channel;                                                   // cmd_mux_020:src_channel -> lfsr_val_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                             // cmd_mux_020:src_startofpacket -> lfsr_val_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                               // cmd_mux_020:src_endofpacket -> lfsr_val_s1_agent:cp_endofpacket
	wire   [31:0] dds_increment_s1_agent_m0_readdata;                                        // dds_increment_s1_translator:uav_readdata -> dds_increment_s1_agent:m0_readdata
	wire          dds_increment_s1_agent_m0_waitrequest;                                     // dds_increment_s1_translator:uav_waitrequest -> dds_increment_s1_agent:m0_waitrequest
	wire          dds_increment_s1_agent_m0_debugaccess;                                     // dds_increment_s1_agent:m0_debugaccess -> dds_increment_s1_translator:uav_debugaccess
	wire   [31:0] dds_increment_s1_agent_m0_address;                                         // dds_increment_s1_agent:m0_address -> dds_increment_s1_translator:uav_address
	wire    [3:0] dds_increment_s1_agent_m0_byteenable;                                      // dds_increment_s1_agent:m0_byteenable -> dds_increment_s1_translator:uav_byteenable
	wire          dds_increment_s1_agent_m0_read;                                            // dds_increment_s1_agent:m0_read -> dds_increment_s1_translator:uav_read
	wire          dds_increment_s1_agent_m0_readdatavalid;                                   // dds_increment_s1_translator:uav_readdatavalid -> dds_increment_s1_agent:m0_readdatavalid
	wire          dds_increment_s1_agent_m0_lock;                                            // dds_increment_s1_agent:m0_lock -> dds_increment_s1_translator:uav_lock
	wire   [31:0] dds_increment_s1_agent_m0_writedata;                                       // dds_increment_s1_agent:m0_writedata -> dds_increment_s1_translator:uav_writedata
	wire          dds_increment_s1_agent_m0_write;                                           // dds_increment_s1_agent:m0_write -> dds_increment_s1_translator:uav_write
	wire    [2:0] dds_increment_s1_agent_m0_burstcount;                                      // dds_increment_s1_agent:m0_burstcount -> dds_increment_s1_translator:uav_burstcount
	wire          dds_increment_s1_agent_rf_source_valid;                                    // dds_increment_s1_agent:rf_source_valid -> dds_increment_s1_agent_rsp_fifo:in_valid
	wire  [117:0] dds_increment_s1_agent_rf_source_data;                                     // dds_increment_s1_agent:rf_source_data -> dds_increment_s1_agent_rsp_fifo:in_data
	wire          dds_increment_s1_agent_rf_source_ready;                                    // dds_increment_s1_agent_rsp_fifo:in_ready -> dds_increment_s1_agent:rf_source_ready
	wire          dds_increment_s1_agent_rf_source_startofpacket;                            // dds_increment_s1_agent:rf_source_startofpacket -> dds_increment_s1_agent_rsp_fifo:in_startofpacket
	wire          dds_increment_s1_agent_rf_source_endofpacket;                              // dds_increment_s1_agent:rf_source_endofpacket -> dds_increment_s1_agent_rsp_fifo:in_endofpacket
	wire          dds_increment_s1_agent_rsp_fifo_out_valid;                                 // dds_increment_s1_agent_rsp_fifo:out_valid -> dds_increment_s1_agent:rf_sink_valid
	wire  [117:0] dds_increment_s1_agent_rsp_fifo_out_data;                                  // dds_increment_s1_agent_rsp_fifo:out_data -> dds_increment_s1_agent:rf_sink_data
	wire          dds_increment_s1_agent_rsp_fifo_out_ready;                                 // dds_increment_s1_agent:rf_sink_ready -> dds_increment_s1_agent_rsp_fifo:out_ready
	wire          dds_increment_s1_agent_rsp_fifo_out_startofpacket;                         // dds_increment_s1_agent_rsp_fifo:out_startofpacket -> dds_increment_s1_agent:rf_sink_startofpacket
	wire          dds_increment_s1_agent_rsp_fifo_out_endofpacket;                           // dds_increment_s1_agent_rsp_fifo:out_endofpacket -> dds_increment_s1_agent:rf_sink_endofpacket
	wire          dds_increment_s1_agent_rdata_fifo_src_valid;                               // dds_increment_s1_agent:rdata_fifo_src_valid -> dds_increment_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dds_increment_s1_agent_rdata_fifo_src_data;                                // dds_increment_s1_agent:rdata_fifo_src_data -> dds_increment_s1_agent_rdata_fifo:in_data
	wire          dds_increment_s1_agent_rdata_fifo_src_ready;                               // dds_increment_s1_agent_rdata_fifo:in_ready -> dds_increment_s1_agent:rdata_fifo_src_ready
	wire          dds_increment_s1_agent_rdata_fifo_out_valid;                               // dds_increment_s1_agent_rdata_fifo:out_valid -> dds_increment_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] dds_increment_s1_agent_rdata_fifo_out_data;                                // dds_increment_s1_agent_rdata_fifo:out_data -> dds_increment_s1_agent:rdata_fifo_sink_data
	wire          dds_increment_s1_agent_rdata_fifo_out_ready;                               // dds_increment_s1_agent:rdata_fifo_sink_ready -> dds_increment_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_021_src_valid;                                                     // cmd_mux_021:src_valid -> dds_increment_s1_agent:cp_valid
	wire  [116:0] cmd_mux_021_src_data;                                                      // cmd_mux_021:src_data -> dds_increment_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                     // dds_increment_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [24:0] cmd_mux_021_src_channel;                                                   // cmd_mux_021:src_channel -> dds_increment_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                             // cmd_mux_021:src_startofpacket -> dds_increment_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                               // cmd_mux_021:src_endofpacket -> dds_increment_s1_agent:cp_endofpacket
	wire   [31:0] vga_to_nios_2_datamaster_agent_m0_readdata;                                // vga_to_nios_2_datamaster_translator:uav_readdata -> vga_to_nios_2_datamaster_agent:m0_readdata
	wire          vga_to_nios_2_datamaster_agent_m0_waitrequest;                             // vga_to_nios_2_datamaster_translator:uav_waitrequest -> vga_to_nios_2_datamaster_agent:m0_waitrequest
	wire          vga_to_nios_2_datamaster_agent_m0_debugaccess;                             // vga_to_nios_2_datamaster_agent:m0_debugaccess -> vga_to_nios_2_datamaster_translator:uav_debugaccess
	wire   [31:0] vga_to_nios_2_datamaster_agent_m0_address;                                 // vga_to_nios_2_datamaster_agent:m0_address -> vga_to_nios_2_datamaster_translator:uav_address
	wire    [3:0] vga_to_nios_2_datamaster_agent_m0_byteenable;                              // vga_to_nios_2_datamaster_agent:m0_byteenable -> vga_to_nios_2_datamaster_translator:uav_byteenable
	wire          vga_to_nios_2_datamaster_agent_m0_read;                                    // vga_to_nios_2_datamaster_agent:m0_read -> vga_to_nios_2_datamaster_translator:uav_read
	wire          vga_to_nios_2_datamaster_agent_m0_readdatavalid;                           // vga_to_nios_2_datamaster_translator:uav_readdatavalid -> vga_to_nios_2_datamaster_agent:m0_readdatavalid
	wire          vga_to_nios_2_datamaster_agent_m0_lock;                                    // vga_to_nios_2_datamaster_agent:m0_lock -> vga_to_nios_2_datamaster_translator:uav_lock
	wire   [31:0] vga_to_nios_2_datamaster_agent_m0_writedata;                               // vga_to_nios_2_datamaster_agent:m0_writedata -> vga_to_nios_2_datamaster_translator:uav_writedata
	wire          vga_to_nios_2_datamaster_agent_m0_write;                                   // vga_to_nios_2_datamaster_agent:m0_write -> vga_to_nios_2_datamaster_translator:uav_write
	wire    [2:0] vga_to_nios_2_datamaster_agent_m0_burstcount;                              // vga_to_nios_2_datamaster_agent:m0_burstcount -> vga_to_nios_2_datamaster_translator:uav_burstcount
	wire          vga_to_nios_2_datamaster_agent_rf_source_valid;                            // vga_to_nios_2_datamaster_agent:rf_source_valid -> vga_to_nios_2_datamaster_agent_rsp_fifo:in_valid
	wire  [117:0] vga_to_nios_2_datamaster_agent_rf_source_data;                             // vga_to_nios_2_datamaster_agent:rf_source_data -> vga_to_nios_2_datamaster_agent_rsp_fifo:in_data
	wire          vga_to_nios_2_datamaster_agent_rf_source_ready;                            // vga_to_nios_2_datamaster_agent_rsp_fifo:in_ready -> vga_to_nios_2_datamaster_agent:rf_source_ready
	wire          vga_to_nios_2_datamaster_agent_rf_source_startofpacket;                    // vga_to_nios_2_datamaster_agent:rf_source_startofpacket -> vga_to_nios_2_datamaster_agent_rsp_fifo:in_startofpacket
	wire          vga_to_nios_2_datamaster_agent_rf_source_endofpacket;                      // vga_to_nios_2_datamaster_agent:rf_source_endofpacket -> vga_to_nios_2_datamaster_agent_rsp_fifo:in_endofpacket
	wire          vga_to_nios_2_datamaster_agent_rsp_fifo_out_valid;                         // vga_to_nios_2_datamaster_agent_rsp_fifo:out_valid -> vga_to_nios_2_datamaster_agent:rf_sink_valid
	wire  [117:0] vga_to_nios_2_datamaster_agent_rsp_fifo_out_data;                          // vga_to_nios_2_datamaster_agent_rsp_fifo:out_data -> vga_to_nios_2_datamaster_agent:rf_sink_data
	wire          vga_to_nios_2_datamaster_agent_rsp_fifo_out_ready;                         // vga_to_nios_2_datamaster_agent:rf_sink_ready -> vga_to_nios_2_datamaster_agent_rsp_fifo:out_ready
	wire          vga_to_nios_2_datamaster_agent_rsp_fifo_out_startofpacket;                 // vga_to_nios_2_datamaster_agent_rsp_fifo:out_startofpacket -> vga_to_nios_2_datamaster_agent:rf_sink_startofpacket
	wire          vga_to_nios_2_datamaster_agent_rsp_fifo_out_endofpacket;                   // vga_to_nios_2_datamaster_agent_rsp_fifo:out_endofpacket -> vga_to_nios_2_datamaster_agent:rf_sink_endofpacket
	wire          vga_to_nios_2_datamaster_agent_rdata_fifo_src_valid;                       // vga_to_nios_2_datamaster_agent:rdata_fifo_src_valid -> vga_to_nios_2_datamaster_agent_rdata_fifo:in_valid
	wire   [33:0] vga_to_nios_2_datamaster_agent_rdata_fifo_src_data;                        // vga_to_nios_2_datamaster_agent:rdata_fifo_src_data -> vga_to_nios_2_datamaster_agent_rdata_fifo:in_data
	wire          vga_to_nios_2_datamaster_agent_rdata_fifo_src_ready;                       // vga_to_nios_2_datamaster_agent_rdata_fifo:in_ready -> vga_to_nios_2_datamaster_agent:rdata_fifo_src_ready
	wire          vga_to_nios_2_datamaster_agent_rdata_fifo_out_valid;                       // vga_to_nios_2_datamaster_agent_rdata_fifo:out_valid -> vga_to_nios_2_datamaster_agent:rdata_fifo_sink_valid
	wire   [33:0] vga_to_nios_2_datamaster_agent_rdata_fifo_out_data;                        // vga_to_nios_2_datamaster_agent_rdata_fifo:out_data -> vga_to_nios_2_datamaster_agent:rdata_fifo_sink_data
	wire          vga_to_nios_2_datamaster_agent_rdata_fifo_out_ready;                       // vga_to_nios_2_datamaster_agent:rdata_fifo_sink_ready -> vga_to_nios_2_datamaster_agent_rdata_fifo:out_ready
	wire          cmd_mux_022_src_valid;                                                     // cmd_mux_022:src_valid -> vga_to_nios_2_datamaster_agent:cp_valid
	wire  [116:0] cmd_mux_022_src_data;                                                      // cmd_mux_022:src_data -> vga_to_nios_2_datamaster_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                     // vga_to_nios_2_datamaster_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [24:0] cmd_mux_022_src_channel;                                                   // cmd_mux_022:src_channel -> vga_to_nios_2_datamaster_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                             // cmd_mux_022:src_startofpacket -> vga_to_nios_2_datamaster_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                               // cmd_mux_022:src_endofpacket -> vga_to_nios_2_datamaster_agent:cp_endofpacket
	wire   [31:0] audio_wrclk_s1_agent_m0_readdata;                                          // audio_wrclk_s1_translator:uav_readdata -> audio_wrclk_s1_agent:m0_readdata
	wire          audio_wrclk_s1_agent_m0_waitrequest;                                       // audio_wrclk_s1_translator:uav_waitrequest -> audio_wrclk_s1_agent:m0_waitrequest
	wire          audio_wrclk_s1_agent_m0_debugaccess;                                       // audio_wrclk_s1_agent:m0_debugaccess -> audio_wrclk_s1_translator:uav_debugaccess
	wire   [31:0] audio_wrclk_s1_agent_m0_address;                                           // audio_wrclk_s1_agent:m0_address -> audio_wrclk_s1_translator:uav_address
	wire    [3:0] audio_wrclk_s1_agent_m0_byteenable;                                        // audio_wrclk_s1_agent:m0_byteenable -> audio_wrclk_s1_translator:uav_byteenable
	wire          audio_wrclk_s1_agent_m0_read;                                              // audio_wrclk_s1_agent:m0_read -> audio_wrclk_s1_translator:uav_read
	wire          audio_wrclk_s1_agent_m0_readdatavalid;                                     // audio_wrclk_s1_translator:uav_readdatavalid -> audio_wrclk_s1_agent:m0_readdatavalid
	wire          audio_wrclk_s1_agent_m0_lock;                                              // audio_wrclk_s1_agent:m0_lock -> audio_wrclk_s1_translator:uav_lock
	wire   [31:0] audio_wrclk_s1_agent_m0_writedata;                                         // audio_wrclk_s1_agent:m0_writedata -> audio_wrclk_s1_translator:uav_writedata
	wire          audio_wrclk_s1_agent_m0_write;                                             // audio_wrclk_s1_agent:m0_write -> audio_wrclk_s1_translator:uav_write
	wire    [2:0] audio_wrclk_s1_agent_m0_burstcount;                                        // audio_wrclk_s1_agent:m0_burstcount -> audio_wrclk_s1_translator:uav_burstcount
	wire          audio_wrclk_s1_agent_rf_source_valid;                                      // audio_wrclk_s1_agent:rf_source_valid -> audio_wrclk_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_wrclk_s1_agent_rf_source_data;                                       // audio_wrclk_s1_agent:rf_source_data -> audio_wrclk_s1_agent_rsp_fifo:in_data
	wire          audio_wrclk_s1_agent_rf_source_ready;                                      // audio_wrclk_s1_agent_rsp_fifo:in_ready -> audio_wrclk_s1_agent:rf_source_ready
	wire          audio_wrclk_s1_agent_rf_source_startofpacket;                              // audio_wrclk_s1_agent:rf_source_startofpacket -> audio_wrclk_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_wrclk_s1_agent_rf_source_endofpacket;                                // audio_wrclk_s1_agent:rf_source_endofpacket -> audio_wrclk_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_wrclk_s1_agent_rsp_fifo_out_valid;                                   // audio_wrclk_s1_agent_rsp_fifo:out_valid -> audio_wrclk_s1_agent:rf_sink_valid
	wire  [117:0] audio_wrclk_s1_agent_rsp_fifo_out_data;                                    // audio_wrclk_s1_agent_rsp_fifo:out_data -> audio_wrclk_s1_agent:rf_sink_data
	wire          audio_wrclk_s1_agent_rsp_fifo_out_ready;                                   // audio_wrclk_s1_agent:rf_sink_ready -> audio_wrclk_s1_agent_rsp_fifo:out_ready
	wire          audio_wrclk_s1_agent_rsp_fifo_out_startofpacket;                           // audio_wrclk_s1_agent_rsp_fifo:out_startofpacket -> audio_wrclk_s1_agent:rf_sink_startofpacket
	wire          audio_wrclk_s1_agent_rsp_fifo_out_endofpacket;                             // audio_wrclk_s1_agent_rsp_fifo:out_endofpacket -> audio_wrclk_s1_agent:rf_sink_endofpacket
	wire          audio_wrclk_s1_agent_rdata_fifo_src_valid;                                 // audio_wrclk_s1_agent:rdata_fifo_src_valid -> audio_wrclk_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_wrclk_s1_agent_rdata_fifo_src_data;                                  // audio_wrclk_s1_agent:rdata_fifo_src_data -> audio_wrclk_s1_agent_rdata_fifo:in_data
	wire          audio_wrclk_s1_agent_rdata_fifo_src_ready;                                 // audio_wrclk_s1_agent_rdata_fifo:in_ready -> audio_wrclk_s1_agent:rdata_fifo_src_ready
	wire          audio_wrclk_s1_agent_rdata_fifo_out_valid;                                 // audio_wrclk_s1_agent_rdata_fifo:out_valid -> audio_wrclk_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_wrclk_s1_agent_rdata_fifo_out_data;                                  // audio_wrclk_s1_agent_rdata_fifo:out_data -> audio_wrclk_s1_agent:rdata_fifo_sink_data
	wire          audio_wrclk_s1_agent_rdata_fifo_out_ready;                                 // audio_wrclk_s1_agent:rdata_fifo_sink_ready -> audio_wrclk_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_023_src_valid;                                                     // cmd_mux_023:src_valid -> audio_wrclk_s1_agent:cp_valid
	wire  [116:0] cmd_mux_023_src_data;                                                      // cmd_mux_023:src_data -> audio_wrclk_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                     // audio_wrclk_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [24:0] cmd_mux_023_src_channel;                                                   // cmd_mux_023:src_channel -> audio_wrclk_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                             // cmd_mux_023:src_startofpacket -> audio_wrclk_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                               // cmd_mux_023:src_endofpacket -> audio_wrclk_s1_agent:cp_endofpacket
	wire   [31:0] audio_wrreq_s1_agent_m0_readdata;                                          // audio_wrreq_s1_translator:uav_readdata -> audio_wrreq_s1_agent:m0_readdata
	wire          audio_wrreq_s1_agent_m0_waitrequest;                                       // audio_wrreq_s1_translator:uav_waitrequest -> audio_wrreq_s1_agent:m0_waitrequest
	wire          audio_wrreq_s1_agent_m0_debugaccess;                                       // audio_wrreq_s1_agent:m0_debugaccess -> audio_wrreq_s1_translator:uav_debugaccess
	wire   [31:0] audio_wrreq_s1_agent_m0_address;                                           // audio_wrreq_s1_agent:m0_address -> audio_wrreq_s1_translator:uav_address
	wire    [3:0] audio_wrreq_s1_agent_m0_byteenable;                                        // audio_wrreq_s1_agent:m0_byteenable -> audio_wrreq_s1_translator:uav_byteenable
	wire          audio_wrreq_s1_agent_m0_read;                                              // audio_wrreq_s1_agent:m0_read -> audio_wrreq_s1_translator:uav_read
	wire          audio_wrreq_s1_agent_m0_readdatavalid;                                     // audio_wrreq_s1_translator:uav_readdatavalid -> audio_wrreq_s1_agent:m0_readdatavalid
	wire          audio_wrreq_s1_agent_m0_lock;                                              // audio_wrreq_s1_agent:m0_lock -> audio_wrreq_s1_translator:uav_lock
	wire   [31:0] audio_wrreq_s1_agent_m0_writedata;                                         // audio_wrreq_s1_agent:m0_writedata -> audio_wrreq_s1_translator:uav_writedata
	wire          audio_wrreq_s1_agent_m0_write;                                             // audio_wrreq_s1_agent:m0_write -> audio_wrreq_s1_translator:uav_write
	wire    [2:0] audio_wrreq_s1_agent_m0_burstcount;                                        // audio_wrreq_s1_agent:m0_burstcount -> audio_wrreq_s1_translator:uav_burstcount
	wire          audio_wrreq_s1_agent_rf_source_valid;                                      // audio_wrreq_s1_agent:rf_source_valid -> audio_wrreq_s1_agent_rsp_fifo:in_valid
	wire  [117:0] audio_wrreq_s1_agent_rf_source_data;                                       // audio_wrreq_s1_agent:rf_source_data -> audio_wrreq_s1_agent_rsp_fifo:in_data
	wire          audio_wrreq_s1_agent_rf_source_ready;                                      // audio_wrreq_s1_agent_rsp_fifo:in_ready -> audio_wrreq_s1_agent:rf_source_ready
	wire          audio_wrreq_s1_agent_rf_source_startofpacket;                              // audio_wrreq_s1_agent:rf_source_startofpacket -> audio_wrreq_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_wrreq_s1_agent_rf_source_endofpacket;                                // audio_wrreq_s1_agent:rf_source_endofpacket -> audio_wrreq_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_wrreq_s1_agent_rsp_fifo_out_valid;                                   // audio_wrreq_s1_agent_rsp_fifo:out_valid -> audio_wrreq_s1_agent:rf_sink_valid
	wire  [117:0] audio_wrreq_s1_agent_rsp_fifo_out_data;                                    // audio_wrreq_s1_agent_rsp_fifo:out_data -> audio_wrreq_s1_agent:rf_sink_data
	wire          audio_wrreq_s1_agent_rsp_fifo_out_ready;                                   // audio_wrreq_s1_agent:rf_sink_ready -> audio_wrreq_s1_agent_rsp_fifo:out_ready
	wire          audio_wrreq_s1_agent_rsp_fifo_out_startofpacket;                           // audio_wrreq_s1_agent_rsp_fifo:out_startofpacket -> audio_wrreq_s1_agent:rf_sink_startofpacket
	wire          audio_wrreq_s1_agent_rsp_fifo_out_endofpacket;                             // audio_wrreq_s1_agent_rsp_fifo:out_endofpacket -> audio_wrreq_s1_agent:rf_sink_endofpacket
	wire          audio_wrreq_s1_agent_rdata_fifo_src_valid;                                 // audio_wrreq_s1_agent:rdata_fifo_src_valid -> audio_wrreq_s1_agent_rdata_fifo:in_valid
	wire   [33:0] audio_wrreq_s1_agent_rdata_fifo_src_data;                                  // audio_wrreq_s1_agent:rdata_fifo_src_data -> audio_wrreq_s1_agent_rdata_fifo:in_data
	wire          audio_wrreq_s1_agent_rdata_fifo_src_ready;                                 // audio_wrreq_s1_agent_rdata_fifo:in_ready -> audio_wrreq_s1_agent:rdata_fifo_src_ready
	wire          audio_wrreq_s1_agent_rdata_fifo_out_valid;                                 // audio_wrreq_s1_agent_rdata_fifo:out_valid -> audio_wrreq_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_wrreq_s1_agent_rdata_fifo_out_data;                                  // audio_wrreq_s1_agent_rdata_fifo:out_data -> audio_wrreq_s1_agent:rdata_fifo_sink_data
	wire          audio_wrreq_s1_agent_rdata_fifo_out_ready;                                 // audio_wrreq_s1_agent:rdata_fifo_sink_ready -> audio_wrreq_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_024_src_valid;                                                     // cmd_mux_024:src_valid -> audio_wrreq_s1_agent:cp_valid
	wire  [116:0] cmd_mux_024_src_data;                                                      // cmd_mux_024:src_data -> audio_wrreq_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                     // audio_wrreq_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [24:0] cmd_mux_024_src_channel;                                                   // cmd_mux_024:src_channel -> audio_wrreq_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                             // cmd_mux_024:src_startofpacket -> audio_wrreq_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                               // cmd_mux_024:src_endofpacket -> audio_wrreq_s1_agent:cp_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [116:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [116:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          vga_to_sdram_agent_cp_valid;                                               // vga_to_sdram_agent:cp_valid -> router_002:sink_valid
	wire  [116:0] vga_to_sdram_agent_cp_data;                                                // vga_to_sdram_agent:cp_data -> router_002:sink_data
	wire          vga_to_sdram_agent_cp_ready;                                               // router_002:sink_ready -> vga_to_sdram_agent:cp_ready
	wire          vga_to_sdram_agent_cp_startofpacket;                                       // vga_to_sdram_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          vga_to_sdram_agent_cp_endofpacket;                                         // vga_to_sdram_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [116:0] router_002_src_data;                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [24:0] router_002_src_channel;                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_003:sink_valid
	wire  [116:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_003:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                // router_003:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux:sink_valid
	wire  [116:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                      // rsp_demux:sink_ready -> router_003:src_ready
	wire   [24:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                   // sysid_qsys_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [116:0] sysid_qsys_control_slave_agent_rp_data;                                    // sysid_qsys_control_slave_agent:rp_data -> router_004:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                   // router_004:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                           // sysid_qsys_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                             // sysid_qsys_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [116:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                      // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [24:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          audio_data_fregen_s1_agent_rp_valid;                                       // audio_data_fregen_s1_agent:rp_valid -> router_005:sink_valid
	wire  [116:0] audio_data_fregen_s1_agent_rp_data;                                        // audio_data_fregen_s1_agent:rp_data -> router_005:sink_data
	wire          audio_data_fregen_s1_agent_rp_ready;                                       // router_005:sink_ready -> audio_data_fregen_s1_agent:rp_ready
	wire          audio_data_fregen_s1_agent_rp_startofpacket;                               // audio_data_fregen_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          audio_data_fregen_s1_agent_rp_endofpacket;                                 // audio_data_fregen_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [116:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                      // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [24:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          audio_empty_s1_agent_rp_valid;                                             // audio_empty_s1_agent:rp_valid -> router_006:sink_valid
	wire  [116:0] audio_empty_s1_agent_rp_data;                                              // audio_empty_s1_agent:rp_data -> router_006:sink_data
	wire          audio_empty_s1_agent_rp_ready;                                             // router_006:sink_ready -> audio_empty_s1_agent:rp_ready
	wire          audio_empty_s1_agent_rp_startofpacket;                                     // audio_empty_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          audio_empty_s1_agent_rp_endofpacket;                                       // audio_empty_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [116:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                      // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [24:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          audio_fifo_full_s1_agent_rp_valid;                                         // audio_fifo_full_s1_agent:rp_valid -> router_007:sink_valid
	wire  [116:0] audio_fifo_full_s1_agent_rp_data;                                          // audio_fifo_full_s1_agent:rp_data -> router_007:sink_data
	wire          audio_fifo_full_s1_agent_rp_ready;                                         // router_007:sink_ready -> audio_fifo_full_s1_agent:rp_ready
	wire          audio_fifo_full_s1_agent_rp_startofpacket;                                 // audio_fifo_full_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          audio_fifo_full_s1_agent_rp_endofpacket;                                   // audio_fifo_full_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [116:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                      // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [24:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          audio_fifo_used_s1_agent_rp_valid;                                         // audio_fifo_used_s1_agent:rp_valid -> router_008:sink_valid
	wire  [116:0] audio_fifo_used_s1_agent_rp_data;                                          // audio_fifo_used_s1_agent:rp_data -> router_008:sink_data
	wire          audio_fifo_used_s1_agent_rp_ready;                                         // router_008:sink_ready -> audio_fifo_used_s1_agent:rp_ready
	wire          audio_fifo_used_s1_agent_rp_startofpacket;                                 // audio_fifo_used_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          audio_fifo_used_s1_agent_rp_endofpacket;                                   // audio_fifo_used_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [116:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                      // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [24:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rp_valid;                                      // cpu_jtag_debug_module_agent:rp_valid -> router_009:sink_valid
	wire  [116:0] cpu_jtag_debug_module_agent_rp_data;                                       // cpu_jtag_debug_module_agent:rp_data -> router_009:sink_data
	wire          cpu_jtag_debug_module_agent_rp_ready;                                      // router_009:sink_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire          cpu_jtag_debug_module_agent_rp_startofpacket;                              // cpu_jtag_debug_module_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rp_endofpacket;                                // cpu_jtag_debug_module_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [116:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                      // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [24:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          audio_out_data_audio_s1_agent_rp_valid;                                    // audio_out_data_audio_s1_agent:rp_valid -> router_010:sink_valid
	wire  [116:0] audio_out_data_audio_s1_agent_rp_data;                                     // audio_out_data_audio_s1_agent:rp_data -> router_010:sink_data
	wire          audio_out_data_audio_s1_agent_rp_ready;                                    // router_010:sink_ready -> audio_out_data_audio_s1_agent:rp_ready
	wire          audio_out_data_audio_s1_agent_rp_startofpacket;                            // audio_out_data_audio_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          audio_out_data_audio_s1_agent_rp_endofpacket;                              // audio_out_data_audio_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [116:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                      // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [24:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          audio_out_pause_s1_agent_rp_valid;                                         // audio_out_pause_s1_agent:rp_valid -> router_011:sink_valid
	wire  [116:0] audio_out_pause_s1_agent_rp_data;                                          // audio_out_pause_s1_agent:rp_data -> router_011:sink_data
	wire          audio_out_pause_s1_agent_rp_ready;                                         // router_011:sink_ready -> audio_out_pause_s1_agent:rp_ready
	wire          audio_out_pause_s1_agent_rp_startofpacket;                                 // audio_out_pause_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          audio_out_pause_s1_agent_rp_endofpacket;                                   // audio_out_pause_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [116:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                      // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [24:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          audio_out_stop_s1_agent_rp_valid;                                          // audio_out_stop_s1_agent:rp_valid -> router_012:sink_valid
	wire  [116:0] audio_out_stop_s1_agent_rp_data;                                           // audio_out_stop_s1_agent:rp_data -> router_012:sink_data
	wire          audio_out_stop_s1_agent_rp_ready;                                          // router_012:sink_ready -> audio_out_stop_s1_agent:rp_ready
	wire          audio_out_stop_s1_agent_rp_startofpacket;                                  // audio_out_stop_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          audio_out_stop_s1_agent_rp_endofpacket;                                    // audio_out_stop_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [116:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                      // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [24:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                   // sdram_s1_agent:rp_valid -> router_013:sink_valid
	wire   [98:0] sdram_s1_agent_rp_data;                                                    // sdram_s1_agent:rp_data -> router_013:sink_data
	wire          sdram_s1_agent_rp_ready;                                                   // router_013:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                           // sdram_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                             // sdram_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                   // timer_s1_agent:rp_valid -> router_014:sink_valid
	wire  [116:0] timer_s1_agent_rp_data;                                                    // timer_s1_agent:rp_data -> router_014:sink_data
	wire          timer_s1_agent_rp_ready;                                                   // router_014:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                           // timer_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                             // timer_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [116:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                      // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [24:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          key_s1_agent_rp_valid;                                                     // key_s1_agent:rp_valid -> router_015:sink_valid
	wire  [116:0] key_s1_agent_rp_data;                                                      // key_s1_agent:rp_data -> router_015:sink_data
	wire          key_s1_agent_rp_ready;                                                     // router_015:sink_ready -> key_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                             // key_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                               // key_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [116:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                      // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [24:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          signal_selector_s1_agent_rp_valid;                                         // signal_selector_s1_agent:rp_valid -> router_016:sink_valid
	wire  [116:0] signal_selector_s1_agent_rp_data;                                          // signal_selector_s1_agent:rp_data -> router_016:sink_data
	wire          signal_selector_s1_agent_rp_ready;                                         // router_016:sink_ready -> signal_selector_s1_agent:rp_ready
	wire          signal_selector_s1_agent_rp_startofpacket;                                 // signal_selector_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          signal_selector_s1_agent_rp_endofpacket;                                   // signal_selector_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [116:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                      // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [24:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          modulation_selector_s1_agent_rp_valid;                                     // modulation_selector_s1_agent:rp_valid -> router_017:sink_valid
	wire  [116:0] modulation_selector_s1_agent_rp_data;                                      // modulation_selector_s1_agent:rp_data -> router_017:sink_data
	wire          modulation_selector_s1_agent_rp_ready;                                     // router_017:sink_ready -> modulation_selector_s1_agent:rp_ready
	wire          modulation_selector_s1_agent_rp_startofpacket;                             // modulation_selector_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          modulation_selector_s1_agent_rp_endofpacket;                               // modulation_selector_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [116:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                      // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [24:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          keyboard_keys_s1_agent_rp_valid;                                           // keyboard_keys_s1_agent:rp_valid -> router_018:sink_valid
	wire  [116:0] keyboard_keys_s1_agent_rp_data;                                            // keyboard_keys_s1_agent:rp_data -> router_018:sink_data
	wire          keyboard_keys_s1_agent_rp_ready;                                           // router_018:sink_ready -> keyboard_keys_s1_agent:rp_ready
	wire          keyboard_keys_s1_agent_rp_startofpacket;                                   // keyboard_keys_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          keyboard_keys_s1_agent_rp_endofpacket;                                     // keyboard_keys_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [116:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                      // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [24:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          mouse_pos_s1_agent_rp_valid;                                               // mouse_pos_s1_agent:rp_valid -> router_019:sink_valid
	wire  [116:0] mouse_pos_s1_agent_rp_data;                                                // mouse_pos_s1_agent:rp_data -> router_019:sink_data
	wire          mouse_pos_s1_agent_rp_ready;                                               // router_019:sink_ready -> mouse_pos_s1_agent:rp_ready
	wire          mouse_pos_s1_agent_rp_startofpacket;                                       // mouse_pos_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          mouse_pos_s1_agent_rp_endofpacket;                                         // mouse_pos_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_016:sink_valid
	wire  [116:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                      // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [24:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          div_freq_s1_agent_rp_valid;                                                // div_freq_s1_agent:rp_valid -> router_020:sink_valid
	wire  [116:0] div_freq_s1_agent_rp_data;                                                 // div_freq_s1_agent:rp_data -> router_020:sink_data
	wire          div_freq_s1_agent_rp_ready;                                                // router_020:sink_ready -> div_freq_s1_agent:rp_ready
	wire          div_freq_s1_agent_rp_startofpacket;                                        // div_freq_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          div_freq_s1_agent_rp_endofpacket;                                          // div_freq_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_017:sink_valid
	wire  [116:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                      // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [24:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          audio_sel_s1_agent_rp_valid;                                               // audio_sel_s1_agent:rp_valid -> router_021:sink_valid
	wire  [116:0] audio_sel_s1_agent_rp_data;                                                // audio_sel_s1_agent:rp_data -> router_021:sink_data
	wire          audio_sel_s1_agent_rp_ready;                                               // router_021:sink_ready -> audio_sel_s1_agent:rp_ready
	wire          audio_sel_s1_agent_rp_startofpacket;                                       // audio_sel_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          audio_sel_s1_agent_rp_endofpacket;                                         // audio_sel_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                      // router_021:src_valid -> rsp_demux_018:sink_valid
	wire  [116:0] router_021_src_data;                                                       // router_021:src_data -> rsp_demux_018:sink_data
	wire          router_021_src_ready;                                                      // rsp_demux_018:sink_ready -> router_021:src_ready
	wire   [24:0] router_021_src_channel;                                                    // router_021:src_channel -> rsp_demux_018:sink_channel
	wire          router_021_src_startofpacket;                                              // router_021:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_021_src_endofpacket;                                                // router_021:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rp_valid;                                  // lfsr_clk_interrupt_gen_s1_agent:rp_valid -> router_022:sink_valid
	wire  [116:0] lfsr_clk_interrupt_gen_s1_agent_rp_data;                                   // lfsr_clk_interrupt_gen_s1_agent:rp_data -> router_022:sink_data
	wire          lfsr_clk_interrupt_gen_s1_agent_rp_ready;                                  // router_022:sink_ready -> lfsr_clk_interrupt_gen_s1_agent:rp_ready
	wire          lfsr_clk_interrupt_gen_s1_agent_rp_startofpacket;                          // lfsr_clk_interrupt_gen_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          lfsr_clk_interrupt_gen_s1_agent_rp_endofpacket;                            // lfsr_clk_interrupt_gen_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                      // router_022:src_valid -> rsp_demux_019:sink_valid
	wire  [116:0] router_022_src_data;                                                       // router_022:src_data -> rsp_demux_019:sink_data
	wire          router_022_src_ready;                                                      // rsp_demux_019:sink_ready -> router_022:src_ready
	wire   [24:0] router_022_src_channel;                                                    // router_022:src_channel -> rsp_demux_019:sink_channel
	wire          router_022_src_startofpacket;                                              // router_022:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_022_src_endofpacket;                                                // router_022:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          lfsr_val_s1_agent_rp_valid;                                                // lfsr_val_s1_agent:rp_valid -> router_023:sink_valid
	wire  [116:0] lfsr_val_s1_agent_rp_data;                                                 // lfsr_val_s1_agent:rp_data -> router_023:sink_data
	wire          lfsr_val_s1_agent_rp_ready;                                                // router_023:sink_ready -> lfsr_val_s1_agent:rp_ready
	wire          lfsr_val_s1_agent_rp_startofpacket;                                        // lfsr_val_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          lfsr_val_s1_agent_rp_endofpacket;                                          // lfsr_val_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                      // router_023:src_valid -> rsp_demux_020:sink_valid
	wire  [116:0] router_023_src_data;                                                       // router_023:src_data -> rsp_demux_020:sink_data
	wire          router_023_src_ready;                                                      // rsp_demux_020:sink_ready -> router_023:src_ready
	wire   [24:0] router_023_src_channel;                                                    // router_023:src_channel -> rsp_demux_020:sink_channel
	wire          router_023_src_startofpacket;                                              // router_023:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_023_src_endofpacket;                                                // router_023:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          dds_increment_s1_agent_rp_valid;                                           // dds_increment_s1_agent:rp_valid -> router_024:sink_valid
	wire  [116:0] dds_increment_s1_agent_rp_data;                                            // dds_increment_s1_agent:rp_data -> router_024:sink_data
	wire          dds_increment_s1_agent_rp_ready;                                           // router_024:sink_ready -> dds_increment_s1_agent:rp_ready
	wire          dds_increment_s1_agent_rp_startofpacket;                                   // dds_increment_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          dds_increment_s1_agent_rp_endofpacket;                                     // dds_increment_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                      // router_024:src_valid -> rsp_demux_021:sink_valid
	wire  [116:0] router_024_src_data;                                                       // router_024:src_data -> rsp_demux_021:sink_data
	wire          router_024_src_ready;                                                      // rsp_demux_021:sink_ready -> router_024:src_ready
	wire   [24:0] router_024_src_channel;                                                    // router_024:src_channel -> rsp_demux_021:sink_channel
	wire          router_024_src_startofpacket;                                              // router_024:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_024_src_endofpacket;                                                // router_024:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          vga_to_nios_2_datamaster_agent_rp_valid;                                   // vga_to_nios_2_datamaster_agent:rp_valid -> router_025:sink_valid
	wire  [116:0] vga_to_nios_2_datamaster_agent_rp_data;                                    // vga_to_nios_2_datamaster_agent:rp_data -> router_025:sink_data
	wire          vga_to_nios_2_datamaster_agent_rp_ready;                                   // router_025:sink_ready -> vga_to_nios_2_datamaster_agent:rp_ready
	wire          vga_to_nios_2_datamaster_agent_rp_startofpacket;                           // vga_to_nios_2_datamaster_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          vga_to_nios_2_datamaster_agent_rp_endofpacket;                             // vga_to_nios_2_datamaster_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                      // router_025:src_valid -> rsp_demux_022:sink_valid
	wire  [116:0] router_025_src_data;                                                       // router_025:src_data -> rsp_demux_022:sink_data
	wire          router_025_src_ready;                                                      // rsp_demux_022:sink_ready -> router_025:src_ready
	wire   [24:0] router_025_src_channel;                                                    // router_025:src_channel -> rsp_demux_022:sink_channel
	wire          router_025_src_startofpacket;                                              // router_025:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_025_src_endofpacket;                                                // router_025:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          audio_wrclk_s1_agent_rp_valid;                                             // audio_wrclk_s1_agent:rp_valid -> router_026:sink_valid
	wire  [116:0] audio_wrclk_s1_agent_rp_data;                                              // audio_wrclk_s1_agent:rp_data -> router_026:sink_data
	wire          audio_wrclk_s1_agent_rp_ready;                                             // router_026:sink_ready -> audio_wrclk_s1_agent:rp_ready
	wire          audio_wrclk_s1_agent_rp_startofpacket;                                     // audio_wrclk_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          audio_wrclk_s1_agent_rp_endofpacket;                                       // audio_wrclk_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                      // router_026:src_valid -> rsp_demux_023:sink_valid
	wire  [116:0] router_026_src_data;                                                       // router_026:src_data -> rsp_demux_023:sink_data
	wire          router_026_src_ready;                                                      // rsp_demux_023:sink_ready -> router_026:src_ready
	wire   [24:0] router_026_src_channel;                                                    // router_026:src_channel -> rsp_demux_023:sink_channel
	wire          router_026_src_startofpacket;                                              // router_026:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_026_src_endofpacket;                                                // router_026:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          audio_wrreq_s1_agent_rp_valid;                                             // audio_wrreq_s1_agent:rp_valid -> router_027:sink_valid
	wire  [116:0] audio_wrreq_s1_agent_rp_data;                                              // audio_wrreq_s1_agent:rp_data -> router_027:sink_data
	wire          audio_wrreq_s1_agent_rp_ready;                                             // router_027:sink_ready -> audio_wrreq_s1_agent:rp_ready
	wire          audio_wrreq_s1_agent_rp_startofpacket;                                     // audio_wrreq_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          audio_wrreq_s1_agent_rp_endofpacket;                                       // audio_wrreq_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                      // router_027:src_valid -> rsp_demux_024:sink_valid
	wire  [116:0] router_027_src_data;                                                       // router_027:src_data -> rsp_demux_024:sink_data
	wire          router_027_src_ready;                                                      // rsp_demux_024:sink_ready -> router_027:src_ready
	wire   [24:0] router_027_src_channel;                                                    // router_027:src_channel -> rsp_demux_024:sink_channel
	wire          router_027_src_startofpacket;                                              // router_027:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_027_src_endofpacket;                                                // router_027:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [116:0] router_src_data;                                                           // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                          // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [24:0] router_src_channel;                                                        // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                     // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [116:0] cpu_data_master_limiter_rsp_src_data;                                      // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                     // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire   [24:0] cpu_data_master_limiter_rsp_src_channel;                                   // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                             // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                               // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [116:0] router_001_src_data;                                                       // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                      // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [24:0] router_001_src_channel;                                                    // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                              // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [116:0] cpu_instruction_master_limiter_rsp_src_data;                               // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                              // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [24:0] cpu_instruction_master_limiter_rsp_src_channel;                            // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                      // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire   [98:0] sdram_s1_burst_adapter_source0_data;                                       // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                      // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [24:0] sdram_s1_burst_adapter_source0_channel;                                    // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                              // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [116:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [24:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [116:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [24:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [116:0] cmd_demux_src6_data;                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [24:0] cmd_demux_src6_channel;                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [116:0] cmd_demux_src11_data;                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [24:0] cmd_demux_src11_channel;                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [116:0] cmd_demux_src12_data;                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [24:0] cmd_demux_src12_channel;                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [116:0] cmd_demux_src13_data;                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [24:0] cmd_demux_src13_channel;                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [116:0] cmd_demux_src14_data;                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [24:0] cmd_demux_src14_channel;                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [116:0] cmd_demux_src17_data;                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [24:0] cmd_demux_src17_channel;                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [116:0] cmd_demux_src18_data;                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [24:0] cmd_demux_src18_channel;                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [116:0] cmd_demux_src19_data;                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [24:0] cmd_demux_src19_channel;                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [116:0] cmd_demux_src20_data;                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [24:0] cmd_demux_src20_channel;                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                     // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [116:0] cmd_demux_src21_data;                                                      // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                     // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [24:0] cmd_demux_src21_channel;                                                   // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                             // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                               // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux_006:sink1_valid
	wire  [116:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux_006:sink1_ready -> cmd_demux_001:src0_ready
	wire   [24:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> cmd_mux_010:sink2_valid
	wire  [116:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src0_ready;                                                  // cmd_mux_010:sink2_ready -> cmd_demux_002:src0_ready
	wire   [24:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [116:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [24:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [116:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [24:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [116:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [24:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                  // rsp_demux_006:src1_valid -> rsp_mux_001:sink0_valid
	wire  [116:0] rsp_demux_006_src1_data;                                                   // rsp_demux_006:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_006_src1_ready;                                                  // rsp_mux_001:sink0_ready -> rsp_demux_006:src1_ready
	wire   [24:0] rsp_demux_006_src1_channel;                                                // rsp_demux_006:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                          // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                            // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_010_src2_valid;                                                  // rsp_demux_010:src2_valid -> rsp_mux_002:sink0_valid
	wire  [116:0] rsp_demux_010_src2_data;                                                   // rsp_demux_010:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_010_src2_ready;                                                  // rsp_mux_002:sink0_ready -> rsp_demux_010:src2_ready
	wire   [24:0] rsp_demux_010_src2_channel;                                                // rsp_demux_010:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_010_src2_startofpacket;                                          // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                            // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [116:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [24:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [116:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [24:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [116:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [24:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [116:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [24:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [116:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [24:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [116:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [24:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [116:0] rsp_demux_019_src0_data;                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [24:0] rsp_demux_019_src0_channel;                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [116:0] rsp_demux_020_src0_data;                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [24:0] rsp_demux_020_src0_channel;                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                  // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [116:0] rsp_demux_021_src0_data;                                                   // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                  // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [24:0] rsp_demux_021_src0_channel;                                                // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                          // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                            // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          router_013_src_valid;                                                      // router_013:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire   [98:0] router_013_src_data;                                                       // router_013:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                      // sdram_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [24:0] router_013_src_channel;                                                    // router_013:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                              // router_013:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                // router_013:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                      // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [116:0] sdram_s1_rsp_width_adapter_src_data;                                       // sdram_s1_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                      // rsp_demux_010:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire   [24:0] sdram_s1_rsp_width_adapter_src_channel;                                    // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                              // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [116:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                                     // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [24:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                      // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [98:0] sdram_s1_cmd_width_adapter_src_data;                                       // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                      // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire   [24:0] sdram_s1_cmd_width_adapter_src_channel;                                    // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                              // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> crosser:in_valid
	wire  [116:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> crosser:in_data
	wire          cmd_demux_src2_ready;                                                      // crosser:in_ready -> cmd_demux:src2_ready
	wire   [24:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> crosser:in_channel
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                         // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [116:0] crosser_out_data;                                                          // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                         // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire   [24:0] crosser_out_channel;                                                       // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                 // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                   // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> crosser_001:in_valid
	wire  [116:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> crosser_001:in_data
	wire          cmd_demux_src3_ready;                                                      // crosser_001:in_ready -> cmd_demux:src3_ready
	wire   [24:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                     // crosser_001:out_valid -> cmd_mux_003:sink0_valid
	wire  [116:0] crosser_001_out_data;                                                      // crosser_001:out_data -> cmd_mux_003:sink0_data
	wire          crosser_001_out_ready;                                                     // cmd_mux_003:sink0_ready -> crosser_001:out_ready
	wire   [24:0] crosser_001_out_channel;                                                   // crosser_001:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_001_out_startofpacket;                                             // crosser_001:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                               // crosser_001:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> crosser_002:in_valid
	wire  [116:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> crosser_002:in_data
	wire          cmd_demux_src4_ready;                                                      // crosser_002:in_ready -> cmd_demux:src4_ready
	wire   [24:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> crosser_002:in_channel
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                     // crosser_002:out_valid -> cmd_mux_004:sink0_valid
	wire  [116:0] crosser_002_out_data;                                                      // crosser_002:out_data -> cmd_mux_004:sink0_data
	wire          crosser_002_out_ready;                                                     // cmd_mux_004:sink0_ready -> crosser_002:out_ready
	wire   [24:0] crosser_002_out_channel;                                                   // crosser_002:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_002_out_startofpacket;                                             // crosser_002:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                               // crosser_002:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                      // cmd_demux:src5_valid -> crosser_003:in_valid
	wire  [116:0] cmd_demux_src5_data;                                                       // cmd_demux:src5_data -> crosser_003:in_data
	wire          cmd_demux_src5_ready;                                                      // crosser_003:in_ready -> cmd_demux:src5_ready
	wire   [24:0] cmd_demux_src5_channel;                                                    // cmd_demux:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_src5_startofpacket;                                              // cmd_demux:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                // cmd_demux:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                     // crosser_003:out_valid -> cmd_mux_005:sink0_valid
	wire  [116:0] crosser_003_out_data;                                                      // crosser_003:out_data -> cmd_mux_005:sink0_data
	wire          crosser_003_out_ready;                                                     // cmd_mux_005:sink0_ready -> crosser_003:out_ready
	wire   [24:0] crosser_003_out_channel;                                                   // crosser_003:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_003_out_startofpacket;                                             // crosser_003:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                               // crosser_003:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                      // cmd_demux:src7_valid -> crosser_004:in_valid
	wire  [116:0] cmd_demux_src7_data;                                                       // cmd_demux:src7_data -> crosser_004:in_data
	wire          cmd_demux_src7_ready;                                                      // crosser_004:in_ready -> cmd_demux:src7_ready
	wire   [24:0] cmd_demux_src7_channel;                                                    // cmd_demux:src7_channel -> crosser_004:in_channel
	wire          cmd_demux_src7_startofpacket;                                              // cmd_demux:src7_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                // cmd_demux:src7_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                     // crosser_004:out_valid -> cmd_mux_007:sink0_valid
	wire  [116:0] crosser_004_out_data;                                                      // crosser_004:out_data -> cmd_mux_007:sink0_data
	wire          crosser_004_out_ready;                                                     // cmd_mux_007:sink0_ready -> crosser_004:out_ready
	wire   [24:0] crosser_004_out_channel;                                                   // crosser_004:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_004_out_startofpacket;                                             // crosser_004:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                               // crosser_004:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                      // cmd_demux:src8_valid -> crosser_005:in_valid
	wire  [116:0] cmd_demux_src8_data;                                                       // cmd_demux:src8_data -> crosser_005:in_data
	wire          cmd_demux_src8_ready;                                                      // crosser_005:in_ready -> cmd_demux:src8_ready
	wire   [24:0] cmd_demux_src8_channel;                                                    // cmd_demux:src8_channel -> crosser_005:in_channel
	wire          cmd_demux_src8_startofpacket;                                              // cmd_demux:src8_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                // cmd_demux:src8_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                     // crosser_005:out_valid -> cmd_mux_008:sink0_valid
	wire  [116:0] crosser_005_out_data;                                                      // crosser_005:out_data -> cmd_mux_008:sink0_data
	wire          crosser_005_out_ready;                                                     // cmd_mux_008:sink0_ready -> crosser_005:out_ready
	wire   [24:0] crosser_005_out_channel;                                                   // crosser_005:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_005_out_startofpacket;                                             // crosser_005:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                               // crosser_005:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                      // cmd_demux:src9_valid -> crosser_006:in_valid
	wire  [116:0] cmd_demux_src9_data;                                                       // cmd_demux:src9_data -> crosser_006:in_data
	wire          cmd_demux_src9_ready;                                                      // crosser_006:in_ready -> cmd_demux:src9_ready
	wire   [24:0] cmd_demux_src9_channel;                                                    // cmd_demux:src9_channel -> crosser_006:in_channel
	wire          cmd_demux_src9_startofpacket;                                              // cmd_demux:src9_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                // cmd_demux:src9_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                     // crosser_006:out_valid -> cmd_mux_009:sink0_valid
	wire  [116:0] crosser_006_out_data;                                                      // crosser_006:out_data -> cmd_mux_009:sink0_data
	wire          crosser_006_out_ready;                                                     // cmd_mux_009:sink0_ready -> crosser_006:out_ready
	wire   [24:0] crosser_006_out_channel;                                                   // crosser_006:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_006_out_startofpacket;                                             // crosser_006:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                               // crosser_006:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                     // cmd_demux:src10_valid -> crosser_007:in_valid
	wire  [116:0] cmd_demux_src10_data;                                                      // cmd_demux:src10_data -> crosser_007:in_data
	wire          cmd_demux_src10_ready;                                                     // crosser_007:in_ready -> cmd_demux:src10_ready
	wire   [24:0] cmd_demux_src10_channel;                                                   // cmd_demux:src10_channel -> crosser_007:in_channel
	wire          cmd_demux_src10_startofpacket;                                             // cmd_demux:src10_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                               // cmd_demux:src10_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                     // crosser_007:out_valid -> cmd_mux_010:sink0_valid
	wire  [116:0] crosser_007_out_data;                                                      // crosser_007:out_data -> cmd_mux_010:sink0_data
	wire          crosser_007_out_ready;                                                     // cmd_mux_010:sink0_ready -> crosser_007:out_ready
	wire   [24:0] crosser_007_out_channel;                                                   // crosser_007:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_007_out_startofpacket;                                             // crosser_007:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                               // crosser_007:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                     // cmd_demux:src15_valid -> crosser_008:in_valid
	wire  [116:0] cmd_demux_src15_data;                                                      // cmd_demux:src15_data -> crosser_008:in_data
	wire          cmd_demux_src15_ready;                                                     // crosser_008:in_ready -> cmd_demux:src15_ready
	wire   [24:0] cmd_demux_src15_channel;                                                   // cmd_demux:src15_channel -> crosser_008:in_channel
	wire          cmd_demux_src15_startofpacket;                                             // cmd_demux:src15_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                               // cmd_demux:src15_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                     // crosser_008:out_valid -> cmd_mux_015:sink0_valid
	wire  [116:0] crosser_008_out_data;                                                      // crosser_008:out_data -> cmd_mux_015:sink0_data
	wire          crosser_008_out_ready;                                                     // cmd_mux_015:sink0_ready -> crosser_008:out_ready
	wire   [24:0] crosser_008_out_channel;                                                   // crosser_008:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_008_out_startofpacket;                                             // crosser_008:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                               // crosser_008:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                     // cmd_demux:src16_valid -> crosser_009:in_valid
	wire  [116:0] cmd_demux_src16_data;                                                      // cmd_demux:src16_data -> crosser_009:in_data
	wire          cmd_demux_src16_ready;                                                     // crosser_009:in_ready -> cmd_demux:src16_ready
	wire   [24:0] cmd_demux_src16_channel;                                                   // cmd_demux:src16_channel -> crosser_009:in_channel
	wire          cmd_demux_src16_startofpacket;                                             // cmd_demux:src16_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                               // cmd_demux:src16_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                     // crosser_009:out_valid -> cmd_mux_016:sink0_valid
	wire  [116:0] crosser_009_out_data;                                                      // crosser_009:out_data -> cmd_mux_016:sink0_data
	wire          crosser_009_out_ready;                                                     // cmd_mux_016:sink0_ready -> crosser_009:out_ready
	wire   [24:0] crosser_009_out_channel;                                                   // crosser_009:out_channel -> cmd_mux_016:sink0_channel
	wire          crosser_009_out_startofpacket;                                             // crosser_009:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                               // crosser_009:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                     // cmd_demux:src22_valid -> crosser_010:in_valid
	wire  [116:0] cmd_demux_src22_data;                                                      // cmd_demux:src22_data -> crosser_010:in_data
	wire          cmd_demux_src22_ready;                                                     // crosser_010:in_ready -> cmd_demux:src22_ready
	wire   [24:0] cmd_demux_src22_channel;                                                   // cmd_demux:src22_channel -> crosser_010:in_channel
	wire          cmd_demux_src22_startofpacket;                                             // cmd_demux:src22_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_src22_endofpacket;                                               // cmd_demux:src22_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                     // crosser_010:out_valid -> cmd_mux_022:sink0_valid
	wire  [116:0] crosser_010_out_data;                                                      // crosser_010:out_data -> cmd_mux_022:sink0_data
	wire          crosser_010_out_ready;                                                     // cmd_mux_022:sink0_ready -> crosser_010:out_ready
	wire   [24:0] crosser_010_out_channel;                                                   // crosser_010:out_channel -> cmd_mux_022:sink0_channel
	wire          crosser_010_out_startofpacket;                                             // crosser_010:out_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                               // crosser_010:out_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                     // cmd_demux:src23_valid -> crosser_011:in_valid
	wire  [116:0] cmd_demux_src23_data;                                                      // cmd_demux:src23_data -> crosser_011:in_data
	wire          cmd_demux_src23_ready;                                                     // crosser_011:in_ready -> cmd_demux:src23_ready
	wire   [24:0] cmd_demux_src23_channel;                                                   // cmd_demux:src23_channel -> crosser_011:in_channel
	wire          cmd_demux_src23_startofpacket;                                             // cmd_demux:src23_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_src23_endofpacket;                                               // cmd_demux:src23_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                     // crosser_011:out_valid -> cmd_mux_023:sink0_valid
	wire  [116:0] crosser_011_out_data;                                                      // crosser_011:out_data -> cmd_mux_023:sink0_data
	wire          crosser_011_out_ready;                                                     // cmd_mux_023:sink0_ready -> crosser_011:out_ready
	wire   [24:0] crosser_011_out_channel;                                                   // crosser_011:out_channel -> cmd_mux_023:sink0_channel
	wire          crosser_011_out_startofpacket;                                             // crosser_011:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                               // crosser_011:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                     // cmd_demux:src24_valid -> crosser_012:in_valid
	wire  [116:0] cmd_demux_src24_data;                                                      // cmd_demux:src24_data -> crosser_012:in_data
	wire          cmd_demux_src24_ready;                                                     // crosser_012:in_ready -> cmd_demux:src24_ready
	wire   [24:0] cmd_demux_src24_channel;                                                   // cmd_demux:src24_channel -> crosser_012:in_channel
	wire          cmd_demux_src24_startofpacket;                                             // cmd_demux:src24_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_src24_endofpacket;                                               // cmd_demux:src24_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                     // crosser_012:out_valid -> cmd_mux_024:sink0_valid
	wire  [116:0] crosser_012_out_data;                                                      // crosser_012:out_data -> cmd_mux_024:sink0_data
	wire          crosser_012_out_ready;                                                     // cmd_mux_024:sink0_ready -> crosser_012:out_ready
	wire   [24:0] crosser_012_out_channel;                                                   // crosser_012:out_channel -> cmd_mux_024:sink0_channel
	wire          crosser_012_out_startofpacket;                                             // crosser_012:out_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                               // crosser_012:out_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> crosser_013:in_valid
	wire  [116:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> crosser_013:in_data
	wire          cmd_demux_001_src1_ready;                                                  // crosser_013:in_ready -> cmd_demux_001:src1_ready
	wire   [24:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> crosser_013:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                     // crosser_013:out_valid -> cmd_mux_010:sink1_valid
	wire  [116:0] crosser_013_out_data;                                                      // crosser_013:out_data -> cmd_mux_010:sink1_data
	wire          crosser_013_out_ready;                                                     // cmd_mux_010:sink1_ready -> crosser_013:out_ready
	wire   [24:0] crosser_013_out_channel;                                                   // crosser_013:out_channel -> cmd_mux_010:sink1_channel
	wire          crosser_013_out_startofpacket;                                             // crosser_013:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          crosser_013_out_endofpacket;                                               // crosser_013:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> crosser_014:in_valid
	wire  [116:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> crosser_014:in_data
	wire          rsp_demux_002_src0_ready;                                                  // crosser_014:in_ready -> rsp_demux_002:src0_ready
	wire   [24:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                     // crosser_014:out_valid -> rsp_mux:sink2_valid
	wire  [116:0] crosser_014_out_data;                                                      // crosser_014:out_data -> rsp_mux:sink2_data
	wire          crosser_014_out_ready;                                                     // rsp_mux:sink2_ready -> crosser_014:out_ready
	wire   [24:0] crosser_014_out_channel;                                                   // crosser_014:out_channel -> rsp_mux:sink2_channel
	wire          crosser_014_out_startofpacket;                                             // crosser_014:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_014_out_endofpacket;                                               // crosser_014:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> crosser_015:in_valid
	wire  [116:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> crosser_015:in_data
	wire          rsp_demux_003_src0_ready;                                                  // crosser_015:in_ready -> rsp_demux_003:src0_ready
	wire   [24:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> crosser_015:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                     // crosser_015:out_valid -> rsp_mux:sink3_valid
	wire  [116:0] crosser_015_out_data;                                                      // crosser_015:out_data -> rsp_mux:sink3_data
	wire          crosser_015_out_ready;                                                     // rsp_mux:sink3_ready -> crosser_015:out_ready
	wire   [24:0] crosser_015_out_channel;                                                   // crosser_015:out_channel -> rsp_mux:sink3_channel
	wire          crosser_015_out_startofpacket;                                             // crosser_015:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_015_out_endofpacket;                                               // crosser_015:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> crosser_016:in_valid
	wire  [116:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> crosser_016:in_data
	wire          rsp_demux_004_src0_ready;                                                  // crosser_016:in_ready -> rsp_demux_004:src0_ready
	wire   [24:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                     // crosser_016:out_valid -> rsp_mux:sink4_valid
	wire  [116:0] crosser_016_out_data;                                                      // crosser_016:out_data -> rsp_mux:sink4_data
	wire          crosser_016_out_ready;                                                     // rsp_mux:sink4_ready -> crosser_016:out_ready
	wire   [24:0] crosser_016_out_channel;                                                   // crosser_016:out_channel -> rsp_mux:sink4_channel
	wire          crosser_016_out_startofpacket;                                             // crosser_016:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_016_out_endofpacket;                                               // crosser_016:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> crosser_017:in_valid
	wire  [116:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> crosser_017:in_data
	wire          rsp_demux_005_src0_ready;                                                  // crosser_017:in_ready -> rsp_demux_005:src0_ready
	wire   [24:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> crosser_017:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                     // crosser_017:out_valid -> rsp_mux:sink5_valid
	wire  [116:0] crosser_017_out_data;                                                      // crosser_017:out_data -> rsp_mux:sink5_data
	wire          crosser_017_out_ready;                                                     // rsp_mux:sink5_ready -> crosser_017:out_ready
	wire   [24:0] crosser_017_out_channel;                                                   // crosser_017:out_channel -> rsp_mux:sink5_channel
	wire          crosser_017_out_startofpacket;                                             // crosser_017:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_017_out_endofpacket;                                               // crosser_017:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> crosser_018:in_valid
	wire  [116:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> crosser_018:in_data
	wire          rsp_demux_007_src0_ready;                                                  // crosser_018:in_ready -> rsp_demux_007:src0_ready
	wire   [24:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                     // crosser_018:out_valid -> rsp_mux:sink7_valid
	wire  [116:0] crosser_018_out_data;                                                      // crosser_018:out_data -> rsp_mux:sink7_data
	wire          crosser_018_out_ready;                                                     // rsp_mux:sink7_ready -> crosser_018:out_ready
	wire   [24:0] crosser_018_out_channel;                                                   // crosser_018:out_channel -> rsp_mux:sink7_channel
	wire          crosser_018_out_startofpacket;                                             // crosser_018:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_018_out_endofpacket;                                               // crosser_018:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> crosser_019:in_valid
	wire  [116:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> crosser_019:in_data
	wire          rsp_demux_008_src0_ready;                                                  // crosser_019:in_ready -> rsp_demux_008:src0_ready
	wire   [24:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> crosser_019:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                     // crosser_019:out_valid -> rsp_mux:sink8_valid
	wire  [116:0] crosser_019_out_data;                                                      // crosser_019:out_data -> rsp_mux:sink8_data
	wire          crosser_019_out_ready;                                                     // rsp_mux:sink8_ready -> crosser_019:out_ready
	wire   [24:0] crosser_019_out_channel;                                                   // crosser_019:out_channel -> rsp_mux:sink8_channel
	wire          crosser_019_out_startofpacket;                                             // crosser_019:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_019_out_endofpacket;                                               // crosser_019:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> crosser_020:in_valid
	wire  [116:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> crosser_020:in_data
	wire          rsp_demux_009_src0_ready;                                                  // crosser_020:in_ready -> rsp_demux_009:src0_ready
	wire   [24:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> crosser_020:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                     // crosser_020:out_valid -> rsp_mux:sink9_valid
	wire  [116:0] crosser_020_out_data;                                                      // crosser_020:out_data -> rsp_mux:sink9_data
	wire          crosser_020_out_ready;                                                     // rsp_mux:sink9_ready -> crosser_020:out_ready
	wire   [24:0] crosser_020_out_channel;                                                   // crosser_020:out_channel -> rsp_mux:sink9_channel
	wire          crosser_020_out_startofpacket;                                             // crosser_020:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_020_out_endofpacket;                                               // crosser_020:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> crosser_021:in_valid
	wire  [116:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> crosser_021:in_data
	wire          rsp_demux_010_src0_ready;                                                  // crosser_021:in_ready -> rsp_demux_010:src0_ready
	wire   [24:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> crosser_021:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                     // crosser_021:out_valid -> rsp_mux:sink10_valid
	wire  [116:0] crosser_021_out_data;                                                      // crosser_021:out_data -> rsp_mux:sink10_data
	wire          crosser_021_out_ready;                                                     // rsp_mux:sink10_ready -> crosser_021:out_ready
	wire   [24:0] crosser_021_out_channel;                                                   // crosser_021:out_channel -> rsp_mux:sink10_channel
	wire          crosser_021_out_startofpacket;                                             // crosser_021:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          crosser_021_out_endofpacket;                                               // crosser_021:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                  // rsp_demux_010:src1_valid -> crosser_022:in_valid
	wire  [116:0] rsp_demux_010_src1_data;                                                   // rsp_demux_010:src1_data -> crosser_022:in_data
	wire          rsp_demux_010_src1_ready;                                                  // crosser_022:in_ready -> rsp_demux_010:src1_ready
	wire   [24:0] rsp_demux_010_src1_channel;                                                // rsp_demux_010:src1_channel -> crosser_022:in_channel
	wire          rsp_demux_010_src1_startofpacket;                                          // rsp_demux_010:src1_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                            // rsp_demux_010:src1_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                     // crosser_022:out_valid -> rsp_mux_001:sink1_valid
	wire  [116:0] crosser_022_out_data;                                                      // crosser_022:out_data -> rsp_mux_001:sink1_data
	wire          crosser_022_out_ready;                                                     // rsp_mux_001:sink1_ready -> crosser_022:out_ready
	wire   [24:0] crosser_022_out_channel;                                                   // crosser_022:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_022_out_startofpacket;                                             // crosser_022:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_022_out_endofpacket;                                               // crosser_022:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> crosser_023:in_valid
	wire  [116:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> crosser_023:in_data
	wire          rsp_demux_015_src0_ready;                                                  // crosser_023:in_ready -> rsp_demux_015:src0_ready
	wire   [24:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> crosser_023:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                     // crosser_023:out_valid -> rsp_mux:sink15_valid
	wire  [116:0] crosser_023_out_data;                                                      // crosser_023:out_data -> rsp_mux:sink15_data
	wire          crosser_023_out_ready;                                                     // rsp_mux:sink15_ready -> crosser_023:out_ready
	wire   [24:0] crosser_023_out_channel;                                                   // crosser_023:out_channel -> rsp_mux:sink15_channel
	wire          crosser_023_out_startofpacket;                                             // crosser_023:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          crosser_023_out_endofpacket;                                               // crosser_023:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> crosser_024:in_valid
	wire  [116:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> crosser_024:in_data
	wire          rsp_demux_016_src0_ready;                                                  // crosser_024:in_ready -> rsp_demux_016:src0_ready
	wire   [24:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> crosser_024:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> crosser_024:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                     // crosser_024:out_valid -> rsp_mux:sink16_valid
	wire  [116:0] crosser_024_out_data;                                                      // crosser_024:out_data -> rsp_mux:sink16_data
	wire          crosser_024_out_ready;                                                     // rsp_mux:sink16_ready -> crosser_024:out_ready
	wire   [24:0] crosser_024_out_channel;                                                   // crosser_024:out_channel -> rsp_mux:sink16_channel
	wire          crosser_024_out_startofpacket;                                             // crosser_024:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          crosser_024_out_endofpacket;                                               // crosser_024:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_022_src0_valid;                                                  // rsp_demux_022:src0_valid -> crosser_025:in_valid
	wire  [116:0] rsp_demux_022_src0_data;                                                   // rsp_demux_022:src0_data -> crosser_025:in_data
	wire          rsp_demux_022_src0_ready;                                                  // crosser_025:in_ready -> rsp_demux_022:src0_ready
	wire   [24:0] rsp_demux_022_src0_channel;                                                // rsp_demux_022:src0_channel -> crosser_025:in_channel
	wire          rsp_demux_022_src0_startofpacket;                                          // rsp_demux_022:src0_startofpacket -> crosser_025:in_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                            // rsp_demux_022:src0_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                     // crosser_025:out_valid -> rsp_mux:sink22_valid
	wire  [116:0] crosser_025_out_data;                                                      // crosser_025:out_data -> rsp_mux:sink22_data
	wire          crosser_025_out_ready;                                                     // rsp_mux:sink22_ready -> crosser_025:out_ready
	wire   [24:0] crosser_025_out_channel;                                                   // crosser_025:out_channel -> rsp_mux:sink22_channel
	wire          crosser_025_out_startofpacket;                                             // crosser_025:out_startofpacket -> rsp_mux:sink22_startofpacket
	wire          crosser_025_out_endofpacket;                                               // crosser_025:out_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                  // rsp_demux_023:src0_valid -> crosser_026:in_valid
	wire  [116:0] rsp_demux_023_src0_data;                                                   // rsp_demux_023:src0_data -> crosser_026:in_data
	wire          rsp_demux_023_src0_ready;                                                  // crosser_026:in_ready -> rsp_demux_023:src0_ready
	wire   [24:0] rsp_demux_023_src0_channel;                                                // rsp_demux_023:src0_channel -> crosser_026:in_channel
	wire          rsp_demux_023_src0_startofpacket;                                          // rsp_demux_023:src0_startofpacket -> crosser_026:in_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                            // rsp_demux_023:src0_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                                     // crosser_026:out_valid -> rsp_mux:sink23_valid
	wire  [116:0] crosser_026_out_data;                                                      // crosser_026:out_data -> rsp_mux:sink23_data
	wire          crosser_026_out_ready;                                                     // rsp_mux:sink23_ready -> crosser_026:out_ready
	wire   [24:0] crosser_026_out_channel;                                                   // crosser_026:out_channel -> rsp_mux:sink23_channel
	wire          crosser_026_out_startofpacket;                                             // crosser_026:out_startofpacket -> rsp_mux:sink23_startofpacket
	wire          crosser_026_out_endofpacket;                                               // crosser_026:out_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                  // rsp_demux_024:src0_valid -> crosser_027:in_valid
	wire  [116:0] rsp_demux_024_src0_data;                                                   // rsp_demux_024:src0_data -> crosser_027:in_data
	wire          rsp_demux_024_src0_ready;                                                  // crosser_027:in_ready -> rsp_demux_024:src0_ready
	wire   [24:0] rsp_demux_024_src0_channel;                                                // rsp_demux_024:src0_channel -> crosser_027:in_channel
	wire          rsp_demux_024_src0_startofpacket;                                          // rsp_demux_024:src0_startofpacket -> crosser_027:in_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                            // rsp_demux_024:src0_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                                     // crosser_027:out_valid -> rsp_mux:sink24_valid
	wire  [116:0] crosser_027_out_data;                                                      // crosser_027:out_data -> rsp_mux:sink24_data
	wire          crosser_027_out_ready;                                                     // rsp_mux:sink24_ready -> crosser_027:out_ready
	wire   [24:0] crosser_027_out_channel;                                                   // crosser_027:out_channel -> rsp_mux:sink24_channel
	wire          crosser_027_out_startofpacket;                                             // crosser_027:out_startofpacket -> rsp_mux:sink24_startofpacket
	wire          crosser_027_out_endofpacket;                                               // crosser_027:out_endofpacket -> rsp_mux:sink24_endofpacket
	wire    [0:0] cpu_data_master_limiter_cmd_src_valid;                                     // cpu_data_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [116:0] cpu_data_master_limiter_cmd_src_data;                                      // cpu_data_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                     // limiter_pipeline:in_ready -> cpu_data_master_limiter:cmd_src_ready
	wire   [24:0] cpu_data_master_limiter_cmd_src_channel;                                   // cpu_data_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                             // cpu_data_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                               // cpu_data_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                            // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [116:0] limiter_pipeline_source0_data;                                             // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                            // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [24:0] limiter_pipeline_source0_channel;                                          // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                    // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                      // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [116:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                         // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [24:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                        // limiter_pipeline_001:out_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_001_source0_data;                                         // limiter_pipeline_001:out_data -> cpu_data_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                        // cpu_data_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [24:0] limiter_pipeline_001_source0_channel;                                      // limiter_pipeline_001:out_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                // limiter_pipeline_001:out_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                  // limiter_pipeline_001:out_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_instruction_master_limiter_cmd_src_valid;                              // cpu_instruction_master_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [116:0] cpu_instruction_master_limiter_cmd_src_data;                               // cpu_instruction_master_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                              // limiter_pipeline_002:in_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [24:0] cpu_instruction_master_limiter_cmd_src_channel;                            // cpu_instruction_master_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                        // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [116:0] limiter_pipeline_002_source0_data;                                         // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                        // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire   [24:0] limiter_pipeline_002_source0_channel;                                      // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                  // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [116:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                     // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire   [24:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                        // limiter_pipeline_003:out_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_003_source0_data;                                         // limiter_pipeline_003:out_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                        // cpu_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire   [24:0] limiter_pipeline_003_source0_channel;                                      // limiter_pipeline_003:out_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                // limiter_pipeline_003:out_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                  // limiter_pipeline_003:out_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (clk_50_clk_clk),                                                     //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clk_50_clk_clk),                                                            //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_to_sdram_translator (
		.clk                    (pll_outclk0_clk),                                                 //                       clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (vga_to_sdram_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (vga_to_sdram_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (vga_to_sdram_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (vga_to_sdram_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (vga_to_sdram_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (vga_to_sdram_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (vga_to_sdram_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (vga_to_sdram_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (vga_to_sdram_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (vga_to_sdram_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (vga_to_sdram_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (vga_to_sdram_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (vga_to_sdram_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (vga_to_sdram_burstcount),                                         //                          .burstcount
		.av_read                (vga_to_sdram_read),                                               //                          .read
		.av_readdata            (vga_to_sdram_readdata),                                           //                          .readdata
		.av_readdatavalid       (vga_to_sdram_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_write               (1'b0),                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_50_clk_clk),                                     //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_50_clk_clk),                                  //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_data_fregen_s1_translator (
		.clk                    (pll_outclk0_clk),                             //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (audio_data_fregen_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_data_fregen_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_data_fregen_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_data_fregen_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_data_fregen_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_data_fregen_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_data_fregen_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_data_fregen_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_data_fregen_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_data_fregen_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_data_fregen_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_data_fregen_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (audio_data_fregen_s1_write),                  //                         .write
		.av_readdata            (audio_data_fregen_s1_readdata),               //                         .readdata
		.av_writedata           (audio_data_fregen_s1_writedata),              //                         .writedata
		.av_chipselect          (audio_data_fregen_s1_chipselect),             //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_empty_s1_translator (
		.clk                    (pll_outclk0_clk),                         //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_empty_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (audio_empty_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (audio_empty_s1_agent_m0_read),            //                         .read
		.uav_write              (audio_empty_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (audio_empty_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (audio_empty_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (audio_empty_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (audio_empty_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (audio_empty_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (audio_empty_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (audio_empty_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (audio_empty_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (audio_empty_s1_readdata),                 //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_fifo_full_s1_translator (
		.clk                    (pll_outclk0_clk),                           //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (audio_fifo_full_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_fifo_full_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_fifo_full_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_fifo_full_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_fifo_full_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_fifo_full_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_fifo_full_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_fifo_full_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_fifo_full_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_fifo_full_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_fifo_full_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_fifo_full_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (audio_fifo_full_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_fifo_used_s1_translator (
		.clk                    (pll_outclk0_clk),                           //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (audio_fifo_used_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_fifo_used_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_fifo_used_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_fifo_used_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_fifo_used_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_fifo_used_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_fifo_used_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_fifo_used_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_fifo_used_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_fifo_used_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_fifo_used_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_fifo_used_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (audio_fifo_used_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata            (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_out_data_audio_s1_translator (
		.clk                    (pll_outclk0_clk),                                //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (audio_out_data_audio_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_out_data_audio_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_out_data_audio_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_out_data_audio_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_out_data_audio_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_out_data_audio_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_out_data_audio_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_out_data_audio_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_out_data_audio_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_out_data_audio_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_out_data_audio_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_out_data_audio_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (audio_out_data_audio_s1_write),                  //                         .write
		.av_readdata            (audio_out_data_audio_s1_readdata),               //                         .readdata
		.av_writedata           (audio_out_data_audio_s1_writedata),              //                         .writedata
		.av_chipselect          (audio_out_data_audio_s1_chipselect),             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_out_pause_s1_translator (
		.clk                    (pll_outclk0_clk),                           //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (audio_out_pause_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_out_pause_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_out_pause_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_out_pause_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_out_pause_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_out_pause_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_out_pause_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_out_pause_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_out_pause_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_out_pause_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_out_pause_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_out_pause_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (audio_out_pause_s1_write),                  //                         .write
		.av_readdata            (audio_out_pause_s1_readdata),               //                         .readdata
		.av_writedata           (audio_out_pause_s1_writedata),              //                         .writedata
		.av_chipselect          (audio_out_pause_s1_chipselect),             //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_out_stop_s1_translator (
		.clk                    (pll_outclk0_clk),                          //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (audio_out_stop_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_out_stop_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_out_stop_s1_agent_m0_read),          //                         .read
		.uav_write              (audio_out_stop_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_out_stop_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_out_stop_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_out_stop_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_out_stop_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_out_stop_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_out_stop_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_out_stop_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (audio_out_stop_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (audio_out_stop_s1_write),                  //                         .write
		.av_readdata            (audio_out_stop_s1_readdata),               //                         .readdata
		.av_writedata           (audio_out_stop_s1_writedata),              //                         .writedata
		.av_chipselect          (audio_out_stop_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (pll_outclk0_clk),                         //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                          //                         .write
		.av_read                (sdram_s1_read),                           //                         .read
		.av_readdata            (sdram_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                      //                         .read
		.uav_write              (timer_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (timer_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                              //                         .write
		.av_readdata            (timer_s1_readdata),                           //                         .readdata
		.av_writedata           (timer_s1_writedata),                          //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                        //                         .read
		.uav_write              (key_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (key_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                                //                         .write
		.av_readdata            (key_s1_readdata),                             //                         .readdata
		.av_writedata           (key_s1_writedata),                            //                         .writedata
		.av_chipselect          (key_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) signal_selector_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (signal_selector_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (signal_selector_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (signal_selector_s1_agent_m0_read),            //                         .read
		.uav_write              (signal_selector_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (signal_selector_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (signal_selector_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (signal_selector_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (signal_selector_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (signal_selector_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (signal_selector_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (signal_selector_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (signal_selector_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (signal_selector_s1_write),                    //                         .write
		.av_readdata            (signal_selector_s1_readdata),                 //                         .readdata
		.av_writedata           (signal_selector_s1_writedata),                //                         .writedata
		.av_chipselect          (signal_selector_s1_chipselect),               //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modulation_selector_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (modulation_selector_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (modulation_selector_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (modulation_selector_s1_agent_m0_read),          //                         .read
		.uav_write              (modulation_selector_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (modulation_selector_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (modulation_selector_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (modulation_selector_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (modulation_selector_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (modulation_selector_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (modulation_selector_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (modulation_selector_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (modulation_selector_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (modulation_selector_s1_write),                  //                         .write
		.av_readdata            (modulation_selector_s1_readdata),               //                         .readdata
		.av_writedata           (modulation_selector_s1_writedata),              //                         .writedata
		.av_chipselect          (modulation_selector_s1_chipselect),             //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keyboard_keys_s1_translator (
		.clk                    (pll_outclk2_clk),                                 //                      clk.clk
		.reset                  (keyboard_keys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keyboard_keys_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (keyboard_keys_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (keyboard_keys_s1_agent_m0_read),                  //                         .read
		.uav_write              (keyboard_keys_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (keyboard_keys_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (keyboard_keys_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (keyboard_keys_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (keyboard_keys_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (keyboard_keys_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (keyboard_keys_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (keyboard_keys_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (keyboard_keys_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (keyboard_keys_s1_readdata),                       //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mouse_pos_s1_translator (
		.clk                    (vga_clk_bridge_out_out_clk_1_clk),            //                      clk.clk
		.reset                  (mouse_pos_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mouse_pos_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (mouse_pos_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (mouse_pos_s1_agent_m0_read),                  //                         .read
		.uav_write              (mouse_pos_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (mouse_pos_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (mouse_pos_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (mouse_pos_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (mouse_pos_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (mouse_pos_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (mouse_pos_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (mouse_pos_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (mouse_pos_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (mouse_pos_s1_readdata),                       //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) div_freq_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (div_freq_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (div_freq_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (div_freq_s1_agent_m0_read),                   //                         .read
		.uav_write              (div_freq_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (div_freq_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (div_freq_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (div_freq_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (div_freq_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (div_freq_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (div_freq_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (div_freq_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (div_freq_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (div_freq_s1_write),                           //                         .write
		.av_readdata            (div_freq_s1_readdata),                        //                         .readdata
		.av_writedata           (div_freq_s1_writedata),                       //                         .writedata
		.av_chipselect          (div_freq_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_sel_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_sel_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (audio_sel_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (audio_sel_s1_agent_m0_read),                  //                         .read
		.uav_write              (audio_sel_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (audio_sel_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (audio_sel_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (audio_sel_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (audio_sel_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (audio_sel_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (audio_sel_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (audio_sel_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (audio_sel_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (audio_sel_s1_write),                          //                         .write
		.av_readdata            (audio_sel_s1_readdata),                       //                         .readdata
		.av_writedata           (audio_sel_s1_writedata),                      //                         .writedata
		.av_chipselect          (audio_sel_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lfsr_clk_interrupt_gen_s1_translator (
		.clk                    (clk_50_clk_clk),                                   //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (lfsr_clk_interrupt_gen_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lfsr_clk_interrupt_gen_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lfsr_clk_interrupt_gen_s1_agent_m0_read),          //                         .read
		.uav_write              (lfsr_clk_interrupt_gen_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lfsr_clk_interrupt_gen_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lfsr_clk_interrupt_gen_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lfsr_clk_interrupt_gen_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lfsr_clk_interrupt_gen_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lfsr_clk_interrupt_gen_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lfsr_clk_interrupt_gen_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lfsr_clk_interrupt_gen_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (lfsr_clk_interrupt_gen_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (lfsr_clk_interrupt_gen_s1_write),                  //                         .write
		.av_readdata            (lfsr_clk_interrupt_gen_s1_readdata),               //                         .readdata
		.av_writedata           (lfsr_clk_interrupt_gen_s1_writedata),              //                         .writedata
		.av_chipselect          (lfsr_clk_interrupt_gen_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lfsr_val_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lfsr_val_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (lfsr_val_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (lfsr_val_s1_agent_m0_read),                   //                         .read
		.uav_write              (lfsr_val_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (lfsr_val_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (lfsr_val_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (lfsr_val_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (lfsr_val_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (lfsr_val_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (lfsr_val_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (lfsr_val_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (lfsr_val_s1_address),                         //      avalon_anti_slave_0.address
		.av_readdata            (lfsr_val_s1_readdata),                        //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dds_increment_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dds_increment_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (dds_increment_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (dds_increment_s1_agent_m0_read),              //                         .read
		.uav_write              (dds_increment_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (dds_increment_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (dds_increment_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (dds_increment_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (dds_increment_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (dds_increment_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (dds_increment_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (dds_increment_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (dds_increment_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (dds_increment_s1_write),                      //                         .write
		.av_readdata            (dds_increment_s1_readdata),                   //                         .readdata
		.av_writedata           (dds_increment_s1_writedata),                  //                         .writedata
		.av_chipselect          (dds_increment_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_to_nios_2_datamaster_translator (
		.clk                    (pll_outclk0_clk),                                 //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (vga_to_nios_2_datamaster_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_to_nios_2_datamaster_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_to_nios_2_datamaster_agent_m0_read),          //                         .read
		.uav_write              (vga_to_nios_2_datamaster_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_to_nios_2_datamaster_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_to_nios_2_datamaster_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_to_nios_2_datamaster_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_to_nios_2_datamaster_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_to_nios_2_datamaster_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_to_nios_2_datamaster_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_to_nios_2_datamaster_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (vga_to_nios_2_datamaster_address),                //      avalon_anti_slave_0.address
		.av_write               (vga_to_nios_2_datamaster_write),                  //                         .write
		.av_read                (vga_to_nios_2_datamaster_read),                   //                         .read
		.av_readdata            (vga_to_nios_2_datamaster_readdata),               //                         .readdata
		.av_writedata           (vga_to_nios_2_datamaster_writedata),              //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_wrclk_s1_translator (
		.clk                    (pll_outclk0_clk),                         //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_wrclk_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (audio_wrclk_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (audio_wrclk_s1_agent_m0_read),            //                         .read
		.uav_write              (audio_wrclk_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (audio_wrclk_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (audio_wrclk_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (audio_wrclk_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (audio_wrclk_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (audio_wrclk_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (audio_wrclk_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (audio_wrclk_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (audio_wrclk_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (audio_wrclk_s1_write),                    //                         .write
		.av_readdata            (audio_wrclk_s1_readdata),                 //                         .readdata
		.av_writedata           (audio_wrclk_s1_writedata),                //                         .writedata
		.av_chipselect          (audio_wrclk_s1_chipselect),               //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_wrreq_s1_translator (
		.clk                    (pll_outclk0_clk),                         //                      clk.clk
		.reset                  (audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_wrreq_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (audio_wrreq_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (audio_wrreq_s1_agent_m0_read),            //                         .read
		.uav_write              (audio_wrreq_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (audio_wrreq_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (audio_wrreq_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (audio_wrreq_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (audio_wrreq_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (audio_wrreq_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (audio_wrreq_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (audio_wrreq_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (audio_wrreq_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (audio_wrreq_s1_write),                    //                         .write
		.av_readdata            (audio_wrreq_s1_readdata),                 //                         .readdata
		.av_writedata           (audio_wrreq_s1_writedata),                //                         .writedata
		.av_chipselect          (audio_wrreq_s1_chipselect),               //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clk_50_clk_clk),                                                     //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clk_50_clk_clk),                                                            //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_to_sdram_agent (
		.clk                   (pll_outclk0_clk),                                                 //       clk.clk
		.reset                 (audio_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (vga_to_sdram_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (vga_to_sdram_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (vga_to_sdram_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (vga_to_sdram_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (vga_to_sdram_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (vga_to_sdram_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (vga_to_sdram_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (vga_to_sdram_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (vga_to_sdram_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (vga_to_sdram_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (vga_to_sdram_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (vga_to_sdram_agent_cp_valid),                                     //        cp.valid
		.cp_data               (vga_to_sdram_agent_cp_data),                                      //          .data
		.cp_startofpacket      (vga_to_sdram_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (vga_to_sdram_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (vga_to_sdram_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                           //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                            //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                         //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                     //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                           //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                         //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                            //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_control_slave_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_control_slave_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_control_slave_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_data_fregen_s1_agent (
		.clk                     (pll_outclk0_clk),                                       //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (audio_data_fregen_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_data_fregen_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_data_fregen_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_data_fregen_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_data_fregen_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_data_fregen_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_data_fregen_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_data_fregen_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_data_fregen_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_data_fregen_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_data_fregen_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_data_fregen_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_data_fregen_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_data_fregen_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_data_fregen_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_data_fregen_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                               //                .channel
		.rf_sink_ready           (audio_data_fregen_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_data_fregen_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_data_fregen_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_data_fregen_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_data_fregen_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_data_fregen_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_data_fregen_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_data_fregen_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_data_fregen_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_data_fregen_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_data_fregen_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_data_fregen_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_data_fregen_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_data_fregen_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_data_fregen_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_data_fregen_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_data_fregen_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                       //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (audio_data_fregen_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_data_fregen_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_data_fregen_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_data_fregen_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_data_fregen_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_data_fregen_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_data_fregen_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_data_fregen_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_data_fregen_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_data_fregen_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_data_fregen_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                 //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (audio_data_fregen_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_data_fregen_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_data_fregen_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_data_fregen_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_data_fregen_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_data_fregen_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_empty_s1_agent (
		.clk                     (pll_outclk0_clk),                                 //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (audio_empty_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_empty_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_empty_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_empty_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_empty_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_empty_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_empty_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_empty_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_empty_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_empty_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_empty_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_empty_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_empty_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_empty_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_empty_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_empty_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                         //                .channel
		.rf_sink_ready           (audio_empty_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_empty_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_empty_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_empty_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_empty_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_empty_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_empty_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_empty_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_empty_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_empty_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_empty_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_empty_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_empty_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_empty_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_empty_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_empty_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_empty_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                 //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (audio_empty_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_empty_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_empty_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_empty_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_empty_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_empty_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_empty_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_empty_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_empty_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_empty_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_empty_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                           //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (audio_empty_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_empty_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_empty_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_empty_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_empty_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_empty_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_fifo_full_s1_agent (
		.clk                     (pll_outclk0_clk),                                     //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (audio_fifo_full_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_fifo_full_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_fifo_full_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_fifo_full_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_fifo_full_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_fifo_full_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_fifo_full_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_fifo_full_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_fifo_full_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_fifo_full_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_fifo_full_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_fifo_full_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_fifo_full_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_fifo_full_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_fifo_full_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_fifo_full_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (audio_fifo_full_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_fifo_full_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_fifo_full_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_fifo_full_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_fifo_full_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_fifo_full_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_fifo_full_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_fifo_full_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_fifo_full_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_fifo_full_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_fifo_full_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_fifo_full_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_fifo_full_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_fifo_full_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_fifo_full_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_fifo_full_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_fifo_full_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                     //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (audio_fifo_full_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_fifo_full_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_fifo_full_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_fifo_full_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_fifo_full_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_fifo_full_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_fifo_full_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_fifo_full_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_fifo_full_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_fifo_full_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_fifo_full_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                               //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (audio_fifo_full_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_fifo_full_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_fifo_full_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_fifo_full_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_fifo_full_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_fifo_full_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_fifo_used_s1_agent (
		.clk                     (pll_outclk0_clk),                                     //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (audio_fifo_used_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_fifo_used_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_fifo_used_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_fifo_used_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_fifo_used_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_fifo_used_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_fifo_used_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_fifo_used_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_fifo_used_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_fifo_used_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_fifo_used_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_fifo_used_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_fifo_used_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_fifo_used_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_fifo_used_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_fifo_used_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (audio_fifo_used_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_fifo_used_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_fifo_used_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_fifo_used_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_fifo_used_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_fifo_used_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_fifo_used_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_fifo_used_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_fifo_used_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_fifo_used_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_fifo_used_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_fifo_used_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_fifo_used_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_fifo_used_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_fifo_used_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_fifo_used_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_fifo_used_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                     //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (audio_fifo_used_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_fifo_used_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_fifo_used_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_fifo_used_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_fifo_used_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_fifo_used_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_fifo_used_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_fifo_used_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_fifo_used_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_fifo_used_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_fifo_used_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                               //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (audio_fifo_used_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_fifo_used_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_fifo_used_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_fifo_used_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_fifo_used_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_fifo_used_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_50_clk_clk),                                         //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_jtag_debug_module_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_out_data_audio_s1_agent (
		.clk                     (pll_outclk0_clk),                                          //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (audio_out_data_audio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_out_data_audio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_out_data_audio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_out_data_audio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_out_data_audio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_out_data_audio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_out_data_audio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_out_data_audio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_out_data_audio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_out_data_audio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_out_data_audio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_out_data_audio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_out_data_audio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_out_data_audio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_out_data_audio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_out_data_audio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                  //                .channel
		.rf_sink_ready           (audio_out_data_audio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_out_data_audio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_out_data_audio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_out_data_audio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_out_data_audio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_out_data_audio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_out_data_audio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_out_data_audio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_out_data_audio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_out_data_audio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_out_data_audio_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_out_data_audio_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_out_data_audio_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_out_data_audio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_out_data_audio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_out_data_audio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_data_audio_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                          //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (audio_out_data_audio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_out_data_audio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_out_data_audio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_out_data_audio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_out_data_audio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_out_data_audio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_out_data_audio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_out_data_audio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_out_data_audio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_out_data_audio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_data_audio_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                    //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (audio_out_data_audio_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_out_data_audio_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_out_data_audio_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_out_data_audio_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_out_data_audio_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_out_data_audio_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_out_pause_s1_agent (
		.clk                     (pll_outclk0_clk),                                     //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (audio_out_pause_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_out_pause_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_out_pause_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_out_pause_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_out_pause_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_out_pause_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_out_pause_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_out_pause_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_out_pause_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_out_pause_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_out_pause_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_out_pause_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_out_pause_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_out_pause_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_out_pause_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_out_pause_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                             //                .channel
		.rf_sink_ready           (audio_out_pause_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_out_pause_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_out_pause_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_out_pause_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_out_pause_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_out_pause_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_out_pause_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_out_pause_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_out_pause_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_out_pause_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_out_pause_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_out_pause_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_out_pause_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_out_pause_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_out_pause_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_out_pause_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_pause_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                     //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (audio_out_pause_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_out_pause_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_out_pause_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_out_pause_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_out_pause_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_out_pause_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_out_pause_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_out_pause_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_out_pause_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_out_pause_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_pause_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                               //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (audio_out_pause_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_out_pause_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_out_pause_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_out_pause_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_out_pause_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_out_pause_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_out_stop_s1_agent (
		.clk                     (pll_outclk0_clk),                                    //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (audio_out_stop_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_out_stop_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_out_stop_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_out_stop_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_out_stop_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_out_stop_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_out_stop_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_out_stop_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_out_stop_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_out_stop_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_out_stop_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_out_stop_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_out_stop_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_out_stop_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_out_stop_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_out_stop_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_009_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                            //                .channel
		.rf_sink_ready           (audio_out_stop_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_out_stop_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_out_stop_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_out_stop_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_out_stop_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_out_stop_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_out_stop_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_out_stop_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_out_stop_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_out_stop_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_out_stop_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_out_stop_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_out_stop_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_out_stop_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_out_stop_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_out_stop_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_stop_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                    //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (audio_out_stop_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_out_stop_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_out_stop_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_out_stop_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_out_stop_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_out_stop_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_out_stop_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_out_stop_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_out_stop_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_out_stop_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_stop_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                              //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (audio_out_stop_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_out_stop_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_out_stop_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_out_stop_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_out_stop_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_out_stop_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (pll_outclk0_clk),                              //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                           //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                         //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) timer_s1_agent (
		.clk                     (clk_50_clk_clk),                              //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_011_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                     //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (timer_s1_agent_rdata_fifo_out_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (timer_s1_agent_rdata_fifo_out_valid),         //                .valid
		.rdata_fifo_sink_data    (timer_s1_agent_rdata_fifo_out_data),          //                .data
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (timer_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (timer_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (timer_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (timer_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (timer_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) key_s1_agent (
		.clk                     (clk_50_clk_clk),                              //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (key_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (key_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_012_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                     //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (key_s1_agent_rdata_fifo_out_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (key_s1_agent_rdata_fifo_out_valid),           //                .valid
		.rdata_fifo_sink_data    (key_s1_agent_rdata_fifo_out_data),            //                .data
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (key_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (key_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (key_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (key_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (key_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) signal_selector_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (signal_selector_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (signal_selector_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (signal_selector_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (signal_selector_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (signal_selector_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (signal_selector_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (signal_selector_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (signal_selector_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (signal_selector_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (signal_selector_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (signal_selector_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (signal_selector_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (signal_selector_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (signal_selector_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (signal_selector_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (signal_selector_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (signal_selector_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (signal_selector_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (signal_selector_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (signal_selector_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (signal_selector_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (signal_selector_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (signal_selector_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (signal_selector_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (signal_selector_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (signal_selector_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (signal_selector_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (signal_selector_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (signal_selector_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (signal_selector_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (signal_selector_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (signal_selector_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) signal_selector_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (signal_selector_s1_agent_rf_source_data),             //        in.data
		.in_valid          (signal_selector_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (signal_selector_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (signal_selector_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (signal_selector_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (signal_selector_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (signal_selector_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (signal_selector_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (signal_selector_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (signal_selector_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) signal_selector_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (signal_selector_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (signal_selector_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (signal_selector_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (signal_selector_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (signal_selector_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (signal_selector_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) modulation_selector_s1_agent (
		.clk                     (clk_50_clk_clk),                                          //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (modulation_selector_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modulation_selector_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modulation_selector_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modulation_selector_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modulation_selector_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (modulation_selector_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modulation_selector_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modulation_selector_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (modulation_selector_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modulation_selector_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (modulation_selector_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (modulation_selector_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modulation_selector_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (modulation_selector_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (modulation_selector_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (modulation_selector_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                 //                .channel
		.rf_sink_ready           (modulation_selector_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modulation_selector_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modulation_selector_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modulation_selector_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modulation_selector_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modulation_selector_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modulation_selector_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modulation_selector_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modulation_selector_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modulation_selector_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (modulation_selector_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (modulation_selector_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (modulation_selector_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (modulation_selector_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modulation_selector_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modulation_selector_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modulation_selector_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                          //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (modulation_selector_s1_agent_rf_source_data),             //        in.data
		.in_valid          (modulation_selector_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (modulation_selector_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modulation_selector_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modulation_selector_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modulation_selector_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modulation_selector_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modulation_selector_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modulation_selector_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modulation_selector_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modulation_selector_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (modulation_selector_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modulation_selector_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modulation_selector_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modulation_selector_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modulation_selector_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modulation_selector_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) keyboard_keys_s1_agent (
		.clk                     (pll_outclk2_clk),                                   //             clk.clk
		.reset                   (keyboard_keys_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (keyboard_keys_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (keyboard_keys_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (keyboard_keys_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (keyboard_keys_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (keyboard_keys_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (keyboard_keys_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (keyboard_keys_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (keyboard_keys_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (keyboard_keys_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (keyboard_keys_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (keyboard_keys_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (keyboard_keys_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (keyboard_keys_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (keyboard_keys_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (keyboard_keys_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (keyboard_keys_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_015_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                           //                .channel
		.rf_sink_ready           (keyboard_keys_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (keyboard_keys_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (keyboard_keys_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (keyboard_keys_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (keyboard_keys_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (keyboard_keys_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (keyboard_keys_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (keyboard_keys_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (keyboard_keys_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (keyboard_keys_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (keyboard_keys_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (keyboard_keys_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (keyboard_keys_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (keyboard_keys_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keyboard_keys_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (keyboard_keys_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keyboard_keys_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                   //       clk.clk
		.reset             (keyboard_keys_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (keyboard_keys_s1_agent_rf_source_data),             //        in.data
		.in_valid          (keyboard_keys_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (keyboard_keys_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (keyboard_keys_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (keyboard_keys_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (keyboard_keys_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (keyboard_keys_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (keyboard_keys_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (keyboard_keys_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (keyboard_keys_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keyboard_keys_s1_agent_rdata_fifo (
		.clk               (pll_outclk2_clk),                                 //       clk.clk
		.reset             (keyboard_keys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keyboard_keys_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (keyboard_keys_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (keyboard_keys_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (keyboard_keys_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (keyboard_keys_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (keyboard_keys_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mouse_pos_s1_agent (
		.clk                     (vga_clk_bridge_out_out_clk_1_clk),              //             clk.clk
		.reset                   (mouse_pos_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (mouse_pos_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mouse_pos_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mouse_pos_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mouse_pos_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mouse_pos_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mouse_pos_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mouse_pos_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mouse_pos_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mouse_pos_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mouse_pos_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mouse_pos_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mouse_pos_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mouse_pos_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mouse_pos_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mouse_pos_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mouse_pos_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_016_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                       //                .channel
		.rf_sink_ready           (mouse_pos_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mouse_pos_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mouse_pos_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mouse_pos_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mouse_pos_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mouse_pos_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mouse_pos_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mouse_pos_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mouse_pos_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mouse_pos_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mouse_pos_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mouse_pos_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (mouse_pos_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (mouse_pos_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mouse_pos_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mouse_pos_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mouse_pos_s1_agent_rsp_fifo (
		.clk               (vga_clk_bridge_out_out_clk_1_clk),              //       clk.clk
		.reset             (mouse_pos_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (mouse_pos_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mouse_pos_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mouse_pos_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mouse_pos_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mouse_pos_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mouse_pos_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mouse_pos_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mouse_pos_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mouse_pos_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mouse_pos_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mouse_pos_s1_agent_rdata_fifo (
		.clk               (vga_clk_bridge_out_out_clk_1_clk),            //       clk.clk
		.reset             (mouse_pos_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mouse_pos_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (mouse_pos_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (mouse_pos_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (mouse_pos_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (mouse_pos_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (mouse_pos_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) div_freq_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (div_freq_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (div_freq_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (div_freq_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (div_freq_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (div_freq_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (div_freq_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (div_freq_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (div_freq_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (div_freq_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (div_freq_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (div_freq_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (div_freq_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (div_freq_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (div_freq_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (div_freq_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (div_freq_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_017_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                      //                .channel
		.rf_sink_ready           (div_freq_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (div_freq_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (div_freq_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (div_freq_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (div_freq_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (div_freq_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (div_freq_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (div_freq_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (div_freq_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (div_freq_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (div_freq_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (div_freq_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (div_freq_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (div_freq_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (div_freq_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (div_freq_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) div_freq_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (div_freq_s1_agent_rf_source_data),             //        in.data
		.in_valid          (div_freq_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (div_freq_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (div_freq_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (div_freq_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (div_freq_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (div_freq_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (div_freq_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (div_freq_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (div_freq_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) div_freq_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (div_freq_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (div_freq_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (div_freq_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (div_freq_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (div_freq_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (div_freq_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_sel_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (audio_sel_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_sel_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_sel_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_sel_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_sel_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_sel_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_sel_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_sel_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_sel_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_sel_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_sel_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_sel_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_sel_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_sel_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_sel_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_sel_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_018_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                       //                .channel
		.rf_sink_ready           (audio_sel_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_sel_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_sel_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_sel_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_sel_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_sel_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_sel_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_sel_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_sel_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_sel_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_sel_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_sel_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_sel_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_sel_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_sel_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_sel_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_sel_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (audio_sel_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_sel_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_sel_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_sel_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_sel_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_sel_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_sel_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_sel_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_sel_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_sel_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_sel_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_sel_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (audio_sel_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (audio_sel_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (audio_sel_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (audio_sel_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (audio_sel_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lfsr_clk_interrupt_gen_s1_agent (
		.clk                     (clk_50_clk_clk),                                             //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (lfsr_clk_interrupt_gen_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lfsr_clk_interrupt_gen_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lfsr_clk_interrupt_gen_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lfsr_clk_interrupt_gen_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lfsr_clk_interrupt_gen_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lfsr_clk_interrupt_gen_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lfsr_clk_interrupt_gen_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lfsr_clk_interrupt_gen_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lfsr_clk_interrupt_gen_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lfsr_clk_interrupt_gen_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lfsr_clk_interrupt_gen_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lfsr_clk_interrupt_gen_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lfsr_clk_interrupt_gen_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lfsr_clk_interrupt_gen_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lfsr_clk_interrupt_gen_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lfsr_clk_interrupt_gen_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                    //                .channel
		.rf_sink_ready           (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lfsr_clk_interrupt_gen_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lfsr_clk_interrupt_gen_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lfsr_clk_interrupt_gen_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lfsr_clk_interrupt_gen_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lfsr_clk_interrupt_gen_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lfsr_clk_interrupt_gen_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (lfsr_clk_interrupt_gen_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lfsr_clk_interrupt_gen_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lfsr_clk_interrupt_gen_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lfsr_clk_interrupt_gen_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lfsr_clk_interrupt_gen_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lfsr_clk_interrupt_gen_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lfsr_clk_interrupt_gen_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                       //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lfsr_clk_interrupt_gen_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lfsr_val_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (lfsr_val_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lfsr_val_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lfsr_val_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lfsr_val_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lfsr_val_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lfsr_val_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lfsr_val_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lfsr_val_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lfsr_val_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lfsr_val_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lfsr_val_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lfsr_val_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lfsr_val_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lfsr_val_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lfsr_val_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lfsr_val_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_020_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                      //                .channel
		.rf_sink_ready           (lfsr_val_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lfsr_val_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lfsr_val_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lfsr_val_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lfsr_val_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lfsr_val_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lfsr_val_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lfsr_val_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lfsr_val_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lfsr_val_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lfsr_val_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lfsr_val_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (lfsr_val_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (lfsr_val_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lfsr_val_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lfsr_val_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lfsr_val_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (lfsr_val_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lfsr_val_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lfsr_val_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lfsr_val_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lfsr_val_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lfsr_val_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lfsr_val_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lfsr_val_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lfsr_val_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lfsr_val_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lfsr_val_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lfsr_val_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (lfsr_val_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (lfsr_val_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (lfsr_val_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (lfsr_val_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (lfsr_val_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dds_increment_s1_agent (
		.clk                     (clk_50_clk_clk),                                    //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (dds_increment_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dds_increment_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dds_increment_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dds_increment_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dds_increment_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (dds_increment_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dds_increment_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dds_increment_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (dds_increment_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dds_increment_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (dds_increment_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (dds_increment_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dds_increment_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (dds_increment_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (dds_increment_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (dds_increment_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_021_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                           //                .channel
		.rf_sink_ready           (dds_increment_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dds_increment_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dds_increment_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dds_increment_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dds_increment_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dds_increment_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dds_increment_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dds_increment_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dds_increment_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dds_increment_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (dds_increment_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dds_increment_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (dds_increment_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (dds_increment_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dds_increment_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dds_increment_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds_increment_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (dds_increment_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dds_increment_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dds_increment_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dds_increment_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dds_increment_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dds_increment_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dds_increment_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dds_increment_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dds_increment_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dds_increment_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dds_increment_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dds_increment_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dds_increment_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dds_increment_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dds_increment_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dds_increment_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dds_increment_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_to_nios_2_datamaster_agent (
		.clk                     (pll_outclk0_clk),                                           //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (vga_to_nios_2_datamaster_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_to_nios_2_datamaster_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_to_nios_2_datamaster_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_to_nios_2_datamaster_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_to_nios_2_datamaster_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_to_nios_2_datamaster_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_to_nios_2_datamaster_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_to_nios_2_datamaster_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_to_nios_2_datamaster_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_to_nios_2_datamaster_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_to_nios_2_datamaster_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_to_nios_2_datamaster_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_to_nios_2_datamaster_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_to_nios_2_datamaster_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_to_nios_2_datamaster_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_to_nios_2_datamaster_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                   //                .channel
		.rf_sink_ready           (vga_to_nios_2_datamaster_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_to_nios_2_datamaster_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_to_nios_2_datamaster_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_to_nios_2_datamaster_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_to_nios_2_datamaster_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_to_nios_2_datamaster_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_to_nios_2_datamaster_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_to_nios_2_datamaster_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_to_nios_2_datamaster_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_to_nios_2_datamaster_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vga_to_nios_2_datamaster_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vga_to_nios_2_datamaster_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (vga_to_nios_2_datamaster_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (vga_to_nios_2_datamaster_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_to_nios_2_datamaster_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_to_nios_2_datamaster_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_to_nios_2_datamaster_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                           //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (vga_to_nios_2_datamaster_agent_rf_source_data),             //        in.data
		.in_valid          (vga_to_nios_2_datamaster_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_to_nios_2_datamaster_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_to_nios_2_datamaster_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_to_nios_2_datamaster_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_to_nios_2_datamaster_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_to_nios_2_datamaster_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_to_nios_2_datamaster_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_to_nios_2_datamaster_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_to_nios_2_datamaster_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_to_nios_2_datamaster_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                                     //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (vga_to_nios_2_datamaster_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_to_nios_2_datamaster_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_to_nios_2_datamaster_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_to_nios_2_datamaster_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_to_nios_2_datamaster_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_to_nios_2_datamaster_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_wrclk_s1_agent (
		.clk                     (pll_outclk0_clk),                                 //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (audio_wrclk_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_wrclk_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_wrclk_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_wrclk_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_wrclk_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_wrclk_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_wrclk_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_wrclk_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_wrclk_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_wrclk_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_wrclk_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_wrclk_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_wrclk_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_wrclk_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_wrclk_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_wrclk_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_023_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                         //                .channel
		.rf_sink_ready           (audio_wrclk_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_wrclk_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_wrclk_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_wrclk_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_wrclk_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_wrclk_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_wrclk_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_wrclk_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_wrclk_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_wrclk_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_wrclk_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_wrclk_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_wrclk_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_wrclk_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_wrclk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_wrclk_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_wrclk_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                 //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (audio_wrclk_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_wrclk_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_wrclk_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_wrclk_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_wrclk_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_wrclk_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_wrclk_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_wrclk_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_wrclk_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_wrclk_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_wrclk_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                           //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (audio_wrclk_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_wrclk_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_wrclk_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_wrclk_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_wrclk_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_wrclk_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_wrreq_s1_agent (
		.clk                     (pll_outclk0_clk),                                 //             clk.clk
		.reset                   (audio_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (audio_wrreq_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_wrreq_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_wrreq_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_wrreq_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_wrreq_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_wrreq_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_wrreq_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_wrreq_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_wrreq_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_wrreq_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_wrreq_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_wrreq_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_wrreq_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_wrreq_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_wrreq_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_wrreq_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_024_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                         //                .channel
		.rf_sink_ready           (audio_wrreq_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_wrreq_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_wrreq_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_wrreq_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_wrreq_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_wrreq_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_wrreq_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_wrreq_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_wrreq_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_wrreq_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_wrreq_s1_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_wrreq_s1_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_wrreq_s1_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (audio_wrreq_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_wrreq_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_wrreq_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_wrreq_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                                 //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (audio_wrreq_s1_agent_rf_source_data),             //        in.data
		.in_valid          (audio_wrreq_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_wrreq_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_wrreq_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_wrreq_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_wrreq_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_wrreq_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_wrreq_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_wrreq_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_wrreq_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_wrreq_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                           //       clk.clk
		.reset             (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (audio_wrreq_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_wrreq_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_wrreq_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_wrreq_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_wrreq_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_wrreq_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	DE1_SoC_QSYS_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                        //       src.ready
		.src_valid          (router_src_valid),                        //          .valid
		.src_data           (router_src_data),                         //          .data
		.src_channel        (router_src_channel),                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (vga_to_sdram_agent_cp_ready),             //      sink.ready
		.sink_valid         (vga_to_sdram_agent_cp_valid),             //          .valid
		.sink_data          (vga_to_sdram_agent_cp_data),              //          .data
		.sink_startofpacket (vga_to_sdram_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (vga_to_sdram_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                     //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (audio_data_fregen_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_data_fregen_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_data_fregen_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_data_fregen_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_data_fregen_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                             //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_005_src_ready),                        //       src.ready
		.src_valid          (router_005_src_valid),                        //          .valid
		.src_data           (router_005_src_data),                         //          .data
		.src_channel        (router_005_src_channel),                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (audio_empty_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (audio_empty_s1_agent_rp_valid),           //          .valid
		.sink_data          (audio_empty_s1_agent_rp_data),            //          .data
		.sink_startofpacket (audio_empty_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_empty_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (audio_fifo_full_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_fifo_full_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_fifo_full_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_fifo_full_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_fifo_full_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                           //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_007_src_ready),                      //       src.ready
		.src_valid          (router_007_src_valid),                      //          .valid
		.src_data           (router_007_src_data),                       //          .data
		.src_channel        (router_007_src_channel),                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                 //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (audio_fifo_used_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_fifo_used_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_fifo_used_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_fifo_used_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_fifo_used_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                           //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_008_src_ready),                      //       src.ready
		.src_valid          (router_008_src_valid),                      //          .valid
		.src_data           (router_008_src_data),                       //          .data
		.src_channel        (router_008_src_channel),                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                 //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (audio_out_data_audio_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_out_data_audio_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_out_data_audio_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_out_data_audio_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_out_data_audio_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (audio_out_pause_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_out_pause_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_out_pause_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_out_pause_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_out_pause_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                           //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_011_src_ready),                      //       src.ready
		.src_valid          (router_011_src_valid),                      //          .valid
		.src_data           (router_011_src_data),                       //          .data
		.src_channel        (router_011_src_channel),                    //          .channel
		.src_startofpacket  (router_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                 //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (audio_out_stop_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_out_stop_s1_agent_rp_valid),         //          .valid
		.sink_data          (audio_out_stop_s1_agent_rp_data),          //          .data
		.sink_startofpacket (audio_out_stop_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_out_stop_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                          //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                    //       src.ready
		.src_valid          (router_013_src_valid),                    //          .valid
		.src_data           (router_013_src_data),                     //          .data
		.src_channel        (router_013_src_channel),                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (timer_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                        //       src.ready
		.src_valid          (router_014_src_valid),                        //          .valid
		.src_data           (router_014_src_data),                         //          .data
		.src_channel        (router_014_src_channel),                      //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (key_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                       //          .valid
		.sink_data          (key_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                        //       src.ready
		.src_valid          (router_015_src_valid),                        //          .valid
		.src_data           (router_015_src_data),                         //          .data
		.src_channel        (router_015_src_channel),                      //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_016 (
		.sink_ready         (signal_selector_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (signal_selector_s1_agent_rp_valid),           //          .valid
		.sink_data          (signal_selector_s1_agent_rp_data),            //          .data
		.sink_startofpacket (signal_selector_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (signal_selector_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                        //       src.ready
		.src_valid          (router_016_src_valid),                        //          .valid
		.src_data           (router_016_src_data),                         //          .data
		.src_channel        (router_016_src_channel),                      //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (modulation_selector_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (modulation_selector_s1_agent_rp_valid),         //          .valid
		.sink_data          (modulation_selector_s1_agent_rp_data),          //          .data
		.sink_startofpacket (modulation_selector_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modulation_selector_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_018 (
		.sink_ready         (keyboard_keys_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (keyboard_keys_s1_agent_rp_valid),                 //          .valid
		.sink_data          (keyboard_keys_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (keyboard_keys_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (keyboard_keys_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_outclk2_clk),                                 //       clk.clk
		.reset              (keyboard_keys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                            //       src.ready
		.src_valid          (router_018_src_valid),                            //          .valid
		.src_data           (router_018_src_data),                             //          .data
		.src_channel        (router_018_src_channel),                          //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                       //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_019 (
		.sink_ready         (mouse_pos_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (mouse_pos_s1_agent_rp_valid),                 //          .valid
		.sink_data          (mouse_pos_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (mouse_pos_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mouse_pos_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (vga_clk_bridge_out_out_clk_1_clk),            //       clk.clk
		.reset              (mouse_pos_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                        //       src.ready
		.src_valid          (router_019_src_valid),                        //          .valid
		.src_data           (router_019_src_data),                         //          .data
		.src_channel        (router_019_src_channel),                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_020 (
		.sink_ready         (div_freq_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (div_freq_s1_agent_rp_valid),                  //          .valid
		.sink_data          (div_freq_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (div_freq_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (div_freq_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                        //       src.ready
		.src_valid          (router_020_src_valid),                        //          .valid
		.src_data           (router_020_src_data),                         //          .data
		.src_channel        (router_020_src_channel),                      //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_021 (
		.sink_ready         (audio_sel_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (audio_sel_s1_agent_rp_valid),                 //          .valid
		.sink_data          (audio_sel_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (audio_sel_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (audio_sel_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                        //       src.ready
		.src_valid          (router_021_src_valid),                        //          .valid
		.src_data           (router_021_src_data),                         //          .data
		.src_channel        (router_021_src_channel),                      //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_022 (
		.sink_ready         (lfsr_clk_interrupt_gen_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lfsr_clk_interrupt_gen_s1_agent_rp_valid),         //          .valid
		.sink_data          (lfsr_clk_interrupt_gen_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lfsr_clk_interrupt_gen_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lfsr_clk_interrupt_gen_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                   //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_022_src_ready),                             //       src.ready
		.src_valid          (router_022_src_valid),                             //          .valid
		.src_data           (router_022_src_data),                              //          .data
		.src_channel        (router_022_src_channel),                           //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                        //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_023 (
		.sink_ready         (lfsr_val_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (lfsr_val_s1_agent_rp_valid),                  //          .valid
		.sink_data          (lfsr_val_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (lfsr_val_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (lfsr_val_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                        //       src.ready
		.src_valid          (router_023_src_valid),                        //          .valid
		.src_data           (router_023_src_data),                         //          .data
		.src_channel        (router_023_src_channel),                      //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_024 (
		.sink_ready         (dds_increment_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (dds_increment_s1_agent_rp_valid),             //          .valid
		.sink_data          (dds_increment_s1_agent_rp_data),              //          .data
		.sink_startofpacket (dds_increment_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dds_increment_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                        //       src.ready
		.src_valid          (router_024_src_valid),                        //          .valid
		.src_data           (router_024_src_data),                         //          .data
		.src_channel        (router_024_src_channel),                      //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_025 (
		.sink_ready         (vga_to_nios_2_datamaster_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_to_nios_2_datamaster_agent_rp_valid),         //          .valid
		.sink_data          (vga_to_nios_2_datamaster_agent_rp_data),          //          .data
		.sink_startofpacket (vga_to_nios_2_datamaster_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_to_nios_2_datamaster_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_outclk0_clk),                                 //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_025_src_ready),                            //       src.ready
		.src_valid          (router_025_src_valid),                            //          .valid
		.src_data           (router_025_src_data),                             //          .data
		.src_channel        (router_025_src_channel),                          //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                       //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_026 (
		.sink_ready         (audio_wrclk_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (audio_wrclk_s1_agent_rp_valid),           //          .valid
		.sink_data          (audio_wrclk_s1_agent_rp_data),            //          .data
		.sink_startofpacket (audio_wrclk_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_wrclk_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                    //       src.ready
		.src_valid          (router_026_src_valid),                    //          .valid
		.src_data           (router_026_src_data),                     //          .data
		.src_channel        (router_026_src_channel),                  //          .channel
		.src_startofpacket  (router_026_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_router_003 router_027 (
		.sink_ready         (audio_wrreq_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (audio_wrreq_s1_agent_rp_valid),           //          .valid
		.sink_data          (audio_wrreq_s1_agent_rp_data),            //          .data
		.sink_startofpacket (audio_wrreq_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_wrreq_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                    //       src.ready
		.src_valid          (router_027_src_valid),                    //          .valid
		.src_data           (router_027_src_data),                     //          .data
		.src_channel        (router_027_src_channel),                  //          .channel
		.src_startofpacket  (router_027_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (clk_50_clk_clk),                                //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),            //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),            //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),          //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),             //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),    //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clk_50_clk_clk),                                       //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                   //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                 //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                    //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),             //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (74),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (66),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (pll_outclk0_clk),                              //       cr0.clk
		.reset                 (audio_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_50_clk_clk),                          //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (limiter_pipeline_source0_ready),          //      sink.ready
		.sink_channel        (limiter_pipeline_source0_channel),        //          .channel
		.sink_data           (limiter_pipeline_source0_data),           //          .data
		.sink_startofpacket  (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.sink_valid          (limiter_pipeline_source0_valid),          //          .valid
		.src0_ready          (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                    //          .valid
		.src0_data           (cmd_demux_src0_data),                     //          .data
		.src0_channel        (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                    //          .valid
		.src1_data           (cmd_demux_src1_data),                     //          .data
		.src1_channel        (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                    //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                    //          .valid
		.src2_data           (cmd_demux_src2_data),                     //          .data
		.src2_channel        (cmd_demux_src2_channel),                  //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                    //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                    //          .valid
		.src3_data           (cmd_demux_src3_data),                     //          .data
		.src3_channel        (cmd_demux_src3_channel),                  //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),              //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                    //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                    //          .valid
		.src4_data           (cmd_demux_src4_data),                     //          .data
		.src4_channel        (cmd_demux_src4_channel),                  //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),              //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                    //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                    //          .valid
		.src5_data           (cmd_demux_src5_data),                     //          .data
		.src5_channel        (cmd_demux_src5_channel),                  //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),            //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),              //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                    //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                    //          .valid
		.src6_data           (cmd_demux_src6_data),                     //          .data
		.src6_channel        (cmd_demux_src6_channel),                  //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),            //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),              //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                    //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                    //          .valid
		.src7_data           (cmd_demux_src7_data),                     //          .data
		.src7_channel        (cmd_demux_src7_channel),                  //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),            //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),              //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                    //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                    //          .valid
		.src8_data           (cmd_demux_src8_data),                     //          .data
		.src8_channel        (cmd_demux_src8_channel),                  //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),            //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),              //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                    //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                    //          .valid
		.src9_data           (cmd_demux_src9_data),                     //          .data
		.src9_channel        (cmd_demux_src9_channel),                  //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),            //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),              //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                   //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                   //          .valid
		.src10_data          (cmd_demux_src10_data),                    //          .data
		.src10_channel       (cmd_demux_src10_channel),                 //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),           //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),             //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                   //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                   //          .valid
		.src11_data          (cmd_demux_src11_data),                    //          .data
		.src11_channel       (cmd_demux_src11_channel),                 //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),           //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),             //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                   //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                   //          .valid
		.src12_data          (cmd_demux_src12_data),                    //          .data
		.src12_channel       (cmd_demux_src12_channel),                 //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),           //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),             //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                   //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                   //          .valid
		.src13_data          (cmd_demux_src13_data),                    //          .data
		.src13_channel       (cmd_demux_src13_channel),                 //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),           //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),             //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                   //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                   //          .valid
		.src14_data          (cmd_demux_src14_data),                    //          .data
		.src14_channel       (cmd_demux_src14_channel),                 //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),           //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),             //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                   //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                   //          .valid
		.src15_data          (cmd_demux_src15_data),                    //          .data
		.src15_channel       (cmd_demux_src15_channel),                 //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),           //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),             //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                   //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                   //          .valid
		.src16_data          (cmd_demux_src16_data),                    //          .data
		.src16_channel       (cmd_demux_src16_channel),                 //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),           //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),             //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                   //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                   //          .valid
		.src17_data          (cmd_demux_src17_data),                    //          .data
		.src17_channel       (cmd_demux_src17_channel),                 //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),           //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),             //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                   //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                   //          .valid
		.src18_data          (cmd_demux_src18_data),                    //          .data
		.src18_channel       (cmd_demux_src18_channel),                 //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),           //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),             //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                   //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                   //          .valid
		.src19_data          (cmd_demux_src19_data),                    //          .data
		.src19_channel       (cmd_demux_src19_channel),                 //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),           //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),             //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                   //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                   //          .valid
		.src20_data          (cmd_demux_src20_data),                    //          .data
		.src20_channel       (cmd_demux_src20_channel),                 //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),           //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),             //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                   //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                   //          .valid
		.src21_data          (cmd_demux_src21_data),                    //          .data
		.src21_channel       (cmd_demux_src21_channel),                 //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),           //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),             //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                   //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                   //          .valid
		.src22_data          (cmd_demux_src22_data),                    //          .data
		.src22_channel       (cmd_demux_src22_channel),                 //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),           //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),             //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                   //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                   //          .valid
		.src23_data          (cmd_demux_src23_data),                    //          .data
		.src23_channel       (cmd_demux_src23_channel),                 //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),           //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),             //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                   //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                   //          .valid
		.src24_data          (cmd_demux_src24_data),                    //          .data
		.src24_channel       (cmd_demux_src24_channel),                 //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),           //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                       //          .valid
		.sink0_channel       (crosser_out_channel),                     //          .channel
		.sink0_data          (crosser_out_data),                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                   //          .valid
		.sink0_channel       (crosser_001_out_channel),                 //          .channel
		.sink0_data          (crosser_001_out_data),                    //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                   //          .valid
		.sink0_channel       (crosser_002_out_channel),                 //          .channel
		.sink0_data          (crosser_002_out_data),                    //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                   //          .valid
		.sink0_channel       (crosser_003_out_channel),                 //          .channel
		.sink0_data          (crosser_003_out_data),                    //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                          //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                  //          .channel
		.sink0_data          (cmd_demux_src6_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                   //          .valid
		.sink0_channel       (crosser_004_out_channel),                 //          .channel
		.sink0_data          (crosser_004_out_data),                    //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                   //          .valid
		.sink0_channel       (crosser_005_out_channel),                 //          .channel
		.sink0_data          (crosser_005_out_data),                    //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                   //          .valid
		.sink0_channel       (crosser_006_out_channel),                 //          .channel
		.sink0_data          (crosser_006_out_data),                    //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux_010 cmd_mux_010 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                   //          .valid
		.sink0_channel       (crosser_007_out_channel),                 //          .channel
		.sink0_data          (crosser_007_out_data),                    //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_013_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_013_out_valid),                   //          .valid
		.sink1_channel       (crosser_013_out_channel),                 //          .channel
		.sink1_data          (crosser_013_out_data),                    //          .data
		.sink1_startofpacket (crosser_013_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_013_out_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),              //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                       //          .valid
		.src_data            (cmd_mux_011_src_data),                        //          .data
		.src_channel         (cmd_mux_011_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                     //          .channel
		.sink0_data          (cmd_demux_src11_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                       //          .valid
		.src_data            (cmd_mux_012_src_data),                        //          .data
		.src_channel         (cmd_mux_012_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                     //          .channel
		.sink0_data          (cmd_demux_src12_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                       //          .valid
		.src_data            (cmd_mux_013_src_data),                        //          .data
		.src_channel         (cmd_mux_013_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                     //          .channel
		.sink0_data          (cmd_demux_src13_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                       //          .valid
		.src_data            (cmd_mux_014_src_data),                        //          .data
		.src_channel         (cmd_mux_014_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                     //          .channel
		.sink0_data          (cmd_demux_src14_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (pll_outclk2_clk),                                 //       clk.clk
		.reset               (keyboard_keys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                           //          .valid
		.src_data            (cmd_mux_015_src_data),                            //          .data
		.src_channel         (cmd_mux_015_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                           //          .valid
		.sink0_channel       (crosser_008_out_channel),                         //          .channel
		.sink0_data          (crosser_008_out_data),                            //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                      //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (vga_clk_bridge_out_out_clk_1_clk),            //       clk.clk
		.reset               (mouse_pos_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                       //          .valid
		.src_data            (cmd_mux_016_src_data),                        //          .data
		.src_channel         (cmd_mux_016_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                       //          .valid
		.sink0_channel       (crosser_009_out_channel),                     //          .channel
		.sink0_data          (crosser_009_out_data),                        //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                       //          .valid
		.src_data            (cmd_mux_017_src_data),                        //          .data
		.src_channel         (cmd_mux_017_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                     //          .channel
		.sink0_data          (cmd_demux_src17_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                       //          .valid
		.src_data            (cmd_mux_018_src_data),                        //          .data
		.src_channel         (cmd_mux_018_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                     //          .channel
		.sink0_data          (cmd_demux_src18_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                       //          .valid
		.src_data            (cmd_mux_019_src_data),                        //          .data
		.src_channel         (cmd_mux_019_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                     //          .channel
		.sink0_data          (cmd_demux_src19_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                       //          .valid
		.src_data            (cmd_mux_020_src_data),                        //          .data
		.src_channel         (cmd_mux_020_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                     //          .channel
		.sink0_data          (cmd_demux_src20_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                       //          .valid
		.src_data            (cmd_mux_021_src_data),                        //          .data
		.src_channel         (cmd_mux_021_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                     //          .channel
		.sink0_data          (cmd_demux_src21_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                   //          .valid
		.src_data            (cmd_mux_022_src_data),                    //          .data
		.src_channel         (cmd_mux_022_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                   //          .valid
		.sink0_channel       (crosser_010_out_channel),                 //          .channel
		.sink0_data          (crosser_010_out_data),                    //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                   //          .valid
		.src_data            (cmd_mux_023_src_data),                    //          .data
		.src_channel         (cmd_mux_023_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                   //          .valid
		.sink0_channel       (crosser_011_out_channel),                 //          .channel
		.sink0_data          (crosser_011_out_data),                    //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                   //          .valid
		.src_data            (cmd_mux_024_src_data),                    //          .data
		.src_channel         (cmd_mux_024_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                   //          .valid
		.sink0_channel       (crosser_012_out_channel),                 //          .channel
		.sink0_data          (crosser_012_out_data),                    //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_001 rsp_demux_006 (
		.clk                (clk_50_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_007 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_008 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_009 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux_010 rsp_demux_010 (
		.clk                (pll_outclk0_clk),                              //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_010_src1_data),                      //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_010_src2_data),                      //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                        //      sink.ready
		.sink_channel       (router_014_src_channel),                      //          .channel
		.sink_data          (router_014_src_data),                         //          .data
		.sink_startofpacket (router_014_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_014_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_011_src0_data),                     //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                        //      sink.ready
		.sink_channel       (router_015_src_channel),                      //          .channel
		.sink_data          (router_015_src_data),                         //          .data
		.sink_startofpacket (router_015_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_015_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_012_src0_data),                     //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                        //      sink.ready
		.sink_channel       (router_016_src_channel),                      //          .channel
		.sink_data          (router_016_src_data),                         //          .data
		.sink_startofpacket (router_016_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_016_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_013_src0_data),                     //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                        //      sink.ready
		.sink_channel       (router_017_src_channel),                      //          .channel
		.sink_data          (router_017_src_data),                         //          .data
		.sink_startofpacket (router_017_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_017_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_014_src0_data),                     //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux_015 rsp_demux_015 (
		.clk                (pll_outclk2_clk),                                 //       clk.clk
		.reset              (keyboard_keys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                            //      sink.ready
		.sink_channel       (router_018_src_channel),                          //          .channel
		.sink_data          (router_018_src_data),                             //          .data
		.sink_startofpacket (router_018_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_018_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_015_src0_data),                         //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux_016 rsp_demux_016 (
		.clk                (vga_clk_bridge_out_out_clk_1_clk),            //       clk.clk
		.reset              (mouse_pos_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                        //      sink.ready
		.sink_channel       (router_019_src_channel),                      //          .channel
		.sink_data          (router_019_src_data),                         //          .data
		.sink_startofpacket (router_019_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_019_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_016_src0_data),                     //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                        //      sink.ready
		.sink_channel       (router_020_src_channel),                      //          .channel
		.sink_data          (router_020_src_data),                         //          .data
		.sink_startofpacket (router_020_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_020_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_017_src0_data),                     //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                        //      sink.ready
		.sink_channel       (router_021_src_channel),                      //          .channel
		.sink_data          (router_021_src_data),                         //          .data
		.sink_startofpacket (router_021_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_021_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_018_src0_data),                     //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                        //      sink.ready
		.sink_channel       (router_022_src_channel),                      //          .channel
		.sink_data          (router_022_src_data),                         //          .data
		.sink_startofpacket (router_022_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_022_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_019_src0_data),                     //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                        //      sink.ready
		.sink_channel       (router_023_src_channel),                      //          .channel
		.sink_data          (router_023_src_data),                         //          .data
		.sink_startofpacket (router_023_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_023_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_020_src0_data),                     //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                        //      sink.ready
		.sink_channel       (router_024_src_channel),                      //          .channel
		.sink_data          (router_024_src_data),                         //          .data
		.sink_startofpacket (router_024_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_024_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_021_src0_data),                     //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_022 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                    //      sink.ready
		.sink_channel       (router_025_src_channel),                  //          .channel
		.sink_data          (router_025_src_data),                     //          .data
		.sink_startofpacket (router_025_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_025_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                //          .valid
		.src0_data          (rsp_demux_022_src0_data),                 //          .data
		.src0_channel       (rsp_demux_022_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_023 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                    //      sink.ready
		.sink_channel       (router_026_src_channel),                  //          .channel
		.sink_data          (router_026_src_data),                     //          .data
		.sink_startofpacket (router_026_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_026_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                //          .valid
		.src0_data          (rsp_demux_023_src0_data),                 //          .data
		.src0_channel       (rsp_demux_023_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_024 (
		.clk                (pll_outclk0_clk),                         //       clk.clk
		.reset              (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                    //      sink.ready
		.sink_channel       (router_027_src_channel),                  //          .channel
		.sink_data          (router_027_src_data),                     //          .data
		.sink_startofpacket (router_027_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_027_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                //          .valid
		.src0_data          (rsp_demux_024_src0_data),                 //          .data
		.src0_channel       (rsp_demux_024_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_50_clk_clk),                          //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                       //       src.ready
		.src_valid            (rsp_mux_src_valid),                       //          .valid
		.src_data             (rsp_mux_src_data),                        //          .data
		.src_channel          (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                  //          .channel
		.sink0_data           (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready          (crosser_014_out_ready),                   //     sink2.ready
		.sink2_valid          (crosser_014_out_valid),                   //          .valid
		.sink2_channel        (crosser_014_out_channel),                 //          .channel
		.sink2_data           (crosser_014_out_data),                    //          .data
		.sink2_startofpacket  (crosser_014_out_startofpacket),           //          .startofpacket
		.sink2_endofpacket    (crosser_014_out_endofpacket),             //          .endofpacket
		.sink3_ready          (crosser_015_out_ready),                   //     sink3.ready
		.sink3_valid          (crosser_015_out_valid),                   //          .valid
		.sink3_channel        (crosser_015_out_channel),                 //          .channel
		.sink3_data           (crosser_015_out_data),                    //          .data
		.sink3_startofpacket  (crosser_015_out_startofpacket),           //          .startofpacket
		.sink3_endofpacket    (crosser_015_out_endofpacket),             //          .endofpacket
		.sink4_ready          (crosser_016_out_ready),                   //     sink4.ready
		.sink4_valid          (crosser_016_out_valid),                   //          .valid
		.sink4_channel        (crosser_016_out_channel),                 //          .channel
		.sink4_data           (crosser_016_out_data),                    //          .data
		.sink4_startofpacket  (crosser_016_out_startofpacket),           //          .startofpacket
		.sink4_endofpacket    (crosser_016_out_endofpacket),             //          .endofpacket
		.sink5_ready          (crosser_017_out_ready),                   //     sink5.ready
		.sink5_valid          (crosser_017_out_valid),                   //          .valid
		.sink5_channel        (crosser_017_out_channel),                 //          .channel
		.sink5_data           (crosser_017_out_data),                    //          .data
		.sink5_startofpacket  (crosser_017_out_startofpacket),           //          .startofpacket
		.sink5_endofpacket    (crosser_017_out_endofpacket),             //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready          (crosser_018_out_ready),                   //     sink7.ready
		.sink7_valid          (crosser_018_out_valid),                   //          .valid
		.sink7_channel        (crosser_018_out_channel),                 //          .channel
		.sink7_data           (crosser_018_out_data),                    //          .data
		.sink7_startofpacket  (crosser_018_out_startofpacket),           //          .startofpacket
		.sink7_endofpacket    (crosser_018_out_endofpacket),             //          .endofpacket
		.sink8_ready          (crosser_019_out_ready),                   //     sink8.ready
		.sink8_valid          (crosser_019_out_valid),                   //          .valid
		.sink8_channel        (crosser_019_out_channel),                 //          .channel
		.sink8_data           (crosser_019_out_data),                    //          .data
		.sink8_startofpacket  (crosser_019_out_startofpacket),           //          .startofpacket
		.sink8_endofpacket    (crosser_019_out_endofpacket),             //          .endofpacket
		.sink9_ready          (crosser_020_out_ready),                   //     sink9.ready
		.sink9_valid          (crosser_020_out_valid),                   //          .valid
		.sink9_channel        (crosser_020_out_channel),                 //          .channel
		.sink9_data           (crosser_020_out_data),                    //          .data
		.sink9_startofpacket  (crosser_020_out_startofpacket),           //          .startofpacket
		.sink9_endofpacket    (crosser_020_out_endofpacket),             //          .endofpacket
		.sink10_ready         (crosser_021_out_ready),                   //    sink10.ready
		.sink10_valid         (crosser_021_out_valid),                   //          .valid
		.sink10_channel       (crosser_021_out_channel),                 //          .channel
		.sink10_data          (crosser_021_out_data),                    //          .data
		.sink10_startofpacket (crosser_021_out_startofpacket),           //          .startofpacket
		.sink10_endofpacket   (crosser_021_out_endofpacket),             //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (crosser_023_out_ready),                   //    sink15.ready
		.sink15_valid         (crosser_023_out_valid),                   //          .valid
		.sink15_channel       (crosser_023_out_channel),                 //          .channel
		.sink15_data          (crosser_023_out_data),                    //          .data
		.sink15_startofpacket (crosser_023_out_startofpacket),           //          .startofpacket
		.sink15_endofpacket   (crosser_023_out_endofpacket),             //          .endofpacket
		.sink16_ready         (crosser_024_out_ready),                   //    sink16.ready
		.sink16_valid         (crosser_024_out_valid),                   //          .valid
		.sink16_channel       (crosser_024_out_channel),                 //          .channel
		.sink16_data          (crosser_024_out_data),                    //          .data
		.sink16_startofpacket (crosser_024_out_startofpacket),           //          .startofpacket
		.sink16_endofpacket   (crosser_024_out_endofpacket),             //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                 //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),              //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                 //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),          //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),              //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                 //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),        //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),          //          .endofpacket
		.sink22_ready         (crosser_025_out_ready),                   //    sink22.ready
		.sink22_valid         (crosser_025_out_valid),                   //          .valid
		.sink22_channel       (crosser_025_out_channel),                 //          .channel
		.sink22_data          (crosser_025_out_data),                    //          .data
		.sink22_startofpacket (crosser_025_out_startofpacket),           //          .startofpacket
		.sink22_endofpacket   (crosser_025_out_endofpacket),             //          .endofpacket
		.sink23_ready         (crosser_026_out_ready),                   //    sink23.ready
		.sink23_valid         (crosser_026_out_valid),                   //          .valid
		.sink23_channel       (crosser_026_out_channel),                 //          .channel
		.sink23_data          (crosser_026_out_data),                    //          .data
		.sink23_startofpacket (crosser_026_out_startofpacket),           //          .startofpacket
		.sink23_endofpacket   (crosser_026_out_endofpacket),             //          .endofpacket
		.sink24_ready         (crosser_027_out_ready),                   //    sink24.ready
		.sink24_valid         (crosser_027_out_valid),                   //          .valid
		.sink24_channel       (crosser_027_out_channel),                 //          .channel
		.sink24_data          (crosser_027_out_data),                    //          .data
		.sink24_startofpacket (crosser_027_out_startofpacket),           //          .startofpacket
		.sink24_endofpacket   (crosser_027_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_50_clk_clk),                          //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (crosser_022_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_022_out_valid),                   //          .valid
		.sink1_channel       (crosser_022_out_channel),                 //          .channel
		.sink1_data          (crosser_022_out_data),                    //          .data
		.sink1_startofpacket (crosser_022_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_022_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (pll_outclk0_clk),                         //       clk.clk
		.reset               (audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_010_src2_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_010_src2_valid),                //          .valid
		.sink0_channel       (rsp_demux_010_src2_channel),              //          .channel
		.sink0_data          (rsp_demux_010_src2_data),                 //          .data
		.sink0_startofpacket (rsp_demux_010_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_010_src2_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (66),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (69),
		.IN_PKT_BURST_SIZE_L           (67),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (71),
		.IN_PKT_BURST_TYPE_L           (70),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (pll_outclk0_clk),                              //       clk.clk
		.reset                (audio_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_013_src_valid),                         //      sink.valid
		.in_channel           (router_013_src_channel),                       //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_013_src_ready),                         //          .ready
		.in_data              (router_013_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (69),
		.OUT_PKT_BURST_SIZE_L          (67),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (71),
		.OUT_PKT_BURST_TYPE_L          (70),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (pll_outclk0_clk),                              //       clk.clk
		.reset                (audio_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                        //          .ready
		.in_data              (cmd_mux_010_src_data),                         //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                    //            in.ready
		.in_valid          (cmd_demux_src2_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                  //              .channel
		.in_data           (cmd_demux_src2_data),                     //              .data
		.out_ready         (crosser_out_ready),                       //           out.ready
		.out_valid         (crosser_out_valid),                       //              .valid
		.out_startofpacket (crosser_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_out_channel),                     //              .channel
		.out_data          (crosser_out_data),                        //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                    //            in.ready
		.in_valid          (cmd_demux_src3_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                  //              .channel
		.in_data           (cmd_demux_src3_data),                     //              .data
		.out_ready         (crosser_001_out_ready),                   //           out.ready
		.out_valid         (crosser_001_out_valid),                   //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_001_out_channel),                 //              .channel
		.out_data          (crosser_001_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                    //            in.ready
		.in_valid          (cmd_demux_src4_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                  //              .channel
		.in_data           (cmd_demux_src4_data),                     //              .data
		.out_ready         (crosser_002_out_ready),                   //           out.ready
		.out_valid         (crosser_002_out_valid),                   //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_002_out_channel),                 //              .channel
		.out_data          (crosser_002_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                    //            in.ready
		.in_valid          (cmd_demux_src5_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                  //              .channel
		.in_data           (cmd_demux_src5_data),                     //              .data
		.out_ready         (crosser_003_out_ready),                   //           out.ready
		.out_valid         (crosser_003_out_valid),                   //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_003_out_channel),                 //              .channel
		.out_data          (crosser_003_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                    //            in.ready
		.in_valid          (cmd_demux_src7_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                  //              .channel
		.in_data           (cmd_demux_src7_data),                     //              .data
		.out_ready         (crosser_004_out_ready),                   //           out.ready
		.out_valid         (crosser_004_out_valid),                   //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_004_out_channel),                 //              .channel
		.out_data          (crosser_004_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                    //            in.ready
		.in_valid          (cmd_demux_src8_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                  //              .channel
		.in_data           (cmd_demux_src8_data),                     //              .data
		.out_ready         (crosser_005_out_ready),                   //           out.ready
		.out_valid         (crosser_005_out_valid),                   //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_005_out_channel),                 //              .channel
		.out_data          (crosser_005_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                    //            in.ready
		.in_valid          (cmd_demux_src9_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                  //              .channel
		.in_data           (cmd_demux_src9_data),                     //              .data
		.out_ready         (crosser_006_out_ready),                   //           out.ready
		.out_valid         (crosser_006_out_valid),                   //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_006_out_channel),                 //              .channel
		.out_data          (crosser_006_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                   //            in.ready
		.in_valid          (cmd_demux_src10_valid),                   //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),           //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),             //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                 //              .channel
		.in_data           (cmd_demux_src10_data),                    //              .data
		.out_ready         (crosser_007_out_ready),                   //           out.ready
		.out_valid         (crosser_007_out_valid),                   //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_007_out_channel),                 //              .channel
		.out_data          (crosser_007_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_50_clk_clk),                                  //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (pll_outclk2_clk),                                 //       out_clk.clk
		.out_reset         (keyboard_keys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                           //            in.ready
		.in_valid          (cmd_demux_src15_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                         //              .channel
		.in_data           (cmd_demux_src15_data),                            //              .data
		.out_ready         (crosser_008_out_ready),                           //           out.ready
		.out_valid         (crosser_008_out_valid),                           //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_008_out_channel),                         //              .channel
		.out_data          (crosser_008_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_50_clk_clk),                              //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (vga_clk_bridge_out_out_clk_1_clk),            //       out_clk.clk
		.out_reset         (mouse_pos_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src16_ready),                       //            in.ready
		.in_valid          (cmd_demux_src16_valid),                       //              .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),               //              .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                 //              .endofpacket
		.in_channel        (cmd_demux_src16_channel),                     //              .channel
		.in_data           (cmd_demux_src16_data),                        //              .data
		.out_ready         (crosser_009_out_ready),                       //           out.ready
		.out_valid         (crosser_009_out_valid),                       //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_009_out_channel),                     //              .channel
		.out_data          (crosser_009_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src22_ready),                   //            in.ready
		.in_valid          (cmd_demux_src22_valid),                   //              .valid
		.in_startofpacket  (cmd_demux_src22_startofpacket),           //              .startofpacket
		.in_endofpacket    (cmd_demux_src22_endofpacket),             //              .endofpacket
		.in_channel        (cmd_demux_src22_channel),                 //              .channel
		.in_data           (cmd_demux_src22_data),                    //              .data
		.out_ready         (crosser_010_out_ready),                   //           out.ready
		.out_valid         (crosser_010_out_valid),                   //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_010_out_channel),                 //              .channel
		.out_data          (crosser_010_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src23_ready),                   //            in.ready
		.in_valid          (cmd_demux_src23_valid),                   //              .valid
		.in_startofpacket  (cmd_demux_src23_startofpacket),           //              .startofpacket
		.in_endofpacket    (cmd_demux_src23_endofpacket),             //              .endofpacket
		.in_channel        (cmd_demux_src23_channel),                 //              .channel
		.in_data           (cmd_demux_src23_data),                    //              .data
		.out_ready         (crosser_011_out_ready),                   //           out.ready
		.out_valid         (crosser_011_out_valid),                   //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_011_out_channel),                 //              .channel
		.out_data          (crosser_011_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src24_ready),                   //            in.ready
		.in_valid          (cmd_demux_src24_valid),                   //              .valid
		.in_startofpacket  (cmd_demux_src24_startofpacket),           //              .startofpacket
		.in_endofpacket    (cmd_demux_src24_endofpacket),             //              .endofpacket
		.in_channel        (cmd_demux_src24_channel),                 //              .channel
		.in_data           (cmd_demux_src24_data),                    //              .data
		.out_ready         (crosser_012_out_ready),                   //           out.ready
		.out_valid         (crosser_012_out_valid),                   //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_012_out_channel),                 //              .channel
		.out_data          (crosser_012_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_50_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                         //       out_clk.clk
		.out_reset         (audio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),        //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),          //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),              //              .channel
		.in_data           (cmd_demux_001_src1_data),                 //              .data
		.out_ready         (crosser_013_out_ready),                   //           out.ready
		.out_valid         (crosser_013_out_valid),                   //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_013_out_channel),                 //              .channel
		.out_data          (crosser_013_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),              //              .channel
		.in_data           (rsp_demux_002_src0_data),                 //              .data
		.out_ready         (crosser_014_out_ready),                   //           out.ready
		.out_valid         (crosser_014_out_valid),                   //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_014_out_channel),                 //              .channel
		.out_data          (crosser_014_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),              //              .channel
		.in_data           (rsp_demux_003_src0_data),                 //              .data
		.out_ready         (crosser_015_out_ready),                   //           out.ready
		.out_valid         (crosser_015_out_valid),                   //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_015_out_channel),                 //              .channel
		.out_data          (crosser_015_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),              //              .channel
		.in_data           (rsp_demux_004_src0_data),                 //              .data
		.out_ready         (crosser_016_out_ready),                   //           out.ready
		.out_valid         (crosser_016_out_valid),                   //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_016_out_channel),                 //              .channel
		.out_data          (crosser_016_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),              //              .channel
		.in_data           (rsp_demux_005_src0_data),                 //              .data
		.out_ready         (crosser_017_out_ready),                   //           out.ready
		.out_valid         (crosser_017_out_valid),                   //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_017_out_channel),                 //              .channel
		.out_data          (crosser_017_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),              //              .channel
		.in_data           (rsp_demux_007_src0_data),                 //              .data
		.out_ready         (crosser_018_out_ready),                   //           out.ready
		.out_valid         (crosser_018_out_valid),                   //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_018_out_channel),                 //              .channel
		.out_data          (crosser_018_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),              //              .channel
		.in_data           (rsp_demux_008_src0_data),                 //              .data
		.out_ready         (crosser_019_out_ready),                   //           out.ready
		.out_valid         (crosser_019_out_valid),                   //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_019_out_channel),                 //              .channel
		.out_data          (crosser_019_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),              //              .channel
		.in_data           (rsp_demux_009_src0_data),                 //              .data
		.out_ready         (crosser_020_out_ready),                   //           out.ready
		.out_valid         (crosser_020_out_valid),                   //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_020_out_channel),                 //              .channel
		.out_data          (crosser_020_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),              //              .channel
		.in_data           (rsp_demux_010_src0_data),                 //              .data
		.out_ready         (crosser_021_out_ready),                   //           out.ready
		.out_valid         (crosser_021_out_valid),                   //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_021_out_channel),                 //              .channel
		.out_data          (crosser_021_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src1_ready),                //            in.ready
		.in_valid          (rsp_demux_010_src1_valid),                //              .valid
		.in_startofpacket  (rsp_demux_010_src1_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src1_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_010_src1_channel),              //              .channel
		.in_data           (rsp_demux_010_src1_data),                 //              .data
		.out_ready         (crosser_022_out_ready),                   //           out.ready
		.out_valid         (crosser_022_out_valid),                   //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_022_out_channel),                 //              .channel
		.out_data          (crosser_022_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (pll_outclk2_clk),                                 //        in_clk.clk
		.in_reset          (keyboard_keys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                  //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                        //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                      //              .channel
		.in_data           (rsp_demux_015_src0_data),                         //              .data
		.out_ready         (crosser_023_out_ready),                           //           out.ready
		.out_valid         (crosser_023_out_valid),                           //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_023_out_channel),                         //              .channel
		.out_data          (crosser_023_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (vga_clk_bridge_out_out_clk_1_clk),            //        in_clk.clk
		.in_reset          (mouse_pos_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                              //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                  //              .channel
		.in_data           (rsp_demux_016_src0_data),                     //              .data
		.out_ready         (crosser_024_out_ready),                       //           out.ready
		.out_valid         (crosser_024_out_valid),                       //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_024_out_channel),                     //              .channel
		.out_data          (crosser_024_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_022_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_022_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_022_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_022_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_022_src0_channel),              //              .channel
		.in_data           (rsp_demux_022_src0_data),                 //              .data
		.out_ready         (crosser_025_out_ready),                   //           out.ready
		.out_valid         (crosser_025_out_valid),                   //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_025_out_channel),                 //              .channel
		.out_data          (crosser_025_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_023_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_023_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_023_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_023_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_023_src0_channel),              //              .channel
		.in_data           (rsp_demux_023_src0_data),                 //              .data
		.out_ready         (crosser_026_out_ready),                   //           out.ready
		.out_valid         (crosser_026_out_valid),                   //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_026_out_channel),                 //              .channel
		.out_data          (crosser_026_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (pll_outclk0_clk),                         //        in_clk.clk
		.in_reset          (audio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_024_src0_ready),                //            in.ready
		.in_valid          (rsp_demux_024_src0_valid),                //              .valid
		.in_startofpacket  (rsp_demux_024_src0_startofpacket),        //              .startofpacket
		.in_endofpacket    (rsp_demux_024_src0_endofpacket),          //              .endofpacket
		.in_channel        (rsp_demux_024_src0_channel),              //              .channel
		.in_data           (rsp_demux_024_src0_data),                 //              .data
		.out_ready         (crosser_027_out_ready),                   //           out.ready
		.out_valid         (crosser_027_out_valid),                   //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),           //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),             //              .endofpacket
		.out_channel       (crosser_027_out_channel),                 //              .channel
		.out_data          (crosser_027_out_data),                    //              .data
		.in_empty          (1'b0),                                    //   (terminated)
		.in_error          (1'b0),                                    //   (terminated)
		.out_empty         (),                                        //   (terminated)
		.out_error         ()                                         //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (25),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_50_clk_clk),                                //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (cpu_data_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),          //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                 //          .data
		.out_channel       (limiter_pipeline_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (25),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_50_clk_clk),                             //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                           //          .data
		.in_channel        (rsp_mux_src_channel),                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (25),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_50_clk_clk),                                       //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (25),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_50_clk_clk),                             //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                       //          .data
		.in_channel        (rsp_mux_001_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),          //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

endmodule
